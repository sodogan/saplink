<?xml version="1.0" encoding="utf-8"?>
<nugget name="C:\Projects\SAPlink-plugins\build\SAPlink-plugins_Daily.nugg">
 <CLAS CLSNAME="ZSAPLINK_TABLE_CONTENTS" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Table Contents" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_TABLE_CONTENTS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_TABLE_CONTENTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_CONTENTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_CONTENTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_CONTENTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_CONTENTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD checkexists.

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

* No implementation

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createixmldocfromobject.

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

  TYPES: BEGIN OF ttabname,
          tabname TYPE dd02v-tabname,
         END OF ttabname.

  DATA xtabname     TYPE ttabname.
  DATA xdd02v       TYPE dd02v.

  DATA root_node    TYPE REF TO if_ixml_element.
  DATA datarow_node TYPE REF TO if_ixml_element.
  DATA rc           TYPE sysubrc.
  DATA _tablname    TYPE ddobjname.
  DATA _objtype     TYPE string.

  DATA dref_tab TYPE REF TO data.
  DATA dref_wa  TYPE REF TO data.

  FIELD-SYMBOLS: &lt;dyn_tab&gt; TYPE table.
  FIELD-SYMBOLS: &lt;dyn_wa&gt;  TYPE ANY.

* Check that table exits.
  _tablname = objname.

* Does the table exist?
  CALL FUNCTION &apos;DDIF_TABL_GET&apos;
    EXPORTING
      name          = _tablname
    IMPORTING
      dd02v_wa      = xdd02v
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc &lt;&gt; 0 OR xdd02v-tabname IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;error_message
                msg    = `Table not found`.
  ENDIF.

* Create parent node
  _objtype  = getobjecttype( ).
  root_node = xmldoc-&gt;create_element( _objtype ).
  xtabname-tabname = xdd02v-tabname.
  me-&gt;setattributesfromstructure( node = root_node structure = xtabname  ).

* Create dynamic internal table and work area
  CREATE DATA dref_tab TYPE TABLE OF (xdd02v-tabname).
  ASSIGN dref_tab-&gt;* TO &lt;dyn_tab&gt;.
  CREATE DATA dref_wa LIKE LINE OF &lt;dyn_tab&gt;.
  ASSIGN dref_wa-&gt;* TO &lt;dyn_wa&gt;.

* Select all data
  SELECT * INTO TABLE &lt;dyn_tab&gt; FROM (xdd02v-tabname).

* Write records to XML node
  LOOP AT &lt;dyn_tab&gt; ASSIGNING &lt;dyn_wa&gt;.
    datarow_node = xmldoc-&gt;create_element( `DataRow` ).
    me-&gt;setattributesfromstructure( node = datarow_node structure = &lt;dyn_wa&gt; ).
    rc = root_node-&gt;append_child( datarow_node ).
  ENDLOOP.

* Add node
  rc = xmldoc-&gt;append_child( root_node ).
  ixmldocument = xmldoc.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createobjectfromixmldoc.

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

  TYPES: BEGIN OF ttabname,
          tabname TYPE dd02v-tabname,
         END OF ttabname.

  DATA xtabname    TYPE ttabname.
  DATA xdd02v      TYPE dd02v.
  DATA xtadir      TYPE tadir.

  DATA idd03p TYPE TABLE OF dd03p.
  DATA xdd03p LIKE LINE OF idd03p.

  DATA root_node        TYPE REF TO if_ixml_element.
  DATA datarow_node     TYPE REF TO if_ixml_element.
  DATA datarow_filter   TYPE REF TO if_ixml_node_filter.
  DATA datarow_iterator TYPE REF TO if_ixml_node_iterator.

  DATA _objtype           TYPE string.
  DATA l_answer           TYPE string.
  DATA l_nameclass        TYPE c.
  DATA l_client_dependent TYPE abap_bool.

  DATA dref_tab TYPE REF TO data.
  DATA dref_wa  TYPE REF TO data.

  FIELD-SYMBOLS: &lt;dyn_tab&gt;  TYPE table.
  FIELD-SYMBOLS: &lt;dyn_wa&gt;   TYPE ANY.
  FIELD-SYMBOLS: &lt;fs_mandt&gt; TYPE ANY.

  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  root_node = xmldoc-&gt;find_from_name( _objtype ).

* Get table name from XML.
  me-&gt;getstructurefromattributes(
          EXPORTING  node      = root_node
          CHANGING   structure = xtabname ).

  objname = xtabname-tabname.

* Check that table exists
  CALL FUNCTION &apos;DDIF_TABL_GET&apos;
    EXPORTING
      name          = xtabname-tabname
    IMPORTING
      dd02v_wa      = xdd02v
    TABLES
      dd03p_tab     = idd03p
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc &lt;&gt; 0 OR xdd02v-tabname IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;error_message
                msg    = `Table not found`.
  ENDIF.

* Check for MANDT field, if found, then set client dependent
  READ TABLE idd03p INTO xdd03p WITH KEY fieldname = &apos;MANDT&apos;.
  IF sy-subrc = 0.
    l_client_dependent = abap_true.
  ENDIF.

* Only allow tables in customer namespace
  CLEAR xtadir.
  SELECT SINGLE * FROM tadir INTO xtadir
              WHERE pgmid    = &apos;R3TR&apos;
                AND object   = &apos;TABL&apos;
                AND obj_name = xdd02v-tabname.
  CALL FUNCTION &apos;TRINT_OBJECT_NAMESPACE_INFO&apos;
    EXPORTING
      iv_pgmid               = xtadir-pgmid
      iv_object              = xtadir-object
      iv_objname             = xtadir-obj_name
    IMPORTING
      ev_nameclass           = l_nameclass
    EXCEPTIONS
      namespace_not_existing = 1
      namespace_use_rejected = 2
      invalid_object         = 3
      OTHERS                 = 4.
  IF l_nameclass &lt;&gt; `C`.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;error_message
                msg    = &apos;Table is not within customer namespace&apos;.
  ENDIF.

* Create dynamic internal table and work area
  CREATE DATA dref_tab TYPE TABLE OF (xdd02v-tabname).
  ASSIGN dref_tab-&gt;* TO &lt;dyn_tab&gt;.
  CREATE DATA dref_wa LIKE LINE OF &lt;dyn_tab&gt;.
  ASSIGN dref_wa-&gt;* TO &lt;dyn_wa&gt;.

* Build dynamic internal table from XML
  FREE: datarow_filter, datarow_iterator, datarow_node.
  datarow_filter = xmldoc-&gt;create_filter_name( `DataRow` ).
  datarow_iterator = xmldoc-&gt;create_iterator_filtered( datarow_filter ).
  datarow_node ?= datarow_iterator-&gt;get_next( ).
  WHILE datarow_node IS NOT INITIAL.
    APPEND INITIAL LINE TO &lt;dyn_tab&gt; ASSIGNING &lt;dyn_wa&gt;.
    me-&gt;getstructurefromattributes(
            EXPORTING   node      = datarow_node
            CHANGING    structure = &lt;dyn_wa&gt; ).
    datarow_node ?= datarow_iterator-&gt;get_next( ).
  ENDWHILE.

* Any records imported from XML, if not, give error.
  IF LINES( &lt;dyn_tab&gt; ) = 0.
    RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;error_message
                  msg    = `No data records present in XML document`.
  ENDIF.

* Change MANDT field to current client number
* Always add imported records to current client number
  IF l_client_dependent = abap_true.
    LOOP AT &lt;dyn_tab&gt; ASSIGNING &lt;dyn_wa&gt;.
      ASSIGN COMPONENT `MANDT` OF STRUCTURE &lt;dyn_wa&gt; TO &lt;fs_mandt&gt;.
      &lt;fs_mandt&gt; = sy-mandt.
    ENDLOOP.
  ENDIF.

* Check that db table is initial, if so, then insert data and exit
  DATA: l_count TYPE i.
  CASE l_client_dependent .
    WHEN abap_true.
      SELECT COUNT( * )  INTO l_count
             FROM (xdd02v-tabname) CLIENT SPECIFIED
                     WHERE mandt = sy-mandt.
    WHEN abap_false.
      SELECT COUNT( * )  INTO l_count
             FROM (xdd02v-tabname).
  ENDCASE.
  IF l_count = 0.
    INSERT (xdd02v-tabname) FROM TABLE &lt;dyn_tab&gt;.
    name = objname.
    RETURN.
  ENDIF.

* Still here, then ask user how he wants to handle the existing
* data, either modify it, of delete/insert
  DATA: text_question TYPE string.

  text_question = `Table contains data which may be modified, ` &amp;
                  `would you like to modify existing records, ` &amp;
                  `or delete existing data first and insert`.

  CALL FUNCTION &apos;POPUP_TO_CONFIRM&apos;
    EXPORTING
      text_question  = text_question
      text_button_1  = &apos;Modify Data&apos;      &quot; UPdate table via MODIFY
      icon_button_1  = &apos;ICON_CHANGE&apos;
      text_button_2  = &apos;Del/Ins Data&apos;     &quot; Delete data first, then INSERT
      icon_button_2  = &apos;ICON_DELETE&apos;
    IMPORTING
      answer         = l_answer
    EXCEPTIONS
      text_not_found = 1
      OTHERS         = 2.
* Check answer
  CASE l_answer .
    WHEN  &apos;1&apos;.   &quot;Modify existing rows, insert new rows based on key
      MODIFY (xdd02v-tabname) FROM TABLE &lt;dyn_tab&gt;.
    WHEN  &apos;2&apos;.   &quot;Delete existing data first, then insert new data
      CASE l_client_dependent .
        WHEN abap_true.
          DELETE FROM (xdd02v-tabname) WHERE mandt = sy-mandt.
        WHEN abap_false.
          DELETE FROM (xdd02v-tabname).
      ENDCASE.
      INSERT (xdd02v-tabname) FROM TABLE &lt;dyn_tab&gt;.
    WHEN  &apos;A&apos;.   &quot;Action has been cancelled
      RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;error_message
                msg    = `Action Cancelled`.
  ENDCASE.

  name = objname.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method DELETEOBJECT.

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

* No implementation

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE.

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

  objecttype = &apos;TABU&apos;.  &quot;Table Contents

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_MIME" VERSION="1" LANGU="D" DESCRIPT="SapLink Class Installer" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <types CLSNAME="ZSAPLINK_MIME" CMPNAME="GT_MIME" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="6 " SRCCOLUMN1="4 " SRCROW2="15 " SRCCOLUMN2="22 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF gt_mime,
          path TYPE string,
          id TYPE sdok_docid,
          class TYPE sdok_class,
          name TYPE string,
          description TYPE string,
          type TYPE w3conttype,
          size TYPE i,
          language TYPE spras,
         END OF gt_mime
"/>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZSAPLINK_MIME" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_MIME" TYPEGROUP="SEOP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_MIME" TYPEGROUP="SEOR" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_MIME" TYPEGROUP="SEOS" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_MIME" TYPEGROUP="SEOT" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_MIME" TYPEGROUP="SEOX" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <forwardDeclaration>SEOP</forwardDeclaration>
  <forwardDeclaration>SEOR</forwardDeclaration>
  <forwardDeclaration>SEOS</forwardDeclaration>
  <forwardDeclaration>SEOT</forwardDeclaration>
  <forwardDeclaration>SEOX</forwardDeclaration>
  <attribute CLSNAME="ZSAPLINK_MIME" CMPNAME="GC_DOC_CLASS_FOLDER_LOG" VERSION="1" LANGU="D" DESCRIPT="Folder document class" EXPOSURE="0" STATE="1" EDITORDER="8 " ATTDECLTYP="0" ATTVALUE="&apos;M_FOLDER&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_MIME" CMPNAME="GC_DOC_CLASS_IMAGE_LOG" VERSION="1" LANGU="D" DESCRIPT="Document class" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;M_IMAGE_L&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SDOK_CLASS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_MIME" CMPNAME="GC_OBJECT_TYPE" VERSION="1" LANGU="D" DESCRIPT="MIME object type" EXPOSURE="0" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="&apos;SMIM&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_MIME" CMPNAME="GC_PROP_FOLDER_CLASS" VERSION="1" LANGU="D" DESCRIPT="Property folder class" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;KW_PARENT_FOLDER_CLASS&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_MIME" CMPNAME="GC_PROP_FOLDER_ID" VERSION="1" LANGU="D" DESCRIPT="Property folder id" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;KW_PARENT_FOLDER_ID&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_MIME" CMPNAME="GC_PROP_URL" VERSION="1" LANGU="D" DESCRIPT="Property relative url" EXPOSURE="0" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;KW_RELATIVE_URL&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_MIME" CMPNAME="GR_MIME_REPOSITORY" VERSION="1" LANGU="D" DESCRIPT="API for MIME Repository" EXPOSURE="0" STATE="1" EDITORDER="7 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="IF_MR_API" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_MIME" CMPNAME="GV_MIME_PATH" VERSION="1" LANGU="D" DESCRIPT="MIME path" EXPOSURE="0" STATE="1" EDITORDER="6 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_MIME" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_MIME" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_MIME" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_MIME" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_MIME" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_MIME" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD checkexists.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  &quot;
  &quot; References
  DATA lr_mime_repository TYPE REF TO if_mr_api.
  &quot;
  &quot;  Variables
  DATA lv_path TYPE string.

  CLEAR exists.

  &quot; Create MIME repository instance
  lr_mime_repository = cl_mime_repository_api=&gt;get_api( ).

  lr_mime_repository-&gt;get( EXPORTING
                             i_url = objname
                           EXCEPTIONS
                             parameter_missing = 1
                             error_occured = 2
                             not_found = 3
                             permission_failure = 4 ).

  IF sy-subrc = 0.
    &quot; MIME exists
    exists = abap_true.
  ELSE.
    &quot; MIME does not exist
    exists = abap_false.
  ENDIF.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createixmldocfromobject.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  &quot;
  &quot; References
  DATA lr_mime_node TYPE REF TO if_ixml_element.
  &quot;
  &quot;
  DATA lv_return_code TYPE sysubrc.
  &quot;
  &quot; MIME to XML
  lr_mime_node = me-&gt;mime_to_xml( ).

  &quot; Append MIME node to xmldoc
  lv_return_code = xmldoc-&gt;append_child( lr_mime_node ).

  &quot; Return xml
  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createobjectfromixmldoc.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  xml_to_mime( iv_xml = ixmldocument
               iv_overwrite = overwrite ).

  name = objname.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD deleteobject.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  &quot;
  &quot; References
  DATA lr_mime_repository TYPE REF TO if_mr_api.
  &quot;
  &quot; Variables
  DATA lv_textid TYPE sotr_conc.

  &quot; Create instance of MIME repository
  lr_mime_repository = cl_mime_repository_api=&gt;get_api( ).

  &quot; Delete MIME object
  lr_mime_repository-&gt;delete( EXPORTING
                                i_url = objname
                                i_delete_children = &apos;X&apos;
                              EXCEPTIONS
                                parameter_missing = 1
                                error_occured = 2
                                cancelled = 3
                                permission_failure = 4
                                not_found = 5 ).

  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 4.
        lv_textid = zcx_saplink=&gt;not_authorized.
      WHEN 5.
        lv_textid = zcx_saplink=&gt;not_found.
    ENDCASE.

    RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = lv_textid.
  ENDIF.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD getobjecttype.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  &quot;
  &quot;Return MIME object type SMIM
  objecttype = me-&gt;gc_object_type.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_MIME" CMPNAME="GET_MIME_CLASS" VERSION="1" LANGU="D" DESCRIPT="Get document class of LOIO (objname)" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_MIME" CMPNAME="GET_MIME_CLASS" SCONAME="IV_OBJID" VERSION="1" LANGU="D" DESCRIPT="ID for documents and relations" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SDOK_DOCID"/>
   <parameter CLSNAME="ZSAPLINK_MIME" CMPNAME="GET_MIME_CLASS" SCONAME="RV_CLASS" VERSION="1" LANGU="D" DESCRIPT="Document class" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SDOK_CLASS"/>
   <source>METHOD get_mime_class.
  CLEAR rv_class.
  &quot;
  &quot; Get mime class
  SELECT SINGLE lo_class
    INTO rv_class
    FROM smimloio
    WHERE loio_id = iv_objid.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_MIME" CMPNAME="GET_MIME_DESCRIPTION" VERSION="1" LANGU="D" DESCRIPT="Get description of LOIO (objname)" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_MIME" CMPNAME="GET_MIME_DESCRIPTION" SCONAME="IV_CLASS" VERSION="1" LANGU="D" DESCRIPT="Document class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SDOK_CLASS"/>
   <parameter CLSNAME="ZSAPLINK_MIME" CMPNAME="GET_MIME_DESCRIPTION" SCONAME="IV_OBJID" VERSION="1" LANGU="D" DESCRIPT="ID for documents and relations" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SDOK_DOCID"/>
   <parameter CLSNAME="ZSAPLINK_MIME" CMPNAME="GET_MIME_DESCRIPTION" SCONAME="RV_DESCRIPTION" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>METHOD get_mime_description.
  &quot;
  &quot; Tables
  DATA lt_object_list TYPE TABLE OF sdokobject.
  DATA lt_descriptions TYPE TABLE OF sdokdesc.
  &quot;
  &quot; Structures
  DATA ls_object_list TYPE sdokobject.
  DATA ls_description TYPE sdokdesc.
  &quot;
  &quot; Variables
  DATA lv_description TYPE string.

  CLEAR rv_description.

  ls_object_list-class = iv_class.
  ls_object_list-objid = iv_objid.

  CALL FUNCTION &apos;SDOK_LOIO_DESCRIPTIONS_GET&apos;
    EXPORTING
      object_id    = ls_object_list
    TABLES
      descriptions = lt_descriptions
    exceptions
    NOT_EXISTING  Object Does Not Exist
NOT_AUTHORIZED  No Authorization  .
  &quot;
  &quot; Description
  READ TABLE lt_descriptions INTO ls_description WITH KEY langu = sy-langu.

  IF sy-subrc = 0.
    lv_description = ls_description-descript.
  ENDIF.

  rv_description = lv_description.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_MIME" CMPNAME="GET_MIME_PATH" VERSION="1" LANGU="D" DESCRIPT="Get path from LOIO (objname)" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_MIME" CMPNAME="GET_MIME_PATH" SCONAME="IV_CLASS" VERSION="1" LANGU="D" DESCRIPT="Document class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SDOK_CLASS"/>
   <parameter CLSNAME="ZSAPLINK_MIME" CMPNAME="GET_MIME_PATH" SCONAME="IV_OBJID" VERSION="1" LANGU="D" DESCRIPT="ID for documents and relations" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SDOK_DOCID"/>
   <parameter CLSNAME="ZSAPLINK_MIME" CMPNAME="GET_MIME_PATH" SCONAME="RV_PATH" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <exception CLSNAME="ZSAPLINK_MIME" CMPNAME="GET_MIME_PATH" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD GET_MIME_PATH.
  &quot;
  &quot; Tables
  DATA lt_object_list TYPE TABLE OF sdokobject.
  DATA lt_properties TYPE TABLE OF sdokproptl.
  &quot;
  &quot; Structures
  DATA ls_object_list TYPE sdokobject.
  DATA ls_properties TYPE sdokproptl.
  &quot;
  &quot; Variables
  DATA lv_path TYPE string.

  CLEAR rv_path.

  ls_object_list-class = iv_class.
  ls_object_list-objid = iv_objid.
  APPEND ls_object_list TO lt_object_list.

  WHILE lt_object_list IS NOT INITIAL.

    CALL FUNCTION &apos;SDOK_LOIOS_PROPERTIES_GET&apos;
      TABLES
        object_list        = lt_object_list
        properties         = lt_properties.


    CLEAR ls_object_list.
    REFRESH lt_object_list.
    &quot;
    &quot; KW_RELATIVE_URL
    READ TABLE lt_properties INTO ls_properties WITH KEY name = me-&gt;gc_prop_url.

    IF sy-subrc = 0.
      &quot; Build path
      CONCATENATE &apos;/&apos;
                  ls_properties-value
                  lv_path
             INTO lv_path.
    ENDIF.

    &quot;
    &quot;KW_PARENT_FOLDER_CLASS
    READ TABLE lt_properties INTO ls_properties WITH KEY name = me-&gt;gc_prop_folder_class.
    ls_object_list-class = ls_properties-value.

    &quot; KW_PARENT_FOLDER_ID
    READ TABLE lt_properties INTO ls_properties WITH KEY name = me-&gt;gc_prop_folder_id.
    ls_object_list-objid = ls_properties-value.

    IF ls_object_list-class IS NOT INITIAL AND
       ls_object_list-objid IS NOT INITIAL.
      APPEND ls_object_list TO lt_object_list.
    ENDIF.
  ENDWHILE.

  if lv_path is initial.
    &quot;Not found
    RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_found.
  endif.

  rv_path = lv_path.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_MIME" CMPNAME="MIME_TO_XML" VERSION="1" LANGU="D" DESCRIPT="Convert MIME to XML" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_MIME" CMPNAME="MIME_TO_XML" SCONAME="RR_MIME_NODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>METHOD mime_to_xml.
  &quot;
  &quot; References
  DATA lr_mime_node TYPE REF TO if_ixml_element.
  DATA lr_mime_repository TYPE REF TO if_mr_api.
  DATA lr_zip TYPE REF TO cl_abap_zip.
  &quot;
  &quot; Structures
  DATA ls_mime TYPE gt_mime.
  DATA ls_loio TYPE skwf_io.
  &quot;
  &quot; Variables
  DATA lv_object_type TYPE string.
  DATA lv_return_code TYPE sysubrc.
  DATA lv_mime_xstring TYPE xstring.
  DATA lv_zip_xstring TYPE xstring.
  DATA lv_string TYPE string.
  DATA lv_loio TYPE sdok_docid.
  DATA lv_class TYPE sdok_class.

  CLEAR rr_mime_node.

  try.
      &quot; Object type = SMIM
      lv_object_type = getobjecttype( ).

      &quot; Node SMIM
      lr_mime_node = xmldoc-&gt;create_element( lv_object_type ).

      &quot; Get logical id of info object
      lv_loio = objname.

      &quot; MIME class
      lv_class = me-&gt;get_mime_class( iv_objid = lv_loio ).

      &quot; Build path
      ls_mime-path = me-&gt;get_mime_path( iv_class = lv_class
                               iv_objid = lv_loio ).

      &quot; Get description
      ls_mime-description = me-&gt;get_mime_description( iv_class = lv_class
                                                iv_objid = lv_loio ).

      &quot; MIME repository reference
      lr_mime_repository = cl_mime_repository_api=&gt;get_api( ).

      &quot; Get properties from MIME
      CALL METHOD lr_mime_repository-&gt;properties
        EXPORTING
          i_url              = ls_mime-path
        IMPORTING
          e_name             = ls_mime-name
          e_size             = ls_mime-size
          e_loio             = ls_loio
        EXCEPTIONS
          parameter_missing  = 1
          error_occured      = 2
          not_found          = 3
          permission_failure = 4.

      ls_mime-id = ls_loio-objid.
      ls_mime-class = ls_loio-class.

      &quot; Get file from MIME
      CALL METHOD lr_mime_repository-&gt;get
        EXPORTING
          i_url              = ls_mime-path
        IMPORTING
          e_content          = lv_mime_xstring
          e_mime_type        = ls_mime-type
        CHANGING
          c_language         = ls_mime-language
        EXCEPTIONS
          parameter_missing  = 1
          error_occured      = 2
          not_found          = 3
          permission_failure = 4.

      &quot; Create zip file from MIME file
      CREATE OBJECT lr_zip.

      &quot; Add MIME to zip
      lr_zip-&gt;add(
       EXPORTING name = ls_mime-name
              content = lv_mime_xstring ).

      &quot;
      lr_zip-&gt;save( RECEIVING zip = lv_zip_xstring ).

      &quot; Encode xstring BASE64
      CALL FUNCTION &apos;SCMS_BASE64_ENCODE_STR&apos;
        EXPORTING
          input  = lv_zip_xstring
        IMPORTING
          output = lv_string.

      IF sy-subrc = 0.
        &quot; Set node attributes from structure
        setattributesfromstructure( node = lr_mime_node
                                    structure = ls_mime
                                    ).

        &quot; Add BASE64 string to xml value
        lv_return_code = lr_mime_node-&gt;if_ixml_node~set_value( lv_string ).

        &quot; Return xml node
        rr_mime_node = lr_mime_node.
      ENDIF.
    CATCH zcx_saplink.
    CATCH cx_root.
  ENDTRY.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_MIME" CMPNAME="XML_TO_MIME" VERSION="1" LANGU="D" DESCRIPT="Convert XML to MIME" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_MIME" CMPNAME="XML_TO_MIME" SCONAME="IV_XML" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <parameter CLSNAME="ZSAPLINK_MIME" CMPNAME="XML_TO_MIME" SCONAME="IV_DEV_PACKAGE" VERSION="1" LANGU="D" DESCRIPT="Development class/package" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS" PARVALUE="&apos;$TMP&apos;" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_MIME" CMPNAME="XML_TO_MIME" SCONAME="IV_OVERWRITE" VERSION="1" LANGU="D" DESCRIPT="Overwrite original objects" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG"/>
   <exception CLSNAME="ZSAPLINK_MIME" CMPNAME="XML_TO_MIME" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD xml_to_mime.
  &quot;
  &quot; References
  DATA lr_rootnode TYPE REF TO if_ixml_element.
  DATA lr_filter TYPE REF TO if_ixml_node_filter.
  DATA lr_iterator TYPE REF TO if_ixml_node_iterator.
  DATA lr_node TYPE REF TO if_ixml_element.
  DATA lr_mime_repository TYPE REF TO if_mr_api.
  DATA lr_zip TYPE REF TO cl_abap_zip.
  &quot;
  &quot; Structures
  DATA ls_mime TYPE gt_mime.
  &quot;
  &quot; Variables
  DATA lv_string TYPE string.
  DATA lv_zip_xstring TYPE xstring.
  DATA lv_mime_xstring TYPE xstring.
  DATA lv_is_existing TYPE flag.
  DATA lv_is_folder TYPE flag.

  xmldoc = iv_xml.

  lr_filter = xmldoc-&gt;create_filter_name( me-&gt;gc_object_type ).
  lr_iterator = xmldoc-&gt;create_iterator_filtered( lr_filter ).
  lr_node ?= lr_iterator-&gt;get_next( ).

  WHILE lr_node IS NOT INITIAL.
    getstructurefromattributes( EXPORTING
                                  node = lr_node
                                CHANGING
                                  structure = ls_mime ).

    lv_is_existing = checkexists( ).

    IF lv_is_existing IS NOT INITIAL.
      IF iv_overwrite IS INITIAL.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;existing.
      ELSE.
        &quot; Delete object for new install
        deleteobject( ).
      ENDIF.
    ENDIF.

    TRY.
        &quot; MIME repository API instance
        lr_mime_repository = cl_mime_repository_api=&gt;get_api( ).

        IF ls_mime-class = me-&gt;gc_doc_class_folder_log.
          &quot;
          &quot; Create folder
          lr_mime_repository-&gt;create_folder(
            i_url = ls_mime-path
            i_description = ls_mime-description
            i_language = ls_mime-language
            i_dev_package = iv_dev_package
          ).
        ELSE.
          lv_string = lr_node-&gt;get_value( ).

          CALL FUNCTION &apos;SCMS_BASE64_DECODE_STR&apos;
            EXPORTING
              input  = lv_string
            IMPORTING
              output = lv_zip_xstring.

          &quot;
          &quot; Unzip
          CREATE OBJECT lr_zip.

          &quot;
          lr_zip-&gt;load( zip = lv_zip_xstring ).

          &quot; Get MIME from Zip
          lr_zip-&gt;get( EXPORTING
                         name = ls_mime-name
                       IMPORTING
                         content = lv_mime_xstring
                                  ).
          &quot;
          &quot; Create MIME
          lr_mime_repository-&gt;put(
            EXPORTING
              i_url = ls_mime-path
              i_content = lv_mime_xstring
              i_description = ls_mime-description
              i_language = ls_mime-language
              i_dev_package = iv_dev_package
            EXCEPTIONS
              parameter_missing         = 1
              error_occured             = 2
              cancelled                 = 3
              permission_failure        = 4
              data_inconsistency        = 5
              new_loio_already_exists   = 6
              is_folder                 = 7
              OTHERS                    = 8
          ).
        ENDIF.
      CATCH zcx_saplink.
        RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING textid = zcx_saplink=&gt;cx_root.
      CATCH cx_root.
        RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING textid = zcx_saplink=&gt;cx_root.
    ENDTRY.

    lr_node ?= lr_iterator-&gt;get_next( ).
  ENDWHILE.
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_SMARTFORM" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Programs" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_SMARTFORM" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_SMARTFORM" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SMARTFORM" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SMARTFORM" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SMARTFORM" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_SMARTFORM" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD checkexists .

  SELECT SINGLE formname FROM stxfadm INTO objname WHERE formname = objname.
  IF sy-subrc = 0.
    exists = &apos;X&apos;.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createixmldocfromobject .
  DATA rootnode     TYPE REF TO if_ixml_element.
  DATA sourcenode   TYPE REF TO if_ixml_element.
  DATA rc           TYPE sysubrc.
  DATA sourcestring TYPE string.
  DATA _objtype     TYPE string.

  DATA: l_filename          TYPE string,
        l_file_filter       TYPE string,
        l_user_action       TYPE i.
  DATA: wa_node             type ssfgnode,
        l_element           TYPE REF TO if_ixml_element.
  DATA: l_language_str      TYPE string,
        l_language(2)       TYPE c.
  DATA: l_lines             TYPE i,
        l_splitted_name_tab TYPE TABLE OF string.
  DATA: l_stylename         TYPE tdssname,
        l_stylevari         TYPE tdvariant,
        l_save_style        TYPE tdssname.

  TYPES: t_raw(250) TYPE x.

  CONSTANTS: c_xml_ns_uri_sf(255)  TYPE c
      VALUE &apos;urn:sap-com:SmartForms:2000:internal-structure&apos;,&quot;#EC NOTEXT
             c_xml_ns_uri_ifr(255) TYPE c
      VALUE &apos;urn:sap-com:sdixml-ifr:2000&apos;.                  &quot;#EC NOTEXT

  DATA: g_ixml               TYPE REF TO if_ixml,
        xml_macro_rc         TYPE i,
        xml_document         TYPE REF TO if_ixml_document,
        xml_ns_prefix_sf     TYPE string,
        xml_ns_uri_sf        TYPE string,
        xml_ns_uri_ifr       TYPE string,
        xml_document_size    TYPE i,
        xml_xtable           TYPE TABLE OF t_raw,
        xml_xtable2           TYPE TABLE OF string,
        sform_name           TYPE tdsfname.

  DATA ref_ssf TYPE REF TO cl_ssf_fb_smart_form.

  sform_name = objname.

  IF g_ixml IS INITIAL.
    g_ixml          = cl_ixml=&gt;create( ).
  ENDIF.
  xml_document      = g_ixml-&gt;create_document( ).
  xml_ns_prefix_sf  = &apos;sf&apos;.
  xml_ns_uri_sf     = c_xml_ns_uri_sf.
  xml_ns_uri_ifr    = c_xml_ns_uri_ifr.
  CLEAR: xml_document_size, xml_xtable[], xml_xtable2[].

  CREATE OBJECT ref_ssf.

  TRY.
      CALL METHOD ref_ssf-&gt;load
        EXPORTING
          im_formname = sform_name.

      ref_ssf-&gt;xml_init( ).

      CALL METHOD ref_ssf-&gt;xml_download
        EXPORTING
          parent   = xml_document
        CHANGING
          document = xml_document.

* namespace
      l_element  = xml_document-&gt;get_root_element( ).
      l_element-&gt;set_attribute( name      = xml_ns_prefix_sf
                                namespace = &apos;xmlns&apos;
                                value     = xml_ns_uri_sf ).
      l_element-&gt;set_attribute( name  = &apos;xmlns&apos;
                                value = xml_ns_uri_ifr ).


* language
      WRITE sy-langu TO l_language.
      l_language_str = l_language.
      xml_macro_rc = l_element-&gt;set_attribute(
                          name      = &apos;language&apos;
                          namespace = xml_ns_prefix_sf
                          value     = l_language_str ).

* convert DOM to xml
      CALL FUNCTION &apos;SDIXML_DOM_TO_XML&apos;
        EXPORTING
          document     = xml_document
        IMPORTING
          size         = xml_document_size
        TABLES
          xml_as_table = xml_xtable
        EXCEPTIONS
          OTHERS       = 1.
      CHECK sy-subrc EQ 0.

      _objtype = getobjecttype( ).
      rootnode = xmldoc-&gt;create_element( _objtype ).

      DATA: wa_stxfadm TYPE stxfadm.

      SELECT SINGLE * FROM stxfadm INTO wa_stxfadm WHERE formname = objname.

      setattributesfromstructure( node = rootnode structure =  wa_stxfadm
      ).
      sourcenode = xmldoc-&gt;create_element( &apos;smartform&apos; ).

      xml_xtable2 = xml_xtable[].

      sourcestring = buildsourcestring( sourcetable = xml_xtable2[] ).

      rc = sourcenode-&gt;if_ixml_node~set_value( sourcestring ).
      rc = rootnode-&gt;append_child( sourcenode ).
      rc = xmldoc-&gt;append_child( rootnode ).
      ixmldocument = xmldoc.

      FREE: xml_document, xml_xtable[], xml_document_size.


    CATCH cx_ssf_fb .
      CLEAR ixmldocument.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDTRY.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

METHOD createobjectfromixmldoc .
  TYPES: t_raw(250)     TYPE x.

  DATA rootnode         TYPE REF TO if_ixml_element.
  DATA progattribs      TYPE trdir.
  DATA sourcenode       TYPE REF TO if_ixml_element.
  DATA l_xml_node       TYPE REF TO if_ixml_element.
  DATA source           TYPE string.
  DATA sourcetable      TYPE table_of_strings.
  DATA _objtype         TYPE string.
  DATA checkexists      TYPE flag.

  DATA: wa_stxfadm      TYPE stxfadm,
        formname        TYPE tdsfname,
        master_language TYPE sylangu,
        lv_devclass     TYPE devclass,
        korrnum         TYPE trkorr,
        modif_language  TYPE sylangu.

  DATA: g_ixml               TYPE REF TO if_ixml,
        xml_macro_rc         TYPE i,
        xml_document         TYPE REF TO if_ixml_document,
        l_element            TYPE REF TO if_ixml_element,
        xml_ns_prefix_sf     TYPE string,
        xml_ns_uri_sf        TYPE string,
        xml_ns_uri_ifr       TYPE string,
        xml_document_size    TYPE i,
        xml_xtable           TYPE TABLE OF t_raw,
        l_ns_uri             TYPE string,
        l_name               TYPE string,
        l_language           TYPE string,
        p_dequeue            TYPE tdbool,
        l_cancel             TYPE tdsfflag,
        sf_exception         TYPE REF TO cx_ssf_fb.

  DATA: ref_ssf TYPE REF TO cl_ssf_fb_smart_form,
        l_upload_smartform TYPE REF TO cl_ssf_fb_smart_form.


  _objtype = getobjecttype( ).
  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = wa_stxfadm.
  objname = wa_stxfadm-formname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  sourcenode = rootnode-&gt;find_from_name( &apos;smartform&apos; ).
  source = sourcenode-&gt;get_value( ).
  sourcetable = buildtablefromstring( source ).

  xml_xtable = sourcetable.
  xml_document_size = STRLEN( source ).

  CREATE OBJECT ref_ssf.

  formname = objname.

* Check access permission and enqueue smart form
  master_language = sy-langu.
  TRY.
      CALL METHOD ref_ssf-&gt;enqueue
        EXPORTING
          suppress_corr_check   = space
          language_upd_exit     = &apos; &apos;
          master_language       = master_language
          mode                  = &apos;INSERT&apos;
          formname              = formname
        IMPORTING
          devclass              = lv_devclass
          new_master_language   = master_language
          korrnum               = korrnum
          modification_language = modif_language.
    CATCH cx_ssf_fb INTO sf_exception.
      CASE sf_exception-&gt;textid.
        WHEN cx_ssf_fb=&gt;enqueued_by_user OR cx_ssf_fb=&gt;enqueue_system_failure.
          RAISE EXCEPTION TYPE zcx_saplink
               EXPORTING msg = &apos;Enqueued by user&apos;.
        WHEN cx_ssf_fb=&gt;no_modify_permission OR cx_ssf_fb=&gt;no_show_permission.
          RAISE EXCEPTION TYPE zcx_saplink
               EXPORTING msg = &apos;Permission Error&apos;.
        WHEN cx_ssf_fb=&gt;permission_failure.
          EXIT.
        WHEN cx_ssf_fb=&gt;request_language_denied.
          RAISE EXCEPTION TYPE zcx_saplink
               EXPORTING msg = &apos;Language request denied&apos;.
        WHEN OTHERS.
          EXIT.
      ENDCASE.
  ENDTRY.

  CALL FUNCTION &apos;SDIXML_XML_TO_DOM&apos;
    EXPORTING
      xml      = xml_xtable[]
      size     = xml_document_size
    IMPORTING
      document = xml_document
    EXCEPTIONS
      OTHERS   = 1.

  l_xml_node  = xml_document-&gt;get_root_element( ).
  l_ns_uri    = l_xml_node-&gt;get_namespace_uri( ).
  l_name      = l_xml_node-&gt;get_name( ).
  l_element  ?= l_xml_node-&gt;query_interface( ixml_iid_element ).
  l_language  = l_element-&gt;get_attribute( name = &apos;language&apos;
                                          namespace = xml_ns_prefix_sf ).

  CREATE OBJECT l_upload_smartform.
  CALL METHOD l_upload_smartform-&gt;xml_upload
    EXPORTING
      dom      = l_xml_node
      formname = formname
      language = master_language
    CHANGING
      sform    = ref_ssf.
  ref_ssf = l_upload_smartform.

  PERFORM save_form IN PROGRAM saplstxb
              USING
                 &apos; &apos; &apos;X&apos;
              CHANGING
                 ref_ssf
                 l_cancel.

  FREE: xml_document.

* dequeue form
  ref_ssf-&gt;dequeue( formname = formname ).

* successful install
  name = objname.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD deleteobject .
    CALL FUNCTION &apos;FB_DELETE_FORM&apos;
     EXPORTING
       I_FORMNAME                  = OBJNAME
*       I_FORMTYPE                  = &apos; &apos;
*       I_WITH_DIALOG               = &apos;X&apos;
*       I_WITH_CONFIRM_DIALOG       = &apos;X&apos;
*     IMPORTING
*       O_FORMNAME                  =
     EXCEPTIONS
       NO_NAME                     = 1
       NO_FORM                     = 2
       FORM_LOCKED                 = 3
       NO_ACCESS_PERMISSION        = 4
       ILLEGAL_LANGUAGE            = 5
       ILLEGAL_FORMTYPE            = 6
       OTHERS                      = 7
              .
    IF sy-subrc &lt;&gt; 0.

    ENDIF.

  ENDMETHOD.                    &quot;createobjectfromixmldoc</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE .
  objectType = &apos;SSFO&apos;. &quot;SAP Smartforms
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_WD_APPLICATION" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Web Dynpro ABAP Application" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZSAPLINK_WD_APPLICATION" TYPEGROUP="WDYN" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_WD_APPLICATION" TYPEGROUP="WDYWB" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>WDYN</forwardDeclaration>
  <forwardDeclaration>WDYWB</forwardDeclaration>
  <inheritance CLSNAME="ZSAPLINK_WD_APPLICATION" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_WD_APPLICATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_APPLICATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_APPLICATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_APPLICATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_WD_APPLICATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/



  exists = abap_true.

  DATA: application_name TYPE wdy_application_name.
  data: application type wdy_application.
  application_name = objname.
  TRANSLATE application_name TO UPPER CASE.

  SELECT SINGLE * FROM wdy_application INTO application
    WHERE application_name = application_name.
  IF sy-subrc NE 0.
    CLEAR exists.
  ENDIF.


endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WD_APPLICATION" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="D" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WD_APPLICATION" CMPNAME="CONSTRUCTOR" SCONAME="NAME" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <source>METHOD constructor.

  CALL METHOD super-&gt;constructor
    EXPORTING
      name = name.

  nugget_level = 99. &quot; WD Application should load last

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA help_desc_node          TYPE REF TO if_ixml_element.
  DATA wdy_applicationt_node   TYPE REF TO if_ixml_element.
  DATA wdy_app_prop_node       TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.

  DATA: application TYPE REF TO if_wdy_md_application.
  TRY.
      application = me-&gt;get_application( ).
    CATCH cx_wdy_md_not_existing.
      RAISE EXCEPTION TYPE zcx_saplink EXPORTING textid = zcx_saplink=&gt;not_found.
      RETURN.
    CATCH cx_wdy_md_permission_failure.
      RAISE EXCEPTION TYPE zcx_saplink EXPORTING textid = zcx_saplink=&gt;not_found.
      RETURN.
  ENDTRY.

  DATA definition TYPE wdy_application.

  application-&gt;if_wdy_md_object~get_definition(
     IMPORTING
       definition = definition ).

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = definition ).

  DATA help_desc TYPE wdy_md_translatable_text.
  help_desc = application-&gt;get_help_description( ).
  rc = rootnode-&gt;set_attribute( name = &apos;help_desc_txt&apos; value = help_desc ).


* copy wdy_applicationt
  DATA wdy_applicationt_table TYPE STANDARD TABLE OF wdy_applicationt.
  FIELD-SYMBOLS: &lt;wdy_applicationt&gt; TYPE wdy_applicationt.
  SELECT * FROM wdy_applicationt INTO TABLE wdy_applicationt_table
    WHERE application_name = definition-application_name.
  LOOP AT wdy_applicationt_table ASSIGNING &lt;wdy_applicationt&gt;.
    wdy_applicationt_node = xmldoc-&gt;create_element( &apos;wdy_applicationt&apos; ).
    setattributesfromstructure( node = wdy_applicationt_node structure = &lt;wdy_applicationt&gt; ).
    rc = rootnode-&gt;append_child( wdy_applicationt_node ).
  ENDLOOP.

* Application Properties
  DATA itab_wdy_app_property TYPE wdy_app_property_table.
  DATA prop TYPE REF TO if_wdy_md_application_property.
  FIELD-SYMBOLS: &lt;wdy_app_prop&gt; TYPE wdy_app_property.
  SELECT * FROM wdy_app_property INTO TABLE itab_wdy_app_property
      WHERE application_name = definition-application_name.
  LOOP AT itab_wdy_app_property ASSIGNING &lt;wdy_app_prop&gt;.
    wdy_app_prop_node = xmldoc-&gt;create_element( &apos;wdy_app_prop&apos; ).
    setattributesfromstructure( node = wdy_app_prop_node structure = &lt;wdy_app_prop&gt; ).
    rc = rootnode-&gt;append_child( wdy_app_prop_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
*
*
*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
*  DATA wdy_application TYPE wdy_application.
  DATA wdy_applicationt_node   TYPE REF TO if_ixml_element.
  DATA wdy_app_prop_node       TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.
  DATA definition  TYPE wdy_application.

  DATA: application TYPE REF TO if_wdy_md_application.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node            = rootnode
      preserveversion = abap_true
    CHANGING
      structure       = definition.

  objname = definition-application_name.
  DATA help_desc TYPE wdy_md_translatable_text.
  help_desc = rootnode-&gt;get_attribute( &apos;help_desc_txt&apos; ).

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  application =  cl_wdy_md_application=&gt;create(
  name = definition-application_name
  devclass = _devclass ).

* copy relevant parts of wdy_application
  DATA component TYPE REF TO if_wdy_md_component.
  CALL METHOD cl_wdy_md_component=&gt;get_object_by_key
    EXPORTING
      name      = definition-component
    RECEIVING
      component = component.
  application-&gt;set_component( component ).


  application-&gt;set_help_description( help_desc ).
  application-&gt;set_help_link( definition-help_link ).
  application-&gt;set_message_display_mode( definition-msg_disp_mode ).
  DATA startup_plug TYPE REF TO if_wdy_md_inbound_plug.
  DATA startup_view TYPE REF TO if_wdy_md_abstract_view.
  startup_view = cl_wdy_md_view=&gt;get_object_by_key(
      component_name = definition-component
      view_name      = definition-startup_view  ).
  startup_plug = startup_view-&gt;get_inbound_plug( definition-startup_plug ).
  application-&gt;set_startup_plug( startup_plug ).

  application-&gt;save_to_database( ).


  application-&gt;unlock( ).
  application-&gt;reload( ).

* copy wdy_applicationt
  DATA wdy_applicationt_table TYPE STANDARD TABLE OF wdy_applicationt.
  DATA wdy_applicationt TYPE wdy_applicationt.
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_applicationt&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_applicationt.
    APPEND wdy_applicationt TO wdy_applicationt_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_applicationt FROM TABLE wdy_applicationt_table.

* copy wdy_app_property
  DATA wdy_app_property_table TYPE STANDARD TABLE OF wdy_app_property.
  DATA wdy_app_property TYPE wdy_app_property.
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_app_prop&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_app_property.
    APPEND wdy_app_property TO wdy_app_property_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_app_property FROM TABLE wdy_app_property_table.

  cl_wdy_md_application=&gt;generate_sicf(
    EXPORTING
      p_applname            = definition-display_name
      p_devclass            = _devclass
    EXCEPTIONS
      invalid_name          = 1
      parent_not_existing   = 2
      enqueue_error         = 3
      node_already_existing = 4
      transport_error       = 5
      tadir_error           = 6
      package_not_found     = 7
      alternate_name_exist  = 8
      error_occured         = 9 ).
  IF sy-subrc &lt;&gt; 0.
  ENDIF.


  COMMIT WORK.
  name = objname.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  DATA: application TYPE REF TO if_wdy_md_application.
  TRY.
      DATA: application_name TYPE wdy_application_name.
      application_name = objname.
      TRANSLATE application_name TO UPPER CASE.
      application = me-&gt;get_application( ).
    CATCH cx_wdy_md_not_existing.
      RAISE EXCEPTION TYPE zcx_saplink EXPORTING textid = zcx_saplink=&gt;not_found.
      RETURN.
    CATCH cx_wdy_md_permission_failure.
      RAISE EXCEPTION TYPE zcx_saplink EXPORTING textid = zcx_saplink=&gt;not_found.
      RETURN.
  ENDTRY.

  application-&gt;if_wdy_md_lockable_object~lock( ).
  application-&gt;if_wdy_md_object~delete( ).
*  cl_wdy_md_application=&gt;delete_sicf( p_applname = application_name  ).
  application-&gt;if_wdy_md_lockable_object~save_to_database( ).
  application-&gt;if_wdy_md_lockable_object~unlock( ).
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


  objecttype = wdyn_r3tr_application.  &quot;Web Dynpro Application

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WD_APPLICATION" CMPNAME="GET_APPLICATION" VERSION="1" LANGU="D" DESCRIPT="Get Application Object" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WD_APPLICATION" CMPNAME="GET_APPLICATION" SCONAME="APPLICATION" VERSION="1" LANGU="D" DESCRIPT="Web Dynpro: Application" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_WDY_MD_APPLICATION"/>
   <exception CLSNAME="ZSAPLINK_WD_APPLICATION" CMPNAME="GET_APPLICATION" SCONAME="CX_WDY_MD_NOT_EXISTING" VERSION="1" LANGU="D" DESCRIPT="Web Dynpro : Objekt existiert nicht" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZSAPLINK_WD_APPLICATION" CMPNAME="GET_APPLICATION" SCONAME="CX_WDY_MD_PERMISSION_FAILURE" VERSION="1" LANGU="D" MTDTYPE="0" EDITORDER="2 "/>
   <source>method GET_APPLICATION.

  DATA: application_name TYPE wdy_application_name.
  application_name = objname.
  TRANSLATE application_name TO UPPER CASE.

  DATA: tr_objtype     TYPE trobjtype,
         inactive_vers  TYPE char1,
         working_item   TYPE char1,
         l_obj_key      TYPE e071-obj_name.
  DATA: version TYPE r3state.

  CALL FUNCTION &apos;RS_WORKING_AREA_INIT&apos;.

  tr_objtype = wdyn_r3tr_application.
  l_obj_key = application_name.
  TRANSLATE l_obj_key TO UPPER CASE.                      &quot;#EC SYNTCHAR
  CALL FUNCTION &apos;RS_OBJECT_IN_WORKING_AREA&apos;
    EXPORTING
      object                        = tr_objtype
      obj_name                      = l_obj_key
*     GLOBAL_CHECK                  = &apos; &apos;
      mode                          = &apos;S&apos; &quot;Display
    IMPORTING
      object_is_work_item           = working_item
      object_inactive_version       = inactive_vers.


  IF working_item IS INITIAL.
    version = wdywb_version_active.
  ELSE.
    version = wdywb_version_inactive.
  ENDIF.

  TRY.
      CALL METHOD cl_wdy_md_application=&gt;get_object_by_key
        EXPORTING
          name        = application_name
          version     = version
        RECEIVING
          application = application.
    CATCH cx_wdy_md_not_existing.
      IF version = wdywb_version_active.
        version     = wdywb_version_inactive.
      ELSE.
        version      = wdywb_version_active.
      ENDIF.
      TRY.
        CALL METHOD cl_wdy_md_application=&gt;get_object_by_key
          EXPORTING
            name        = application_name
            version     = version
          RECEIVING
            application = application.
      ENDTRY.
  ENDTRY.
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_WD_COMPONENT" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Web Dynpro ABAP Component" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZSAPLINK_WD_COMPONENT" TYPEGROUP="WDYN" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_WD_COMPONENT" TYPEGROUP="WDYWB" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>WDYN</forwardDeclaration>
  <forwardDeclaration>WDYWB</forwardDeclaration>
  <inheritance CLSNAME="ZSAPLINK_WD_COMPONENT" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_WD_COMPONENT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_COMPONENT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_COMPONENT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_COMPONENT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_WD_COMPONENT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


  DATA: component TYPE REF TO if_wdy_md_component.
  exists = abap_true.
  TRY.
      component = me-&gt;get_component( ).
    CATCH cx_wdy_md_not_existing.
      CLEAR exists.
    CATCH cx_wdy_md_permission_failure.
      CLEAR exists.
  ENDTRY.



endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="CONTROLLER_TO_XML" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="CONTROLLER_TO_XML" SCONAME="CONTROLLER" VERSION="1" LANGU="D" DESCRIPT="Web Dynpro: Controller" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_WDY_MD_CONTROLLER"/>
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="CONTROLLER_TO_XML" SCONAME="XML_NODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CONTROLLER_TO_XML.
  DATA definition TYPE wdy_controller.
  DATA rc TYPE i.
  DATA controller_definition_node    TYPE REF TO if_ixml_element.
  DATA wdy_controllert_node          TYPE REF TO if_ixml_element.
  DATA wdy_ctlr_compo_node           TYPE REF TO if_ixml_element.
  DATA wdy_ctlr_compot_node          TYPE REF TO if_ixml_element.
  DATA wdy_ctlr_param_node           TYPE REF TO if_ixml_element.
  DATA wdy_ctlr_paramt_node          TYPE REF TO if_ixml_element.
  DATA wdy_ctlr_usage_node           TYPE REF TO if_ixml_element.
  DATA wdy_ctx_node_node             TYPE REF TO if_ixml_element.
  DATA wdy_ctx_attrib_node           TYPE REF TO if_ixml_element.
  data wdy_ctx_mapping_node          type ref to if_ixml_element.



  controller-&gt;if_wdy_md_object~get_definition(
     IMPORTING
       definition = definition ).

* Create parent node
  DATA _objtype TYPE string.
  _objtype = definition-controller_name.

* Controller Definition
  controller_definition_node = xmldoc-&gt;create_element( &apos;controller_definition&apos; ).
  setattributesfromstructure( node = controller_definition_node structure = definition ).
  rc = xml_node-&gt;append_child( controller_definition_node ).

* copy wdy_controllert
  DATA wdy_controllert_table TYPE STANDARD TABLE OF wdy_controllert.
  FIELD-SYMBOLS: &lt;wdy_controllert&gt; TYPE wdy_controllert.
  SELECT * FROM wdy_controllert INTO TABLE wdy_controllert_table
    WHERE component_name = definition-component_name
      AND controller_name  = definition-controller_name.
  LOOP AT wdy_controllert_table ASSIGNING &lt;wdy_controllert&gt;.
    wdy_controllert_node = xmldoc-&gt;create_element( &apos;wdy_controllert&apos; ).
    setattributesfromstructure( node = wdy_controllert_node structure = &lt;wdy_controllert&gt; ).
    rc = controller_definition_node-&gt;append_child( wdy_controllert_node ).
  ENDLOOP.

* copy components
  DATA it_wdy_ctlr_compo TYPE STANDARD TABLE OF wdy_ctlr_compo.
  FIELD-SYMBOLS: &lt;wdy_ctlr_compo&gt; TYPE wdy_ctlr_compo.
  SELECT * FROM wdy_ctlr_compo INTO TABLE it_wdy_ctlr_compo
    WHERE component_name   = definition-component_name
      AND controller_name  = definition-controller_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ctlr_compo ASSIGNING &lt;wdy_ctlr_compo&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ctlr_compo&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ctlr_compo TRANSPORTING NO FIELDS
              WITH KEY cmpname = &lt;wdy_ctlr_compo&gt;-cmpname
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ctlr_compo&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctlr_compo_node = xmldoc-&gt;create_element( &apos;wdy_ctlr_compo&apos; ).
          setattributesfromstructure( node = wdy_ctlr_compo_node structure = &lt;wdy_ctlr_compo&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctlr_compo_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ctlr_compo ASSIGNING &lt;wdy_ctlr_compo&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ctlr_compo&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctlr_compo_node = xmldoc-&gt;create_element( &apos;wdy_ctlr_compo&apos; ).
          setattributesfromstructure( node = wdy_ctlr_compo_node structure = &lt;wdy_ctlr_compo&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctlr_compo_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy wdy_ctlr_compot
  DATA wdy_ctlr_compot_table TYPE STANDARD TABLE OF wdy_ctlr_compot.
  FIELD-SYMBOLS: &lt;wdy_ctlr_compot&gt; TYPE wdy_ctlr_compot.
  SELECT * FROM wdy_ctlr_compot INTO TABLE wdy_ctlr_compot_table
    WHERE component_name = definition-component_name
      AND controller_name  = definition-controller_name.
  LOOP AT wdy_ctlr_compot_table ASSIGNING &lt;wdy_ctlr_compot&gt;.
    wdy_ctlr_compot_node = xmldoc-&gt;create_element( &apos;wdy_ctlr_compot&apos; ).
    setattributesfromstructure( node = wdy_ctlr_compot_node structure = &lt;wdy_ctlr_compot&gt; ).
    rc = controller_definition_node-&gt;append_child( wdy_ctlr_compot_node ).
  ENDLOOP.

* copy parameters
  DATA it_wdy_ctlr_param TYPE STANDARD TABLE OF wdy_ctlr_param.
  FIELD-SYMBOLS: &lt;wdy_ctlr_param&gt; TYPE wdy_ctlr_param.
  SELECT * FROM wdy_ctlr_param INTO TABLE it_wdy_ctlr_param
    WHERE component_name   = definition-component_name
      AND controller_name  = definition-controller_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ctlr_param ASSIGNING &lt;wdy_ctlr_param&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ctlr_param&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ctlr_param TRANSPORTING NO FIELDS
              WITH KEY cmpname = &lt;wdy_ctlr_param&gt;-cmpname
                       parameter_name = &lt;wdy_ctlr_param&gt;-parameter_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ctlr_param&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctlr_param_node = xmldoc-&gt;create_element( &apos;wdy_ctlr_param&apos; ).
          setattributesfromstructure( node = wdy_ctlr_param_node structure = &lt;wdy_ctlr_param&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctlr_param_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ctlr_param ASSIGNING &lt;wdy_ctlr_param&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ctlr_param&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctlr_param_node = xmldoc-&gt;create_element( &apos;wdy_ctlr_param&apos; ).
          setattributesfromstructure( node = wdy_ctlr_param_node structure = &lt;wdy_ctlr_param&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctlr_param_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy wdy_ctlr_paramt
  DATA wdy_ctlr_paramt_table TYPE STANDARD TABLE OF wdy_ctlr_paramt.
  FIELD-SYMBOLS: &lt;wdy_ctlr_paramt&gt; TYPE wdy_ctlr_paramt.
  SELECT * FROM wdy_ctlr_paramt INTO TABLE wdy_ctlr_paramt_table
    WHERE component_name = definition-component_name
      AND controller_name  = definition-controller_name.
  LOOP AT wdy_ctlr_paramt_table ASSIGNING &lt;wdy_ctlr_paramt&gt;.
    wdy_ctlr_paramt_node = xmldoc-&gt;create_element( &apos;wdy_ctlr_paramt&apos; ).
    setattributesfromstructure( node = wdy_ctlr_paramt_node structure = &lt;wdy_ctlr_paramt&gt; ).
    rc = controller_definition_node-&gt;append_child( wdy_ctlr_paramt_node ).
  ENDLOOP.

* copy controller usages
  DATA it_wdy_ctlr_usage TYPE STANDARD TABLE OF wdy_ctlr_usage.
  FIELD-SYMBOLS: &lt;wdy_ctlr_usage&gt; TYPE wdy_ctlr_usage.
  SELECT * FROM wdy_ctlr_usage INTO TABLE it_wdy_ctlr_usage
    WHERE component_name   = definition-component_name
      AND controller_name  = definition-controller_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ctlr_usage ASSIGNING &lt;wdy_ctlr_usage&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ctlr_usage&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ctlr_usage TRANSPORTING NO FIELDS
              WITH KEY ctlr_usage_name = &lt;wdy_ctlr_usage&gt;-ctlr_usage_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ctlr_usage&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctlr_usage_node = xmldoc-&gt;create_element( &apos;wdy_ctlr_usage&apos; ).
          setattributesfromstructure( node = wdy_ctlr_usage_node structure = &lt;wdy_ctlr_usage&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctlr_usage_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ctlr_usage ASSIGNING &lt;wdy_ctlr_usage&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ctlr_usage&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctlr_usage_node = xmldoc-&gt;create_element( &apos;wdy_ctlr_usage&apos; ).
          setattributesfromstructure( node = wdy_ctlr_usage_node structure = &lt;wdy_ctlr_usage&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctlr_usage_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy context nodes
  DATA it_wdy_ctx_node TYPE STANDARD TABLE OF wdy_ctx_node.
  FIELD-SYMBOLS: &lt;wdy_ctx_node&gt; TYPE wdy_ctx_node.
  SELECT * FROM wdy_ctx_node INTO TABLE it_wdy_ctx_node
    WHERE component_name   = definition-component_name
      AND controller_name  = definition-controller_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ctx_node ASSIGNING &lt;wdy_ctx_node&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ctx_node&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ctx_node TRANSPORTING NO FIELDS
              WITH KEY node_name = &lt;wdy_ctx_node&gt;-node_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ctx_node&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctx_node_node = xmldoc-&gt;create_element( &apos;wdy_ctx_node&apos; ).
          setattributesfromstructure( node = wdy_ctx_node_node structure = &lt;wdy_ctx_node&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctx_node_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ctx_node ASSIGNING &lt;wdy_ctx_node&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ctx_node&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctx_node_node = xmldoc-&gt;create_element( &apos;wdy_ctx_node&apos; ).
          setattributesfromstructure( node = wdy_ctx_node_node structure = &lt;wdy_ctx_node&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctx_node_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy context attributes
  DATA it_wdy_ctx_attrib TYPE STANDARD TABLE OF wdy_ctx_attrib.
  FIELD-SYMBOLS: &lt;wdy_ctx_attrib&gt; TYPE wdy_ctx_attrib.
  SELECT * FROM wdy_ctx_attrib INTO TABLE it_wdy_ctx_attrib
    WHERE component_name   = definition-component_name
      AND controller_name  = definition-controller_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ctx_attrib ASSIGNING &lt;wdy_ctx_attrib&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ctx_attrib&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ctx_attrib TRANSPORTING NO FIELDS
              WITH KEY node_name = &lt;wdy_ctx_attrib&gt;-node_name
                       attribute_name = &lt;wdy_ctx_attrib&gt;-attribute_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ctx_attrib&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctx_attrib_node = xmldoc-&gt;create_element( &apos;wdy_ctx_attrib&apos; ).
          setattributesfromstructure( node = wdy_ctx_attrib_node structure = &lt;wdy_ctx_attrib&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctx_attrib_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ctx_attrib ASSIGNING &lt;wdy_ctx_attrib&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ctx_attrib&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctx_attrib_node = xmldoc-&gt;create_element( &apos;wdy_ctx_attrib&apos; ).
          setattributesfromstructure( node = wdy_ctx_attrib_node structure = &lt;wdy_ctx_attrib&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctx_attrib_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy context mapping
  data it_wdy_ctx_mapping type standard table of wdy_ctx_mapping.
  field-symbols: &lt;wdy_ctx_mapping&gt; type wdy_ctx_mapping.
  select * from wdy_ctx_mapping into table it_wdy_ctx_mapping
    where component_name   = definition-component_name
      and controller_name  = definition-controller_name.
  if sy-subrc = 0.
    case definition-version.
      when &apos;I&apos;.
        loop at it_wdy_ctx_mapping assigning &lt;wdy_ctx_mapping&gt; where version &lt;&gt; &apos;D&apos;.
          if &lt;wdy_ctx_mapping&gt;-version = &apos;A&apos;.
            read table it_wdy_ctx_mapping transporting no fields
              with key ctlr_usage_name = &lt;wdy_ctx_mapping&gt;-ctlr_usage_name
                       ctx_mapp_name = &lt;wdy_ctx_mapping&gt;-ctx_mapp_name
                       version = &apos;I&apos;.
            if sy-subrc = 0.
              continue.
            endif.
          endif.
          &lt;wdy_ctx_mapping&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
         wdy_ctx_mapping_node = xmldoc-&gt;create_element( &apos;wdy_ctx_mapping&apos; ).
          setattributesfromstructure( node = wdy_ctx_mapping_node structure = &lt;wdy_ctx_mapping&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctx_mapping_node ).
        endloop.
      when &apos;A&apos;.
        loop at it_wdy_ctx_mapping assigning &lt;wdy_ctx_mapping&gt; where version = &apos;A&apos;.
          &lt;wdy_ctx_mapping&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
         wdy_ctx_mapping_node = xmldoc-&gt;create_element( &apos;wdy_ctx_mapping&apos; ).
          setattributesfromstructure( node = wdy_ctx_mapping_node structure = &lt;wdy_ctx_mapping&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctx_mapping_node ).
        endloop.
    endcase.
  endif.



endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA wdy_componentt_node   TYPE REF TO if_ixml_element.
  DATA wdy_compo_usage_node  TYPE REF TO if_ixml_element.
  DATA wdy_ext_ctlr_use_node TYPE REF TO if_ixml_element.
  DATA wdy_ext_ctx_map_node  TYPE REF TO if_ixml_element.
  DATA wdy_intf_implem_node  TYPE REF TO if_ixml_element.
  DATA view_node             TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.

  DATA: component TYPE REF TO if_wdy_md_component.
  TRY.
      component = me-&gt;get_component( ).
    CATCH cx_wdy_md_not_existing.
      RAISE EXCEPTION TYPE zcx_saplink EXPORTING textid = zcx_saplink=&gt;not_found.
      RETURN.
    CATCH cx_wdy_md_permission_failure.
      RAISE EXCEPTION TYPE zcx_saplink EXPORTING textid = zcx_saplink=&gt;not_found.
      RETURN.
  ENDTRY.

  DATA definition TYPE wdy_component.

  component-&gt;if_wdy_md_object~get_definition(
     IMPORTING
       definition = definition ).

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = definition ).

* copy wdy_componentt
  DATA wdy_componentt_table TYPE STANDARD TABLE OF wdy_componentt.
  FIELD-SYMBOLS: &lt;wdy_componentt&gt; TYPE wdy_componentt.
  SELECT * FROM wdy_componentt INTO TABLE wdy_componentt_table
    WHERE component_name = definition-component_name.
  LOOP AT wdy_componentt_table ASSIGNING &lt;wdy_componentt&gt;.
    wdy_componentt_node = xmldoc-&gt;create_element( &apos;wdy_componentt&apos; ).
    setattributesfromstructure( node = wdy_componentt_node structure = &lt;wdy_componentt&gt; ).
    rc = rootnode-&gt;append_child( wdy_componentt_node ).
  ENDLOOP.


* copy component usages
  DATA it_wdy_compo_usage TYPE STANDARD TABLE OF wdy_compo_usage.
  FIELD-SYMBOLS: &lt;wdy_compo_usage&gt; TYPE wdy_compo_usage.
  SELECT * FROM wdy_compo_usage INTO TABLE it_wdy_compo_usage
    WHERE component_name   = definition-component_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_compo_usage ASSIGNING &lt;wdy_compo_usage&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_compo_usage&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_compo_usage TRANSPORTING NO FIELDS
              WITH KEY compo_usage_name = &lt;wdy_compo_usage&gt;-compo_usage_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_compo_usage&gt;-version = if_wdy_md_object=&gt;co_version_inactive.

          wdy_compo_usage_node = xmldoc-&gt;create_element( &apos;wdy_compo_usage&apos; ).
          setattributesfromstructure( node = wdy_compo_usage_node structure = &lt;wdy_compo_usage&gt; ).
          rc = rootnode-&gt;append_child( wdy_compo_usage_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_compo_usage ASSIGNING &lt;wdy_compo_usage&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_compo_usage&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_compo_usage_node = xmldoc-&gt;create_element( &apos;wdy_compo_usage&apos; ).
          setattributesfromstructure( node = wdy_compo_usage_node structure = &lt;wdy_compo_usage&gt; ).
          rc = rootnode-&gt;append_child( wdy_compo_usage_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy external controller usages
  DATA it_wdy_ext_ctlr_use TYPE STANDARD TABLE OF wdy_ext_ctlr_use.
  FIELD-SYMBOLS: &lt;wdy_ext_ctlr_use&gt; TYPE wdy_ext_ctlr_use.
  SELECT * FROM wdy_ext_ctlr_use INTO TABLE it_wdy_ext_ctlr_use
    WHERE component_name   = definition-component_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ext_ctlr_use ASSIGNING &lt;wdy_ext_ctlr_use&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ext_ctlr_use&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ext_ctlr_use TRANSPORTING NO FIELDS
              WITH KEY component_name = &lt;wdy_ext_ctlr_use&gt;-component_usage
                       ctlr_usage_name = &lt;wdy_ext_ctlr_use&gt;-ctlr_usage_name
                       comp_ctlr_usage = &lt;wdy_ext_ctlr_use&gt;-comp_ctlr_usage
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ext_ctlr_use&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ext_ctlr_use_node = xmldoc-&gt;create_element( &apos;wdy_ext_ctlr_use&apos; ).
          setattributesfromstructure( node = wdy_ext_ctlr_use_node structure = &lt;wdy_ext_ctlr_use&gt; ).
          rc = rootnode-&gt;append_child( wdy_ext_ctlr_use_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ext_ctlr_use ASSIGNING &lt;wdy_ext_ctlr_use&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ext_ctlr_use&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ext_ctlr_use_node = xmldoc-&gt;create_element( &apos;wdy_ext_ctlr_use&apos; ).
          setattributesfromstructure( node = wdy_ext_ctlr_use_node structure = &lt;wdy_ext_ctlr_use&gt; ).
          rc = rootnode-&gt;append_child( wdy_ext_ctlr_use_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy external context mappings
  DATA it_wdy_ext_ctx_map TYPE STANDARD TABLE OF wdy_ext_ctx_map.
  FIELD-SYMBOLS: &lt;wdy_ext_ctx_map&gt; TYPE wdy_ext_ctx_map.
  SELECT * FROM wdy_ext_ctx_map INTO TABLE it_wdy_ext_ctx_map
    WHERE component_name   = definition-component_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ext_ctx_map ASSIGNING &lt;wdy_ext_ctx_map&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ext_ctx_map&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ext_ctx_map TRANSPORTING NO FIELDS
              WITH KEY ctx_mapping_name = &lt;wdy_ext_ctx_map&gt;-ctx_mapping_name
                       ctlr_usage_name = &lt;wdy_ext_ctx_map&gt;-ctlr_usage_name
                       comp_ctlr_usage = &lt;wdy_ext_ctx_map&gt;-comp_ctlr_usage
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ext_ctx_map&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ext_ctx_map_node = xmldoc-&gt;create_element( &apos;wdy_ext_ctx_map&apos; ).
          setattributesfromstructure( node = wdy_ext_ctx_map_node structure = &lt;wdy_ext_ctx_map&gt; ).
          rc = rootnode-&gt;append_child( wdy_ext_ctx_map_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ext_ctx_map ASSIGNING &lt;wdy_ext_ctx_map&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ext_ctx_map&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ext_ctx_map_node = xmldoc-&gt;create_element( &apos;wdy_ext_ctx_map&apos; ).
          setattributesfromstructure( node = wdy_ext_ctx_map_node structure = &lt;wdy_ext_ctx_map&gt; ).
          rc = rootnode-&gt;append_child( wdy_ext_ctx_map_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy interface implementations
  DATA it_wdy_intf_implem TYPE STANDARD TABLE OF wdy_intf_implem.
  FIELD-SYMBOLS: &lt;wdy_intf_implem&gt; TYPE wdy_intf_implem.
  SELECT * FROM wdy_intf_implem INTO TABLE it_wdy_intf_implem
    WHERE component_name = definition-component_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_intf_implem ASSIGNING &lt;wdy_intf_implem&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_intf_implem&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_intf_implem TRANSPORTING NO FIELDS
              WITH KEY interface_name = &lt;wdy_intf_implem&gt;-interface_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_intf_implem&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_intf_implem_node = xmldoc-&gt;create_element( &apos;wdy_intf_implem&apos; ).
          setattributesfromstructure( node = wdy_intf_implem_node structure = &lt;wdy_intf_implem&gt; ).
          rc = rootnode-&gt;append_child( wdy_intf_implem_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_intf_implem ASSIGNING &lt;wdy_intf_implem&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_intf_implem&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_intf_implem_node = xmldoc-&gt;create_element( &apos;wdy_intf_implem&apos; ).
          setattributesfromstructure( node = wdy_intf_implem_node structure = &lt;wdy_intf_implem&gt; ).
          rc = rootnode-&gt;append_child( wdy_intf_implem_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

  DATA: map TYPE REF TO if_object_map,
         iter TYPE REF TO if_object_collection_iterator,
         obj_name TYPE wdy_md_object_name,
         view TYPE REF TO if_wdy_md_abstract_view,
         controller TYPE REF TO if_wdy_md_controller.

  IF cl_wdy_md_component=&gt;is_component_interface_def( definition-component_name ) = &apos; &apos;.
*   copy views
    map ?= component-&gt;get_views( ).
    iter = map-&gt;get_values_iterator( ).
    WHILE iter-&gt;has_next( ) = &apos;X&apos;.
      TRY.
        view ?= iter-&gt;get_next( ).
        IF definition-version = if_wdy_md_object=&gt;co_version_active AND
           view-&gt;if_wdy_md_object~get_state( ) = if_wdy_md_object=&gt;co_state_pseudo_active.
          CONTINUE.
        ENDIF.
        me-&gt;view_to_xml(
          EXPORTING
            view = view
            xml_node = rootnode
          IMPORTING
            view_node = view_node ).

        controller = view-&gt;get_view_controller( ).
        IF definition-version = if_wdy_md_object=&gt;co_version_active AND
           controller-&gt;if_wdy_md_object~get_state( ) = if_wdy_md_object=&gt;co_state_pseudo_active.
          CONTINUE.
        ENDIF.

        me-&gt;controller_to_xml(
           EXPORTING
              controller = controller
              xml_node   = view_node ).


      ENDTRY.
    ENDWHILE.

*   copy &quot;window-views&quot;
    map ?= component-&gt;get_windows( ).
    iter = map-&gt;get_values_iterator( ).
    WHILE iter-&gt;has_next( ) = &apos;X&apos;.
      TRY.
        view ?= iter-&gt;get_next( ).
          me-&gt;view_to_xml(
            EXPORTING
              view = view
              xml_node = rootnode
            IMPORTING
              view_node = view_node ).

      controller = view-&gt;get_view_controller( ).
      IF definition-version = if_wdy_md_object=&gt;co_version_active AND
         controller-&gt;if_wdy_md_object~get_state( ) = if_wdy_md_object=&gt;co_state_pseudo_active.
        CONTINUE.
      ENDIF.

          me-&gt;controller_to_xml(
             EXPORTING
                controller = controller
                xml_node   = view_node ).
        CATCH cx_wdy_md_already_existing.
      ENDTRY.
    ENDWHILE.

  ELSE.
*   copy interface views
    DATA component_interface TYPE REF TO if_wdy_md_component_interface.
    component_interface ?= component-&gt;get_component_interface( ).
    map ?= component_interface-&gt;get_interface_views( ).
    iter = map-&gt;get_values_iterator( ).
    WHILE iter-&gt;has_next( ) = &apos;X&apos;.
      TRY.
          view ?= iter-&gt;get_next( ).
          IF definition-version = if_wdy_md_object=&gt;co_version_active AND
             view-&gt;if_wdy_md_object~get_state( ) = if_wdy_md_object=&gt;co_state_pseudo_active.
            CONTINUE.
          ENDIF.
          me-&gt;view_to_xml(
            EXPORTING
              view = view
              xml_node = rootnode
            IMPORTING
              view_node = view_node ).

          controller = view-&gt;get_view_controller( ).
          IF definition-version = if_wdy_md_object=&gt;co_version_active AND
             controller-&gt;if_wdy_md_object~get_state( ) = if_wdy_md_object=&gt;co_state_pseudo_active.
            CONTINUE.
          ENDIF.
          me-&gt;controller_to_xml(
             EXPORTING
              controller = controller
              xml_node   = view_node ).
        CATCH cx_wdy_md_already_existing.
      ENDTRY.
    ENDWHILE.
  ENDIF.

* copy controllers of component
  map ?= component-&gt;get_controllers( ).
  iter = map-&gt;get_values_iterator( ).
  WHILE iter-&gt;has_next( ) = &apos;X&apos;.
    TRY.
        controller ?= iter-&gt;get_next( ).
        IF controller-&gt;get_type( ) = wdyn_ctlr_type_cmp_config.
          CONTINUE.
        ENDIF.
        IF definition-version = if_wdy_md_object=&gt;co_version_active AND
           controller-&gt;if_wdy_md_object~get_state( ) = if_wdy_md_object=&gt;co_state_pseudo_active.
          CONTINUE.
        ENDIF.
        me-&gt;controller_to_xml(
           EXPORTING
            controller = controller
            xml_node   = rootnode ).

      CATCH cx_wdy_md_already_existing.
    ENDTRY.
  ENDWHILE.


*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createobjectfromixmldoc.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA wdy_componentt_node   TYPE REF TO if_ixml_element.
  DATA wdy_compo_usage_node  TYPE REF TO if_ixml_element.
  DATA wdy_ext_ctlr_use_node TYPE REF TO if_ixml_element.
  DATA wdy_ext_ctx_map_node  TYPE REF TO if_ixml_element.
  DATA wdy_intf_implem_node  TYPE REF TO if_ixml_element.
  DATA view_node             TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA node2       TYPE REF TO if_ixml_element.
  DATA filter2     TYPE REF TO if_ixml_node_filter.
  DATA iterator2   TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.
  DATA definition  TYPE wdy_component.

  DATA: component TYPE REF TO if_wdy_md_component.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node            = rootnode
      preserveversion = abap_true
    CHANGING
      structure       = definition.

  objname = definition-component_name.

  checkexists = checkexists( ).
  IF checkexists = abap_true.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
    ELSE.
      &quot; delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  cl_wdy_md_component=&gt;create_complete(
    EXPORTING
      name          = definition-component_name
    IMPORTING
      component     = component
    CHANGING
      devclass      = _devclass
  ).

* copy relevant parts of wdy_component (concerning assistance class and configuration properties)
  DATA copy_def TYPE wdy_component.
  CALL METHOD component-&gt;if_wdy_md_object~get_definition
    IMPORTING
      definition = copy_def.
  copy_def-config_props = definition-config_props.
  copy_def-assistance_class = definition-assistance_class.
  MODIFY wdy_component FROM copy_def.

* copy wdy_componentt
  DATA wdy_componentt_table TYPE STANDARD TABLE OF wdy_componentt.
  DATA wdy_componentt TYPE wdy_componentt.
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_componentt&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_componentt.
    APPEND wdy_componentt TO wdy_componentt_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_componentt FROM TABLE wdy_componentt_table.

* copy component usages
  DATA it_wdy_compo_usage TYPE STANDARD TABLE OF wdy_compo_usage.
  DATA wdy_compo_usage TYPE wdy_compo_usage.
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_compo_usage&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_compo_usage.
    APPEND wdy_compo_usage TO it_wdy_compo_usage.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_compo_usage FROM TABLE it_wdy_compo_usage.

* copy external controller usages
  DATA it_wdy_ext_ctlr_use TYPE STANDARD TABLE OF wdy_ext_ctlr_use.
  DATA wdy_ext_ctlr_use TYPE wdy_ext_ctlr_use.
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_ext_ctlr_use&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ext_ctlr_use.
    APPEND wdy_ext_ctlr_use TO it_wdy_ext_ctlr_use.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ext_ctlr_use FROM TABLE it_wdy_ext_ctlr_use.

* copy external context mappings
  DATA it_wdy_ext_ctx_map TYPE STANDARD TABLE OF wdy_ext_ctx_map.
  DATA wdy_ext_ctx_map TYPE wdy_ext_ctx_map.
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_ext_ctx_map&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ext_ctx_map.
    APPEND wdy_ext_ctx_map TO it_wdy_ext_ctx_map.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ext_ctx_map FROM TABLE it_wdy_ext_ctx_map.

* copy interface implementations
  DATA it_wdy_intf_implem TYPE STANDARD TABLE OF wdy_intf_implem.
  DATA wdy_intf_implem TYPE wdy_intf_implem.
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_intf_implem&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_intf_implem.
    APPEND wdy_intf_implem TO it_wdy_intf_implem.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_intf_implem FROM TABLE it_wdy_intf_implem.

  TRY.
*   copy views
      FREE: filter, iterator, node.
      filter = xmldoc-&gt;create_filter_name( &apos;view_definition&apos; ).
      iterator = xmldoc-&gt;create_iterator_filtered( filter ).
      node ?= iterator-&gt;get_next( ).
      WHILE node IS NOT INITIAL.
        me-&gt;xml_to_view(
          EXPORTING
            xml_node = node ).
        node ?= iterator-&gt;get_next( ).
      ENDWHILE.

      DATA controller TYPE REF TO if_wdy_md_controller.
      IF cl_wdy_md_component=&gt;is_component_interface_def( definition-component_name ) = &apos; &apos;.
        controller = component-&gt;get_controller( wdyn_component_controller_name ).
        controller-&gt;delete( ).
        controller-&gt;save_to_database( ).
      ENDIF.

* copy controllers of component
      FREE: filter, iterator, node.
      filter = xmldoc-&gt;create_filter_name( &apos;controller_definition&apos; ).
      iterator = xmldoc-&gt;create_iterator_filtered( filter ).
      node ?= iterator-&gt;get_next( ).
      WHILE node IS NOT INITIAL.
        TRY.
            controller = me-&gt;xml_to_controller(
                xml_node = node ).
            node ?= iterator-&gt;get_next( ).
          CATCH cx_wdy_md_already_existing.
            node ?= iterator-&gt;get_next( ).
        ENDTRY.
      ENDWHILE.

    CATCH cx_wdy_md_enqueue_failure.
    CATCH cx_wdy_md_already_existing.

  ENDTRY.
*
*  DATA: trobjtype  TYPE trobjtype,
*        trobj_name TYPE trobj_name.
*  trobjtype  = l_object.
*  trobj_name = l_obj_name.
*  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
*    EXPORTING
*      object            = trobjtype
*      obj_name          = trobj_name
*    EXCEPTIONS
*      wrong_object_name = 1.

  component-&gt;unlock( ).
  component-&gt;reload( ).

  name = objname.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  DATA: component TYPE REF TO if_wdy_md_component.
  TRY.
      component = me-&gt;get_component( ).
    CATCH cx_wdy_md_not_existing.
      RAISE EXCEPTION TYPE zcx_saplink EXPORTING textid = zcx_saplink=&gt;not_found.
      RETURN.
    CATCH cx_wdy_md_permission_failure.
      RAISE EXCEPTION TYPE zcx_saplink EXPORTING textid = zcx_saplink=&gt;not_found.
      RETURN.
  ENDTRY.

  component-&gt;if_wdy_md_lockable_object~lock( ).
  component-&gt;if_wdy_md_object~delete( ).
  component-&gt;if_wdy_md_lockable_object~save_to_database( ).
  component-&gt;if_wdy_md_lockable_object~unlock( ).
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


  objecttype = wdyn_r3tr_component.  &quot;Web Dynpro Component

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="GET_COMPONENT" VERSION="1" LANGU="D" DESCRIPT="Get Component Object" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="GET_COMPONENT" SCONAME="COMPONENT" VERSION="1" LANGU="D" DESCRIPT="Component" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_WDY_MD_COMPONENT"/>
   <exception CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="GET_COMPONENT" SCONAME="CX_WDY_MD_NOT_EXISTING" VERSION="1" LANGU="D" DESCRIPT="Web Dynpro : Objekt existiert nicht" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="GET_COMPONENT" SCONAME="CX_WDY_MD_PERMISSION_FAILURE" VERSION="1" LANGU="D" MTDTYPE="0" EDITORDER="2 "/>
   <source>method GET_COMPONENT.

  DATA: component_name TYPE wdy_component_name.
  component_name = objname.
  TRANSLATE component_name TO UPPER CASE.

  DATA: tr_objtype     TYPE trobjtype,
         inactive_vers  TYPE char1,
         working_item   TYPE char1,
         l_obj_key      TYPE e071-obj_name.
  DATA: version TYPE r3state.

  CALL FUNCTION &apos;RS_WORKING_AREA_INIT&apos;.

  tr_objtype = wdyn_limu_component_definition.
  l_obj_key = component_name.
  TRANSLATE l_obj_key TO UPPER CASE.                      &quot;#EC SYNTCHAR
  CALL FUNCTION &apos;RS_OBJECT_IN_WORKING_AREA&apos;
    EXPORTING
      object                        = tr_objtype
      obj_name                      = l_obj_key
*     GLOBAL_CHECK                  = &apos; &apos;
      mode                          = &apos;S&apos; &quot;Display
    IMPORTING
      object_is_work_item           = working_item
      object_inactive_version       = inactive_vers.


  IF working_item IS INITIAL.
    version = wdywb_version_active.
  ELSE.
    version = wdywb_version_inactive.
  ENDIF.

  TRY.
      CALL METHOD cl_wdy_md_component=&gt;get_object_by_key
        EXPORTING
          name      = component_name
          version   = version
        RECEIVING
          component = component.
    CATCH cx_wdy_md_not_existing.
      IF version = wdywb_version_active.
        version     = wdywb_version_inactive.
      ELSE.
        version      = wdywb_version_active.
      ENDIF.
      TRY.
        CALL METHOD cl_wdy_md_component=&gt;get_object_by_key
          EXPORTING
            name      = component_name
            version   = version
          RECEIVING
            component = component.
      ENDTRY.
  ENDTRY.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="VIEW_TO_XML" VERSION="1" LANGU="D" DESCRIPT="Convert View Information to XML" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="VIEW_TO_XML" SCONAME="VIEW" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_WDY_MD_ABSTRACT_VIEW"/>
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="VIEW_TO_XML" SCONAME="XML_NODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="VIEW_TO_XML" SCONAME="VIEW_NODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method VIEW_TO_XML.
  DATA definition TYPE wdy_view.
  DATA rc TYPE i.
  DATA view_definition_node    TYPE REF TO if_ixml_element.
  DATA view_window_node        TYPE REF TO if_ixml_element.
  DATA wdy_viewt_node          TYPE REF TO if_ixml_element.
  DATA wdy_iobound_plug_node   TYPE REF TO if_ixml_element.
  DATA wdy_iobound_plgt_node   TYPE REF TO if_ixml_element.
  DATA wdy_ui_element_node     TYPE REF TO if_ixml_element.
  DATA wdy_ui_property_node    TYPE REF TO if_ixml_element.
  DATA wdy_view_cntr_node      TYPE REF TO if_ixml_element.
  DATA wdy_view_cntrt_node     TYPE REF TO if_ixml_element.
  DATA wdy_plug_param_node     TYPE REF TO if_ixml_element.
  DATA wdy_ui_ctx_bind_node    TYPE REF TO if_ixml_element.
  DATA wdy_ui_ddic_bind_node   TYPE REF TO if_ixml_element.
  DATA wdy_ui_evt_bind_node    TYPE REF TO if_ixml_element.
  DATA wdy_nav_link_node       TYPE REF TO if_ixml_element.
  DATA wdy_nav_targref_node    TYPE REF TO if_ixml_element.
  DATA wdy_vsh_node_node       TYPE REF TO if_ixml_element.
  DATA wdy_vsh_pholder_node    TYPE REF TO if_ixml_element.
  DATA wdy_vs_property_node    TYPE REF TO if_ixml_element.


  view-&gt;if_wdy_md_object~get_definition(
     IMPORTING
       definition = definition ).

* Create parent node
  DATA _objtype TYPE string.
  _objtype = definition-view_name.

* View Definition
  view_definition_node = xmldoc-&gt;create_element( &apos;view_definition&apos; ).
  setattributesfromstructure( node = view_definition_node structure = definition ).
  rc = xml_node-&gt;append_child( view_definition_node ).
  view_node = view_definition_node.

* View Window
  TRY.
      DATA window TYPE REF TO if_wdy_md_window.
      window ?= view.
      DATA title TYPE wdy_md_translatable_text.
      title = window-&gt;get_title( ).
      view_window_node = xmldoc-&gt;create_element( &apos;view_window&apos; ).
      rc = view_window_node-&gt;set_attribute( name = &apos;title&apos; value = title ).
*   data def_root_node type ref to if_wdy_md_vset_hierarchy_node.
*   def_root_node ?= window-&gt;get_root_node( definition-def_root_node ).
      rc = view_definition_node-&gt;append_child( view_window_node ).
    CATCH cx_sy_move_cast_error.
  ENDTRY.

* copy wdy_viewt
  DATA wdy_viewt_table TYPE STANDARD TABLE OF wdy_viewt.
  FIELD-SYMBOLS: &lt;wdy_viewt&gt; TYPE wdy_viewt.
  SELECT * FROM wdy_viewt INTO TABLE wdy_viewt_table
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  LOOP AT wdy_viewt_table ASSIGNING &lt;wdy_viewt&gt;.
    wdy_viewt_node = xmldoc-&gt;create_element( &apos;wdy_viewt&apos; ).
    setattributesfromstructure( node = wdy_viewt_node structure = &lt;wdy_viewt&gt; ).
    rc = view_definition_node-&gt;append_child( wdy_viewt_node ).
  ENDLOOP.

* copy wdy_iobound_plug.
  DATA it_wdy_iobound_plug TYPE STANDARD TABLE OF wdy_iobound_plug.
  DATA it_wdy_iobound_plug_copy TYPE STANDARD TABLE OF wdy_iobound_plug.
  FIELD-SYMBOLS: &lt;wdy_iobound_plug&gt; TYPE wdy_iobound_plug.
  SELECT * FROM wdy_iobound_plug INTO TABLE it_wdy_iobound_plug
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_iobound_plug ASSIGNING &lt;wdy_iobound_plug&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_iobound_plug&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_iobound_plug TRANSPORTING NO FIELDS
              WITH KEY plug_name = &lt;wdy_iobound_plug&gt;-plug_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_iobound_plug&gt;-version   = if_wdy_md_object=&gt;co_version_inactive.
          wdy_iobound_plug_node = xmldoc-&gt;create_element( &apos;wdy_iobound_plug&apos; ).
          setattributesfromstructure( node = wdy_iobound_plug_node structure = &lt;wdy_iobound_plug&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_iobound_plug_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_iobound_plug ASSIGNING &lt;wdy_iobound_plug&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_iobound_plug&gt;-version   = if_wdy_md_object=&gt;co_version_inactive.
          wdy_iobound_plug_node = xmldoc-&gt;create_element( &apos;wdy_iobound_plug&apos; ).
          setattributesfromstructure( node = wdy_iobound_plug_node structure = &lt;wdy_iobound_plug&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_iobound_plug_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy wdy_iobound_plgt
  DATA it_wdy_iobound_plgt TYPE STANDARD TABLE OF wdy_iobound_plgt.
  FIELD-SYMBOLS: &lt;plgt&gt; TYPE wdy_iobound_plgt.
  SELECT * FROM wdy_iobound_plgt INTO TABLE it_wdy_iobound_plgt
    WHERE component_name = definition-component_name
      AND view_name = definition-view_name.
  IF sy-subrc = 0.
    LOOP AT it_wdy_iobound_plgt ASSIGNING &lt;plgt&gt;.
      wdy_iobound_plgt_node = xmldoc-&gt;create_element( &apos;wdy_iobound_plgt&apos; ).
      setattributesfromstructure( node = wdy_iobound_plgt_node structure = &lt;plgt&gt; ).
      rc = view_definition_node-&gt;append_child( wdy_iobound_plgt_node ).
    ENDLOOP.
  ENDIF.

* copy WDY_UI_ELEMENT.
  DATA it_wdy_ui_element TYPE STANDARD TABLE OF wdy_ui_element.
  FIELD-SYMBOLS: &lt;wdy_ui_element&gt; TYPE wdy_ui_element.
  SELECT * FROM wdy_ui_element INTO TABLE it_wdy_ui_element
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ui_element ASSIGNING &lt;wdy_ui_element&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ui_element&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ui_element TRANSPORTING NO FIELDS
              WITH KEY element_name = &lt;wdy_ui_element&gt;-element_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ui_element&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_element_node = xmldoc-&gt;create_element( &apos;wdy_ui_element&apos; ).
          setattributesfromstructure( node = wdy_ui_element_node structure = &lt;wdy_ui_element&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_element_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ui_element ASSIGNING &lt;wdy_ui_element&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ui_element&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_element_node = xmldoc-&gt;create_element( &apos;wdy_ui_element&apos; ).
          setattributesfromstructure( node = wdy_ui_element_node structure = &lt;wdy_ui_element&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_element_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy WDY_UI_PROPERTY.
  DATA text TYPE string.
  DATA text_id TYPE wdy_md_translatable_text.
  DATA text_repository TYPE REF TO if_wdy_md_text_repository.
  text_repository = view-&gt;if_wdy_md_lockable_object~get_text_repository( ).
  DATA it_wdy_ui_property TYPE STANDARD TABLE OF wdy_ui_property.

  FIELD-SYMBOLS: &lt;wdy_ui_property&gt; TYPE wdy_ui_property.
  SELECT * FROM wdy_ui_property INTO TABLE it_wdy_ui_property
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  IF sy-subrc = 0.
    DATA str TYPE string.
    DATA header TYPE sotr_head.
    DATA concept TYPE sotr_head-concept.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ui_property ASSIGNING &lt;wdy_ui_property&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ui_property&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ui_property TRANSPORTING NO FIELDS
              WITH KEY element_name  = &lt;wdy_ui_property&gt;-element_name
                       property_name = &lt;wdy_ui_property&gt;-property_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ui_property&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_property_node = xmldoc-&gt;create_element( &apos;wdy_ui_property&apos; ).
          setattributesfromstructure( node = wdy_ui_property_node structure = &lt;wdy_ui_property&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_property_node ).
          TRY.
              str = &lt;wdy_ui_property&gt;-property_value.
              text = text_repository-&gt;get_text( str ).
              rc = wdy_ui_property_node-&gt;set_attribute( name = &apos;PropText&apos; value = text ).
            CATCH cx_root.
          ENDTRY.
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ui_property ASSIGNING &lt;wdy_ui_property&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ui_property&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_property_node = xmldoc-&gt;create_element( &apos;wdy_ui_property&apos; ).
          setattributesfromstructure( node = wdy_ui_property_node structure = &lt;wdy_ui_property&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_property_node ).
          TRY.
              str = &lt;wdy_ui_property&gt;-property_value.
              text = text_repository-&gt;get_text( str ).
              rc = wdy_ui_property_node-&gt;set_attribute( name = &apos;PropText&apos; value = text ).
            CATCH cx_root.
          ENDTRY.
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy WDY_VIEW_CNTR.
  DATA it_wdy_view_cntr TYPE STANDARD TABLE OF wdy_view_cntr.
  FIELD-SYMBOLS: &lt;wdy_view_cntr&gt; TYPE wdy_view_cntr.
  SELECT * FROM wdy_view_cntr INTO TABLE it_wdy_view_cntr
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_view_cntr ASSIGNING &lt;wdy_view_cntr&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_view_cntr&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_view_cntr TRANSPORTING NO FIELDS
              WITH KEY container_name  = &lt;wdy_view_cntr&gt;-container_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_view_cntr&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_view_cntr_node = xmldoc-&gt;create_element( &apos;wdy_view_cntr&apos; ).
          setattributesfromstructure( node = wdy_view_cntr_node structure = &lt;wdy_view_cntr&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_view_cntr_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_view_cntr ASSIGNING &lt;wdy_view_cntr&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_view_cntr&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_view_cntr_node = xmldoc-&gt;create_element( &apos;wdy_view_cntr&apos; ).
          setattributesfromstructure( node = wdy_view_cntr_node structure = &lt;wdy_view_cntr&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_view_cntr_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.


* copy wdy_view_cntrt
  DATA wdy_view_cntrt_table TYPE STANDARD TABLE OF wdy_view_cntrt.
  FIELD-SYMBOLS: &lt;wdy_view_cntrt&gt; TYPE wdy_view_cntrt.
  SELECT * FROM wdy_view_cntrt INTO TABLE wdy_view_cntrt_table
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  LOOP AT wdy_view_cntrt_table ASSIGNING &lt;wdy_view_cntrt&gt;.
    wdy_view_cntrt_node = xmldoc-&gt;create_element( &apos;wdy_view_cntrt&apos; ).
    setattributesfromstructure( node = wdy_view_cntrt_node structure = &lt;wdy_view_cntrt&gt; ).
    rc = view_definition_node-&gt;append_child( wdy_view_cntrt_node ).
  ENDLOOP.

*  copy WDY_PLUG_PARAM.
  DATA it_wdy_plug_param TYPE STANDARD TABLE OF wdy_plug_param.
  FIELD-SYMBOLS: &lt;wdy_plug_param&gt; TYPE wdy_plug_param.
  SELECT * FROM wdy_plug_param INTO TABLE it_wdy_plug_param
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_plug_param ASSIGNING &lt;wdy_plug_param&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_plug_param&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_plug_param TRANSPORTING NO FIELDS
              WITH KEY plug_name = &lt;wdy_plug_param&gt;-plug_name
                       parameter_name = &lt;wdy_plug_param&gt;-parameter_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_plug_param&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_plug_param_node = xmldoc-&gt;create_element( &apos;wdy_plug_param&apos; ).
          setattributesfromstructure( node = wdy_plug_param_node structure = &lt;wdy_plug_param&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_plug_param_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_plug_param ASSIGNING &lt;wdy_plug_param&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_plug_param&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_plug_param_node = xmldoc-&gt;create_element( &apos;wdy_plug_param&apos; ).
          setattributesfromstructure( node = wdy_plug_param_node structure = &lt;wdy_plug_param&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_plug_param_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

*  copy WDY_UI_CTX_BIND.
  DATA it_wdy_ui_ctx_bind TYPE STANDARD TABLE OF wdy_ui_ctx_bind.
  FIELD-SYMBOLS: &lt;wdy_ui_ctx_bind&gt; TYPE wdy_ui_ctx_bind.
  SELECT * FROM wdy_ui_ctx_bind INTO TABLE it_wdy_ui_ctx_bind
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ui_ctx_bind ASSIGNING &lt;wdy_ui_ctx_bind&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ui_ctx_bind&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ui_ctx_bind TRANSPORTING NO FIELDS
              WITH KEY binding_name = &lt;wdy_ui_ctx_bind&gt;-binding_name
                       element_name = &lt;wdy_ui_ctx_bind&gt;-element_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ui_ctx_bind&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_ctx_bind_node = xmldoc-&gt;create_element( &apos;wdy_ui_ctx_bind&apos; ).
          setattributesfromstructure( node = wdy_ui_ctx_bind_node structure = &lt;wdy_ui_ctx_bind&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_ctx_bind_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ui_ctx_bind ASSIGNING &lt;wdy_ui_ctx_bind&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ui_ctx_bind&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_ctx_bind_node = xmldoc-&gt;create_element( &apos;wdy_ui_ctx_bind&apos; ).
          setattributesfromstructure( node = wdy_ui_ctx_bind_node structure = &lt;wdy_ui_ctx_bind&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_ctx_bind_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

*  copy WDY_UI_DDIC_BIND.
  DATA it_wdy_ui_ddic_bind TYPE STANDARD TABLE OF wdy_ui_ddic_bind.
  FIELD-SYMBOLS: &lt;wdy_ui_ddic_bind&gt; TYPE wdy_ui_ddic_bind.
  SELECT * FROM wdy_ui_ddic_bind INTO TABLE it_wdy_ui_ddic_bind
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ui_ddic_bind ASSIGNING &lt;wdy_ui_ddic_bind&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ui_ddic_bind&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ui_ddic_bind TRANSPORTING NO FIELDS
              WITH KEY binding_name = &lt;wdy_ui_ddic_bind&gt;-binding_name
                       element_name = &lt;wdy_ui_ddic_bind&gt;-element_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ui_ddic_bind&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_ddic_bind_node = xmldoc-&gt;create_element( &apos;wdy_ui_ddic_bind&apos; ).
          setattributesfromstructure( node = wdy_ui_ddic_bind_node structure = &lt;wdy_ui_ddic_bind&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_ddic_bind_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ui_ddic_bind ASSIGNING &lt;wdy_ui_ddic_bind&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ui_ddic_bind&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_ddic_bind_node = xmldoc-&gt;create_element( &apos;wdy_ui_ddic_bind&apos; ).
          setattributesfromstructure( node = wdy_ui_ddic_bind_node structure = &lt;wdy_ui_ddic_bind&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_ddic_bind_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

*  copy WDY_UI_EVT_BIND.
  DATA it_wdy_ui_evt_bind TYPE STANDARD TABLE OF wdy_ui_evt_bind.
  FIELD-SYMBOLS: &lt;wdy_ui_evt_bind&gt; TYPE wdy_ui_evt_bind.
  SELECT * FROM wdy_ui_evt_bind INTO TABLE it_wdy_ui_evt_bind
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ui_evt_bind ASSIGNING &lt;wdy_ui_evt_bind&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ui_evt_bind&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ui_evt_bind TRANSPORTING NO FIELDS
              WITH KEY binding_name = &lt;wdy_ui_evt_bind&gt;-binding_name
                       element_name = &lt;wdy_ui_evt_bind&gt;-element_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ui_evt_bind&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_evt_bind_node = xmldoc-&gt;create_element( &apos;wdy_ui_evt_bind&apos; ).
          setattributesfromstructure( node = wdy_ui_evt_bind_node structure = &lt;wdy_ui_evt_bind&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_evt_bind_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ui_evt_bind ASSIGNING &lt;wdy_ui_evt_bind&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ui_evt_bind&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_evt_bind_node = xmldoc-&gt;create_element( &apos;wdy_ui_evt_bind&apos; ).
          setattributesfromstructure( node = wdy_ui_evt_bind_node structure = &lt;wdy_ui_evt_bind&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_evt_bind_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

  IF definition-type = &apos;CL_WDY_MD_WINDOW&apos;.                  &quot;#EC NOTEXT
*   copy WDY_NAV_LINK.
    DATA it_wdy_nav_link TYPE STANDARD TABLE OF wdy_nav_link.
    FIELD-SYMBOLS: &lt;wdy_nav_link&gt; TYPE wdy_nav_link.
    SELECT * FROM wdy_nav_link INTO TABLE it_wdy_nav_link
      WHERE component_name = definition-component_name
        AND window_name  = definition-view_name.
    IF sy-subrc = 0.
      CASE definition-version.
        WHEN &apos;I&apos;.
          LOOP AT it_wdy_nav_link ASSIGNING &lt;wdy_nav_link&gt; WHERE version &lt;&gt; &apos;D&apos;.
            IF &lt;wdy_nav_link&gt;-version = &apos;A&apos;.
              READ TABLE it_wdy_nav_link TRANSPORTING NO FIELDS
                WITH KEY nav_link_name = &lt;wdy_nav_link&gt;-nav_link_name
                         version = &apos;I&apos;.
              IF sy-subrc = 0.
                CONTINUE.
              ENDIF.
            ENDIF.
            &lt;wdy_nav_link&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_nav_link_node = xmldoc-&gt;create_element( &apos;wdy_nav_link&apos; ).
            setattributesfromstructure( node = wdy_nav_link_node structure = &lt;wdy_nav_link&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_nav_link_node ).
          ENDLOOP.
        WHEN &apos;A&apos;.
          LOOP AT it_wdy_nav_link ASSIGNING &lt;wdy_nav_link&gt; WHERE version = &apos;A&apos;.
            &lt;wdy_nav_link&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_nav_link_node = xmldoc-&gt;create_element( &apos;wdy_nav_link&apos; ).
            setattributesfromstructure( node = wdy_nav_link_node structure = &lt;wdy_nav_link&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_nav_link_node ).
          ENDLOOP.
      ENDCASE.
    ENDIF.

*   copy WDY_NAV_TARGREF.
    DATA it_wdy_nav_targref TYPE STANDARD TABLE OF wdy_nav_targref.
    FIELD-SYMBOLS: &lt;wdy_nav_targref&gt; TYPE wdy_nav_targref.
    SELECT * FROM wdy_nav_targref INTO TABLE it_wdy_nav_targref
      WHERE component_name = definition-component_name
        AND window_name  = definition-view_name.
    IF sy-subrc = 0.
      CASE definition-version.
        WHEN &apos;I&apos;.
          LOOP AT it_wdy_nav_targref ASSIGNING &lt;wdy_nav_targref&gt; WHERE version &lt;&gt; &apos;D&apos;.
            IF &lt;wdy_nav_targref&gt;-version = &apos;A&apos;.
              READ TABLE it_wdy_nav_targref TRANSPORTING NO FIELDS
                WITH KEY nav_link_name = &lt;wdy_nav_targref&gt;-nav_link_name
                         nav_targref_name = &lt;wdy_nav_targref&gt;-nav_targref_name
                         version = &apos;I&apos;.
              IF sy-subrc = 0.
                CONTINUE.
              ENDIF.
            ENDIF.
            &lt;wdy_nav_targref&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_nav_targref_node = xmldoc-&gt;create_element( &apos;wdy_nav_targref&apos; ).
            setattributesfromstructure( node = wdy_nav_targref_node structure = &lt;wdy_nav_targref&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_nav_targref_node ).
          ENDLOOP.
        WHEN &apos;A&apos;.
          LOOP AT it_wdy_nav_targref ASSIGNING &lt;wdy_nav_targref&gt; WHERE version = &apos;A&apos;.
            &lt;wdy_nav_targref&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_nav_targref_node = xmldoc-&gt;create_element( &apos;wdy_nav_targref&apos; ).
            setattributesfromstructure( node = wdy_nav_targref_node structure = &lt;wdy_nav_targref&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_nav_targref_node ).
          ENDLOOP.
      ENDCASE.
    ENDIF.

*   copy WDY_VSH_NODE.
    DATA it_wdy_vsh_node TYPE STANDARD TABLE OF wdy_vsh_node.
    FIELD-SYMBOLS: &lt;wdy_vsh_node&gt; TYPE wdy_vsh_node.
    SELECT * FROM wdy_vsh_node INTO TABLE it_wdy_vsh_node
      WHERE component_name = definition-component_name
        AND window_name  = definition-view_name.
    IF sy-subrc = 0.
      CASE definition-version.
        WHEN &apos;I&apos;.
          LOOP AT it_wdy_vsh_node ASSIGNING &lt;wdy_vsh_node&gt; WHERE version &lt;&gt; &apos;D&apos;.
            IF &lt;wdy_vsh_node&gt;-version = &apos;A&apos;.
              READ TABLE it_wdy_vsh_node TRANSPORTING NO FIELDS
                WITH KEY vsh_node_name = &lt;wdy_vsh_node&gt;-vsh_node_name
                         version = &apos;I&apos;.
              IF sy-subrc = 0.
                CONTINUE.
              ENDIF.
            ENDIF.
            &lt;wdy_vsh_node&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_vsh_node_node = xmldoc-&gt;create_element( &apos;wdy_vsh_node&apos; ).
            setattributesfromstructure( node = wdy_vsh_node_node structure = &lt;wdy_vsh_node&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_vsh_node_node ).
          ENDLOOP.
        WHEN &apos;A&apos;.
          LOOP AT it_wdy_vsh_node ASSIGNING &lt;wdy_vsh_node&gt; WHERE version = &apos;A&apos;.
            &lt;wdy_vsh_node&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_vsh_node_node = xmldoc-&gt;create_element( &apos;wdy_vsh_node&apos; ).
            setattributesfromstructure( node = wdy_vsh_node_node structure = &lt;wdy_vsh_node&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_vsh_node_node ).
          ENDLOOP.
      ENDCASE.
    ENDIF.

*   copy WDY_VSH_PHOLDER.
    DATA it_wdy_vsh_pholder TYPE STANDARD TABLE OF wdy_vsh_pholder.
    FIELD-SYMBOLS: &lt;wdy_vsh_pholder&gt; TYPE wdy_vsh_pholder.
    SELECT * FROM wdy_vsh_pholder INTO TABLE it_wdy_vsh_pholder
      WHERE component_name = definition-component_name
        AND window_name  = definition-view_name.
    IF sy-subrc = 0.
      CASE definition-version.
        WHEN &apos;I&apos;.
          LOOP AT it_wdy_vsh_pholder ASSIGNING &lt;wdy_vsh_pholder&gt; WHERE version &lt;&gt; &apos;D&apos;.
            IF &lt;wdy_vsh_pholder&gt;-version = &apos;A&apos;.
              READ TABLE it_wdy_vsh_pholder TRANSPORTING NO FIELDS
                WITH KEY vsh_node_name = &lt;wdy_vsh_pholder&gt;-vsh_node_name
                         vsh_pholder_name = &lt;wdy_vsh_pholder&gt;-vsh_pholder_name
                         version = &apos;I&apos;.
              IF sy-subrc = 0.
                CONTINUE.
              ENDIF.
            ENDIF.
            &lt;wdy_vsh_pholder&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_vsh_pholder_node = xmldoc-&gt;create_element( &apos;wdy_vsh_pholder&apos; ).
            setattributesfromstructure( node = wdy_vsh_pholder_node structure = &lt;wdy_vsh_pholder&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_vsh_pholder_node ).
          ENDLOOP.
        WHEN &apos;A&apos;.
          LOOP AT it_wdy_vsh_pholder ASSIGNING &lt;wdy_vsh_pholder&gt; WHERE version = &apos;A&apos;.
            &lt;wdy_vsh_pholder&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_vsh_pholder_node = xmldoc-&gt;create_element( &apos;wdy_vsh_pholder&apos; ).
            setattributesfromstructure( node = wdy_vsh_pholder_node structure = &lt;wdy_vsh_pholder&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_vsh_pholder_node ).
          ENDLOOP.
      ENDCASE.
    ENDIF.

*   copy WDY_VS_PROPERTY.
    DATA it_wdy_vs_property TYPE STANDARD TABLE OF wdy_vs_property.
    FIELD-SYMBOLS: &lt;wdy_vs_property&gt; TYPE wdy_vs_property.
    SELECT * FROM wdy_vs_property INTO TABLE it_wdy_vs_property
      WHERE component_name = definition-component_name
        AND window_name  = definition-view_name.
    IF sy-subrc = 0.
      CASE definition-version.
        WHEN &apos;I&apos;.
          LOOP AT it_wdy_vs_property ASSIGNING &lt;wdy_vs_property&gt; WHERE version &lt;&gt; &apos;D&apos;.
            IF &lt;wdy_vs_property&gt;-version = &apos;A&apos;.
              READ TABLE it_wdy_vs_property TRANSPORTING NO FIELDS
                WITH KEY vsh_node_name = &lt;wdy_vs_property&gt;-vsh_node_name
                         vs_prop_def_name = &lt;wdy_vs_property&gt;-vs_prop_def_name
                         version = &apos;I&apos;.
              IF sy-subrc = 0.
                CONTINUE.
              ENDIF.
            ENDIF.
            &lt;wdy_vs_property&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_vs_property_node = xmldoc-&gt;create_element( &apos;wdy_vs_property&apos; ).
            setattributesfromstructure( node = wdy_vs_property_node structure = &lt;wdy_vs_property&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_vs_property_node ).
          ENDLOOP.
        WHEN &apos;A&apos;.
          LOOP AT it_wdy_vs_property ASSIGNING &lt;wdy_vs_property&gt; WHERE version = &apos;A&apos;.
            &lt;wdy_vs_property&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_vs_property_node = xmldoc-&gt;create_element( &apos;wdy_vs_property&apos; ).
            setattributesfromstructure( node = wdy_vs_property_node structure = &lt;wdy_vs_property&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_vs_property_node ).
          ENDLOOP.
      ENDCASE.
    ENDIF.

  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="XML_TO_CONTROLLER" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="XML_TO_CONTROLLER" SCONAME="XML_NODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="XML_TO_CONTROLLER" SCONAME="CONTROLLER" VERSION="1" LANGU="D" DESCRIPT="Web Dynpro: Controller" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_WDY_MD_CONTROLLER"/>
   <exception CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="XML_TO_CONTROLLER" SCONAME="CX_WDY_MD_ENQUEUE_FAILURE" VERSION="1" LANGU="D" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="XML_TO_CONTROLLER" SCONAME="CX_WDY_MD_ALREADY_EXISTING" VERSION="1" LANGU="D" DESCRIPT="Web Dynpro : Objekt existiert bereits" MTDTYPE="0" EDITORDER="2 "/>
   <source>method XML_TO_CONTROLLER.
*xml nodes
  DATA definition TYPE wdy_controller.
  DATA rc TYPE i.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.


  CALL METHOD getstructurefromattributes
    EXPORTING
      node            = xml_node
      preserveversion = abap_true
    CHANGING
      structure       = definition.

  DATA: controller_key TYPE wdy_controller_key,
*         controller TYPE REF TO if_wdy_md_controller,
         context_node TYPE REF TO if_wdy_md_context_node.

  controller_key-component_name = definition-component_name.
  controller_key-controller_name = definition-controller_name.

  CALL METHOD cl_wdy_md_controller=&gt;create
    EXPORTING
      component_name             = controller_key-component_name
      controller_name            = controller_key-controller_name
      suppress_access_permission = &apos;X&apos;
    RECEIVING
      controller                 = controller.

  controller-&gt;set_type( definition-controller_type ).
  controller-&gt;save_to_database( ).
  TRANSLATE controller_key TO UPPER CASE.                &quot;#EC TRANSLANG

  IF NOT definition-context IS INITIAL.
    UPDATE wdy_controller
      SET context = &apos;CONTEXT&apos;
      WHERE component_name  = controller_key-component_name
        AND controller_name = controller_key-controller_name
        AND version         = if_wdy_md_object=&gt;co_version_inactive.
    definition-context = &apos;CONTEXT&apos;.
  ENDIF.

* copy wdy_controllert
  DATA wdy_controllert_table TYPE STANDARD TABLE OF wdy_controllert.
  DATA wdy_controllert TYPE wdy_controllert.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_controllert&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_controllert.
    APPEND wdy_controllert TO wdy_controllert_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_controllert FROM TABLE wdy_controllert_table.

* copy components
  DATA it_wdy_ctlr_compo TYPE STANDARD TABLE OF wdy_ctlr_compo.
  DATA wdy_ctlr_compo TYPE wdy_ctlr_compo.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ctlr_compo&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ctlr_compo.
    APPEND wdy_ctlr_compo TO it_wdy_ctlr_compo.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ctlr_compo FROM TABLE it_wdy_ctlr_compo.

* copy wdy_ctlr_compot
  DATA wdy_ctlr_compot_table TYPE STANDARD TABLE OF wdy_ctlr_compot.
  DATA wdy_ctlr_compot TYPE wdy_ctlr_compot.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ctlr_compot&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ctlr_compot.
    APPEND wdy_ctlr_compot TO wdy_ctlr_compot_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ctlr_compot FROM TABLE wdy_ctlr_compot_table.

* copy parameters
  DATA it_wdy_ctlr_param TYPE STANDARD TABLE OF wdy_ctlr_param.
  DATA wdy_ctlr_param TYPE wdy_ctlr_param.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ctlr_param&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ctlr_param.
    APPEND wdy_ctlr_param TO it_wdy_ctlr_param.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ctlr_param FROM TABLE it_wdy_ctlr_param.

* copy wdy_ctlr_paramt
  DATA wdy_ctlr_paramt_table TYPE STANDARD TABLE OF wdy_ctlr_paramt.
  DATA wdy_ctlr_paramt TYPE wdy_ctlr_paramt.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ctlr_paramt&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ctlr_paramt.
    APPEND wdy_ctlr_paramt TO wdy_ctlr_paramt_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ctlr_paramt FROM TABLE wdy_ctlr_paramt_table.

* copy controller usages
  DATA it_wdy_ctlr_usage TYPE STANDARD TABLE OF wdy_ctlr_usage.
  DATA wdy_ctlr_usage TYPE wdy_ctlr_usage.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ctlr_usage&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ctlr_usage.
    APPEND wdy_ctlr_usage TO it_wdy_ctlr_usage.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ctlr_usage FROM TABLE it_wdy_ctlr_usage.

* copy context nodes
  DATA it_wdy_ctx_node TYPE STANDARD TABLE OF wdy_ctx_node.
  DATA wdy_ctx_node TYPE wdy_ctx_node.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ctx_node&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ctx_node.
    APPEND wdy_ctx_node TO it_wdy_ctx_node.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ctx_node FROM TABLE it_wdy_ctx_node.

* copy context attributes
  DATA it_wdy_ctx_attrib TYPE STANDARD TABLE OF wdy_ctx_attrib.
  DATA wdy_ctx_attrib TYPE wdy_ctx_attrib.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ctx_attrib&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ctx_attrib.
    APPEND wdy_ctx_attrib TO it_wdy_ctx_attrib.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ctx_attrib FROM TABLE it_wdy_ctx_attrib.

* copy context mapping
  DATA it_wdy_ctx_mapping TYPE STANDARD TABLE OF wdy_ctx_mapping.
  DATA wdy_ctx_mapping TYPE wdy_ctx_mapping.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ctx_mapping&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ctx_mapping.
    APPEND wdy_ctx_mapping TO it_wdy_ctx_mapping.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ctx_mapping FROM TABLE it_wdy_ctx_mapping.

* if the controller is a configuration
  IF definition-controller_type = wdyn_ctlr_type_custom AND
     cl_wdy_md_component=&gt;get_config_controller_name( definition-component_name ) = definition-controller_name.
    DATA component TYPE REF TO cl_wdy_md_component.
    component ?= controller-&gt;if_wdy_md_object~get_parent( ).
    component-&gt;if_wdy_md_component~set_configuration_controller( controller ).
    component-&gt;save_to_db_definition_only( ).
  ENDIF.

* unlock
  controller-&gt;unlock( ).
  controller-&gt;reload( ).

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="XML_TO_VIEW" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="XML_TO_VIEW" SCONAME="XML_NODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <exception CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="XML_TO_VIEW" SCONAME="CX_WDY_MD_ENQUEUE_FAILURE" VERSION="1" LANGU="D" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD xml_to_view.
*xml nodes
  DATA definition TYPE wdy_view.
  DATA rc TYPE i.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.


  CALL METHOD getstructurefromattributes
    EXPORTING
      node            = xml_node
      preserveversion = abap_true
    CHANGING
      structure       = definition.

  DATA: view     TYPE REF TO if_wdy_md_view,
        abstract_view TYPE REF TO if_wdy_md_abstract_view,
        view_key TYPE wdy_md_view_key,
        window   TYPE REF TO cl_wdy_md_window. &quot;if_wdy_md_window.
  view_key-component_name = definition-component_name.
  view_key-view_name = definition-view_name.



  CALL METHOD cl_wdy_md_abstract_view=&gt;create
    EXPORTING
      component_name             = view_key-component_name
      view_name                  = view_key-view_name
      suppress_access_permission = &apos;X&apos;
      type                       = definition-type
    RECEIVING
      view                       = abstract_view.

  abstract_view-&gt;set_type( definition-view_type ).
  abstract_view-&gt;set_lifespan( definition-lifespan ).

  TRY.
      view ?= abstract_view.
      view-&gt;create_root_container( ).
    CATCH cx_sy_move_cast_error.
  ENDTRY.


  TRY.
      DATA def_root_node TYPE REF TO if_wdy_md_vset_hierarchy_node.
      DATA title TYPE wdy_md_translatable_text.
      window ?= abstract_view.
      title = definition-title.
      IF definition-def_root_node IS NOT INITIAL.
        def_root_node = window-&gt;find_viewset_hierarchy_node( name = definition-def_root_node ).
        IF def_root_node IS INITIAL.
          def_root_node = window-&gt;if_wdy_md_window~create_root_node( name = definition-def_root_node
                                                                      type = &apos;CL_WDY_MD_VIEW_USAGE&apos; ).
        ENDIF.
        window-&gt;if_wdy_md_window~set_default_root_node( def_root_node ).
      ENDIF.

      IF NOT title IS INITIAL.
        window-&gt;if_wdy_md_window~set_title( title = title ).
      ENDIF.
    CATCH cx_sy_move_cast_error.
  ENDTRY.

  abstract_view-&gt;save_to_database( ).
  TRANSLATE view_key TO UPPER CASE.                      &quot;#EC TRANSLANG

* copy wdy_viewt
  DATA wdy_viewt_table TYPE STANDARD TABLE OF wdy_viewt.
  DATA wdy_viewt TYPE wdy_viewt.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_viewt&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_viewt.
    APPEND wdy_viewt TO wdy_viewt_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_viewt FROM TABLE wdy_viewt_table.

* copy wdy_iobound_plug.
  DATA it_wdy_iobound_plug TYPE STANDARD TABLE OF wdy_iobound_plug.
  DATA wdy_iobound_plug TYPE wdy_iobound_plug.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_iobound_plug&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_iobound_plug.
    APPEND wdy_iobound_plug TO it_wdy_iobound_plug.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_iobound_plug FROM TABLE it_wdy_iobound_plug.

* copy wdy_iobound_plgt
  DATA it_wdy_iobound_plgt TYPE STANDARD TABLE OF wdy_iobound_plgt.
  DATA plgt TYPE wdy_iobound_plgt.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_iobound_plgt&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = plgt.
    APPEND plgt TO it_wdy_iobound_plgt.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_iobound_plgt FROM TABLE it_wdy_iobound_plgt.


* copy WDY_UI_ELEMENT.
  DATA it_wdy_ui_element TYPE STANDARD TABLE OF wdy_ui_element.
  DATA wdy_ui_element TYPE wdy_ui_element.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ui_element&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ui_element.
    APPEND wdy_ui_element TO it_wdy_ui_element.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_ui_element FROM TABLE it_wdy_ui_element.

* copy WDY_UI_PROPERTY.
  DATA text_repository_of_copy TYPE REF TO if_wdy_md_text_repository.
  DATA text TYPE string.
  DATA text_id TYPE wdy_md_translatable_text.
  DATA str TYPE string.
  DATA header TYPE sotr_head.
  DATA concept TYPE sotr_head-concept.
  text_repository_of_copy ?= abstract_view-&gt;if_wdy_md_lockable_object~get_text_repository( ).
  DATA it_wdy_ui_property TYPE STANDARD TABLE OF wdy_ui_property.
  DATA wdy_ui_property TYPE wdy_ui_property.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ui_property&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ui_property.
    TRY.
        str = wdy_ui_property-property_value.
        text = text_repository_of_copy-&gt;get_text( str ).
        IF NOT text IS INITIAL.
*               check if the guid corresponds to an otr alias, in that case DO NOT create a new one
          concept = str.
          CALL FUNCTION &apos;SOTR_GET_CONCEPT&apos;
            EXPORTING
              concept = concept
            IMPORTING
              header  = header.
          IF header-alias_name IS INITIAL.
            wdy_ui_property-property_value = text_repository_of_copy-&gt;create_text( text ).
          ENDIF.
        ENDIF.
      CATCH cx_wb_text_not_existing.
        CLEAR str.
        str = node-&gt;get_attribute( name = &apos;PropText&apos; ).
        IF str IS NOT INITIAL.
          wdy_ui_property-property_value = text_repository_of_copy-&gt;create_text( str ).
        ENDIF.
      CATCH cx_wb_text_create_exception.
        CLEAR wdy_ui_property-property_value.
    ENDTRY.
    APPEND wdy_ui_property TO it_wdy_ui_property.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_ui_property FROM TABLE it_wdy_ui_property.

* copy WDY_VIEW_CNTR.
  DATA it_wdy_view_cntr TYPE STANDARD TABLE OF wdy_view_cntr.
  DATA wdy_view_cntr TYPE wdy_view_cntr.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_view_cntr&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_view_cntr.
    APPEND wdy_view_cntr TO it_wdy_view_cntr.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_view_cntr FROM TABLE it_wdy_view_cntr.

* copy wdy_view_cntrt
  DATA wdy_view_cntrt_table TYPE STANDARD TABLE OF wdy_view_cntrt.
  DATA wdy_view_cntrt TYPE wdy_view_cntrt.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_view_cntrt&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_view_cntrt.
    APPEND wdy_view_cntrt TO wdy_view_cntrt_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_view_cntrt FROM TABLE wdy_view_cntrt_table.

*  copy WDY_PLUG_PARAM.
  DATA it_wdy_plug_param TYPE STANDARD TABLE OF wdy_plug_param.
  DATA wdy_plug_param TYPE wdy_plug_param.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_plug_param&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_plug_param.
    APPEND wdy_plug_param TO it_wdy_plug_param.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_plug_param FROM TABLE it_wdy_plug_param.

*  copy WDY_UI_CTX_BIND.
  DATA it_wdy_ui_ctx_bind TYPE STANDARD TABLE OF wdy_ui_ctx_bind.
  DATA wdy_ui_ctx_bind TYPE wdy_ui_ctx_bind.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ui_ctx_bind&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ui_ctx_bind.
    APPEND wdy_ui_ctx_bind TO it_wdy_ui_ctx_bind.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_ui_ctx_bind FROM TABLE it_wdy_ui_ctx_bind.

*  copy WDY_UI_DDIC_BIND.
  DATA it_wdy_ui_ddic_bind TYPE STANDARD TABLE OF wdy_ui_ddic_bind.
  DATA wdy_ui_ddic_bind TYPE wdy_ui_ddic_bind.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ui_ddic_bind&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ui_ddic_bind.
    APPEND wdy_ui_ddic_bind TO it_wdy_ui_ddic_bind.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_ui_ddic_bind FROM TABLE it_wdy_ui_ddic_bind.

*  copy WDY_UI_EVT_BIND.
  DATA it_wdy_ui_evt_bind TYPE STANDARD TABLE OF wdy_ui_evt_bind.
  DATA wdy_ui_evt_bind TYPE wdy_ui_evt_bind.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ui_evt_bind&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ui_evt_bind.
    APPEND wdy_ui_evt_bind TO it_wdy_ui_evt_bind.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_ui_evt_bind FROM TABLE it_wdy_ui_evt_bind.

  IF definition-type = &apos;CL_WDY_MD_WINDOW&apos;.                  &quot;#EC NOTEXT
*   copy WDY_NAV_LINK.
    DATA it_wdy_nav_link TYPE STANDARD TABLE OF wdy_nav_link.
    DATA wdy_nav_link TYPE wdy_nav_link.
    FREE: filter, iterator, node.
    filter = xml_node-&gt;create_filter_name( &apos;wdy_nav_link&apos; ).
    iterator = xml_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    WHILE node IS NOT INITIAL.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node            = node
          preserveversion = abap_true
        CHANGING
          structure       = wdy_nav_link.
      APPEND wdy_nav_link TO it_wdy_nav_link.
      node ?= iterator-&gt;get_next( ).
    ENDWHILE.
    MODIFY wdy_nav_link FROM TABLE it_wdy_nav_link.

*   copy WDY_NAV_TARGREF.
    DATA it_wdy_nav_targref TYPE STANDARD TABLE OF wdy_nav_targref.
    DATA wdy_nav_targref TYPE wdy_nav_targref.
    FREE: filter, iterator, node.
    filter = xml_node-&gt;create_filter_name( &apos;wdy_nav_targref&apos; ).
    iterator = xml_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    WHILE node IS NOT INITIAL.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node            = node
          preserveversion = abap_true
        CHANGING
          structure       = wdy_nav_targref.
      APPEND wdy_nav_targref TO it_wdy_nav_targref.
      node ?= iterator-&gt;get_next( ).
    ENDWHILE.
    MODIFY wdy_nav_targref FROM TABLE it_wdy_nav_targref.

*   copy WDY_VSH_NODE.
    DATA it_wdy_vsh_node TYPE STANDARD TABLE OF wdy_vsh_node.
    DATA wdy_vsh_node TYPE wdy_vsh_node.
    FREE: filter, iterator, node.
    filter = xml_node-&gt;create_filter_name( &apos;wdy_vsh_node&apos; ).
    iterator = xml_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    WHILE node IS NOT INITIAL.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node            = node
          preserveversion = abap_true
        CHANGING
          structure       = wdy_vsh_node.
      APPEND wdy_vsh_node TO it_wdy_vsh_node.
      node ?= iterator-&gt;get_next( ).
    ENDWHILE.
    MODIFY wdy_vsh_node FROM TABLE it_wdy_vsh_node.

*   copy WDY_VSH_PHOLDER.
    DATA it_wdy_vsh_pholder TYPE STANDARD TABLE OF wdy_vsh_pholder.
    DATA wdy_vsh_pholder TYPE wdy_vsh_pholder.
    FREE: filter, iterator, node.
    filter = xml_node-&gt;create_filter_name( &apos;wdy_vsh_pholder&apos; ).
    iterator = xml_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    WHILE node IS NOT INITIAL.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node            = node
          preserveversion = abap_true
        CHANGING
          structure       = wdy_vsh_pholder.
      APPEND wdy_vsh_pholder TO it_wdy_vsh_pholder.
      node ?= iterator-&gt;get_next( ).
    ENDWHILE.
    MODIFY wdy_vsh_pholder FROM TABLE it_wdy_vsh_pholder.

*   copy WDY_VS_PROPERTY.
    DATA it_wdy_vs_property TYPE STANDARD TABLE OF wdy_vs_property.
    DATA wdy_vs_property TYPE wdy_vs_property.
    FREE: filter, iterator, node.
    filter = xml_node-&gt;create_filter_name( &apos;wdy_vs_property&apos; ).
    iterator = xml_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    WHILE node IS NOT INITIAL.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node            = node
          preserveversion = abap_true
        CHANGING
          structure       = wdy_vs_property.
      APPEND wdy_vs_property TO it_wdy_vs_property.
      node ?= iterator-&gt;get_next( ).
    ENDWHILE.
    MODIFY wdy_vs_property FROM TABLE it_wdy_vs_property.

  ENDIF.

  abstract_view-&gt;unlock( ).
  abstract_view-&gt;reload( ).

  TRY.
* copy controllers of component
      DATA  controller TYPE REF TO if_wdy_md_controller.
      FREE: filter, iterator, node.
      filter = xml_node-&gt;create_filter_name( &apos;controller_definition&apos; ).
      iterator = xml_node-&gt;create_iterator_filtered( filter ).
      node ?= iterator-&gt;get_next( ).
      WHILE node IS NOT INITIAL.
        TRY.
            controller = me-&gt;xml_to_controller(
                xml_node = node ).
            node ?= iterator-&gt;get_next( ).
            abstract_view-&gt;set_view_controller( controller ).
          CATCH cx_wdy_md_already_existing.
            node ?= iterator-&gt;get_next( ).
        ENDTRY.
      ENDWHILE.
      abstract_view-&gt;if_wdy_md_lockable_object~save_to_database( ).
    CATCH cx_wdy_md_already_existing.
  ENDTRY.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_WD_CONFIG_APPL" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Web Dynpro ABAP Application Configuration" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZSAPLINK_WD_CONFIG_APPL" TYPEGROUP="WDYN" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_WD_CONFIG_APPL" TYPEGROUP="WDYWB" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>WDYN</forwardDeclaration>
  <forwardDeclaration>WDYWB</forwardDeclaration>
  <inheritance CLSNAME="ZSAPLINK_WD_CONFIG_APPL" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_APPL" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_APPL" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_APPL" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_APPL" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_APPL" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CHECKEXISTS.



  exists = abap_true.

  DATA: config_id TYPE WDY_CONFIG_ID.
  config_id = objname.
  TRANSLATE config_id TO UPPER CASE.

  SELECT SINGLE config_id FROM wdy_config_appl INTO config_id
    WHERE config_id = config_id.
  IF sy-subrc NE 0.
    CLEAR exists.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createixmldocfromobject.


*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA wdy_config_appl_node   TYPE REF TO if_ixml_element.
  DATA wdy_config_appt_node   TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.

  DATA wdy_config_appl_table TYPE STANDARD TABLE OF wdy_config_appl.
  DATA wdy_config_appt_table TYPE STANDARD TABLE OF wdy_config_appt.
  FIELD-SYMBOLS &lt;wdy_config_appl&gt; TYPE wdy_config_appl.
  FIELD-SYMBOLS &lt;wdy_config_appt&gt; TYPE wdy_config_appt.

  DATA: config_id TYPE wdy_config_id.
  config_id = objname.
  TRANSLATE config_id TO UPPER CASE.

  SELECT * FROM wdy_config_appl INTO TABLE wdy_config_appl_table
    WHERE config_id = config_id.
  SELECT * FROM wdy_config_appt INTO TABLE wdy_config_appt_table
    WHERE config_id = config_id.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  rc = rootnode-&gt;set_attribute( name = &apos;OBJNAME&apos; value = objname ).

* copy wdy_config_appl
  LOOP AT wdy_config_appl_table ASSIGNING &lt;wdy_config_appl&gt;.
    wdy_config_appl_node = xmldoc-&gt;create_element( &apos;wdy_config_appl&apos; ).
    setattributesfromstructure( node = wdy_config_appl_node structure = &lt;wdy_config_appl&gt; ).
    rc = rootnode-&gt;append_child( wdy_config_appl_node ).
  ENDLOOP.

* copy wdy_config_appt
  LOOP AT wdy_config_appt_table ASSIGNING &lt;wdy_config_appt&gt;.
    wdy_config_appt_node = xmldoc-&gt;create_element( &apos;wdy_config_appt&apos; ).
    setattributesfromstructure( node = wdy_config_appt_node structure = &lt;wdy_config_appt&gt; ).
    rc = rootnode-&gt;append_child( wdy_config_appt_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createobjectfromixmldoc.
*
*
*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA wdy_config_appl_node   TYPE REF TO if_ixml_element.
  DATA wdy_config_appt_node   TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.


  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).



  DATA wdy_config_appl_table TYPE STANDARD TABLE OF wdy_config_appl.
  DATA wdy_config_appt_table TYPE STANDARD TABLE OF wdy_config_appt.
  DATA wdy_config_appl TYPE wdy_config_appl.
  DATA wdy_config_appt TYPE wdy_config_appt.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_config_appl&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_config_appl.
    APPEND wdy_config_appl TO wdy_config_appl_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  objname = wdy_config_appl-config_id.
  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  MODIFY wdy_config_appl FROM TABLE wdy_config_appl_table.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_config_appt&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_config_appt.
    APPEND wdy_config_appt TO wdy_config_appt_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_config_appt FROM TABLE wdy_config_appt_table.

  COMMIT WORK.
  name = objname.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD deleteobject.
  DATA: config_id TYPE wdy_config_id.
  config_id = objname.
  TRANSLATE config_id TO UPPER CASE.
  DELETE FROM wdy_config_appl WHERE config_id = config_id.
  DELETE FROM wdy_config_appt WHERE config_id = config_id.

  COMMIT WORK.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE.


  objecttype = &apos;WDCA&apos;.

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_WD_CONFIG_COMP" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Web Dynpro ABAP Component Configuration" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZSAPLINK_WD_CONFIG_COMP" TYPEGROUP="WDYN" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_WD_CONFIG_COMP" TYPEGROUP="WDYWB" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>WDYN</forwardDeclaration>
  <forwardDeclaration>WDYWB</forwardDeclaration>
  <inheritance CLSNAME="ZSAPLINK_WD_CONFIG_COMP" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_COMP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_COMP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_COMP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_COMP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_COMP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CHECKEXISTS.



  exists = abap_true.

  DATA: config_id TYPE WDY_CONFIG_ID.
  config_id = objname.
  TRANSLATE config_id TO UPPER CASE.

  SELECT SINGLE config_id FROM wdy_config_data INTO config_id
    WHERE config_id = config_id.
  IF sy-subrc NE 0.
    CLEAR exists.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CREATEIXMLDOCFROMOBJECT.


*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA wdy_config_data_node   TYPE REF TO if_ixml_element.
  DATA wdy_config_datt_node   TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.

  DATA wdy_config_data_table TYPE STANDARD TABLE OF wdy_config_data.
  DATA wdy_config_datt_table TYPE STANDARD TABLE OF wdy_config_datt.
  FIELD-SYMBOLS &lt;wdy_config_data&gt; TYPE wdy_config_data.
  FIELD-SYMBOLS &lt;wdy_config_datt&gt; TYPE wdy_config_datt.

  DATA: config_id TYPE wdy_config_id.
  config_id = objname.
  TRANSLATE config_id TO UPPER CASE.

  SELECT * FROM wdy_config_data INTO TABLE wdy_config_data_table
    WHERE config_id = config_id.
  SELECT * FROM wdy_config_datt INTO TABLE wdy_config_datt_table
    WHERE config_id = config_id.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  rc = rootnode-&gt;set_attribute( name = &apos;OBJNAME&apos; value = objname ).

* copy wdy_config_data
  LOOP AT wdy_config_data_table ASSIGNING &lt;wdy_config_data&gt;.
    wdy_config_data_node = xmldoc-&gt;create_element( &apos;wdy_config_data&apos; ).
    setattributesfromstructure( node = wdy_config_data_node structure = &lt;wdy_config_data&gt; ).
    rc = rootnode-&gt;append_child( wdy_config_data_node ).
  ENDLOOP.

* copy wdy_config_datt
  LOOP AT wdy_config_datt_table ASSIGNING &lt;wdy_config_datt&gt;.
    wdy_config_datt_node = xmldoc-&gt;create_element( &apos;wdy_config_datt&apos; ).
    setattributesfromstructure( node = wdy_config_datt_node structure = &lt;wdy_config_datt&gt; ).
    rc = rootnode-&gt;append_child( wdy_config_datt_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CREATEOBJECTFROMIXMLDOC.
*
*
*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA wdy_config_data_node   TYPE REF TO if_ixml_element.
  DATA wdy_config_datt_node   TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.


  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).



  DATA wdy_config_data_table TYPE STANDARD TABLE OF wdy_config_data.
  DATA wdy_config_datt_table TYPE STANDARD TABLE OF wdy_config_datt.
  DATA wdy_config_data TYPE wdy_config_data.
  DATA wdy_config_datt TYPE wdy_config_datt.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_config_data&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_config_data.
    APPEND wdy_config_data TO wdy_config_data_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  objname = wdy_config_data-config_id.
  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  MODIFY wdy_config_data FROM TABLE wdy_config_data_table.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_config_datt&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_config_datt.
    APPEND wdy_config_datt TO wdy_config_datt_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_config_datt FROM TABLE wdy_config_datt_table.

  COMMIT WORK.
  name = objname.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD DELETEOBJECT.
  DATA: config_id TYPE wdy_config_id.
  config_id = objname.
  TRANSLATE config_id TO UPPER CASE.
  DELETE FROM wdy_config_data WHERE config_id = config_id.
  DELETE FROM wdy_config_datt WHERE config_id = config_id.

  COMMIT WORK.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE.


  objecttype = &apos;WDCC&apos;.

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_INDEX" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Data Dictionary  - Index" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_INDEX" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_INDEX" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_INDEX" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_INDEX" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_INDEX" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_INDEX" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CHECKEXISTS.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name TYPE ddobjname,
        dd12v_wa type dd12v.
  l_name = objname.
  CALL FUNCTION &apos;DDIF_INDX_GET&apos;
    EXPORTING
      name          = l_name
    IMPORTING
      dd12v_wa      = dd12v_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc = 0 AND dd12v_wa-INDEXNAME IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CREATEIXMLDOCFROMOBJECT.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate TYPE ddgotstate,
        dd12v_wa TYPE dd12v,
        dd17v_tab TYPE STANDARD TABLE OF dd17v.

*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA dd17v_node TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA _indxname  TYPE ddobjname.
  _indxname = objname.

  CALL FUNCTION &apos;DDIF_INDX_GET&apos;
    EXPORTING
      name          = _indxname
      langu         = sy-langu
    IMPORTING
      gotstate      = gotstate
      dd12v_wa      = dd12v_wa
    TABLES
      dd17v_tab     = dd17v_tab
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc &lt;&gt; 0 OR dd12v_wa-INDEXNAME IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = dd12v_wa ).

  DATA: wa_dd17v LIKE LINE OF dd17v_tab.
  LOOP AT dd17v_tab INTO wa_dd17v.
    dd17v_node = xmldoc-&gt;create_element( &apos;dd17v&apos; ).
    setattributesfromstructure( node = dd17v_node structure = wa_dd17v ).
    rc = rootnode-&gt;append_child( dd17v_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CREATEOBJECTFROMIXMLDOC.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate TYPE ddgotstate,
        dd12v_wa TYPE dd12v,
        dd17v_tab TYPE STANDARD TABLE OF dd17v.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA dd17v_node  TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _indxname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd12v_wa.

  objname = dd12v_wa-INDEXNAME.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* retrieve Domain details
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd17v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  DATA: wa_dd17v LIKE LINE OF dd17v_tab.
  WHILE node IS NOT INITIAL.
    CLEAR dd17v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_dd17v.
    APPEND wa_dd17v TO dd17v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  data: itadir type tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  modify tadir from itadir.

 CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      when 1 or 9 or 7 or 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_INDX_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd12v_wa          = dd12v_wa
    TABLES
      dd17v_tab         = dd17v_tab
    EXCEPTIONS
      indx_not_found    = 1
      name_inconsistent = 2
      indx_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDIF.



  data: TROBJTYPE  type TROBJTYPE,
        TROBJ_NAME type TROBJ_NAME.
  TROBJTYPE  = l_object.
  TROBJ_NAME = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = TROBJTYPE
      obj_name          = TROBJ_NAME
    EXCEPTIONS
      wrong_object_name = 1.

  name = objName.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method DELETEOBJECT.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;INDX&apos;.  &quot;Index
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_LOCK_OBJECTS" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Data Dictionary  - Lock Objects" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_LOCK_OBJECTS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_LOCK_OBJECTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_LOCK_OBJECTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_LOCK_OBJECTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_LOCK_OBJECTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_LOCK_OBJECTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CHECKEXISTS.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name TYPE ddobjname,
        dd25v_wa TYPE dd25v.
  l_name = objname.

  CALL FUNCTION &apos;DDIF_ENQU_GET&apos;
    EXPORTING
      name          = l_name
    IMPORTING
      dd25v_wa      = dd25v_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc = 0 AND dd25v_wa-VIEWNAME IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CREATEIXMLDOCFROMOBJECT.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate  TYPE ddgotstate,
        dd25v_wa  TYPE dd25v,
        dd26e_tab TYPE STANDARD TABLE OF dd26e,
        dd26e_wa  LIKE LINE OF dd26e_tab,
        dd27p_tab TYPE STANDARD TABLE OF dd27p,
        dd27p_wa  LIKE LINE OF dd27p_tab,
        ddena_tab TYPE STANDARD TABLE OF ddena,
        ddena_wa  LIKE LINE OF ddena_tab.

*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA dd26e_node TYPE REF TO if_ixml_element.
  DATA dd27p_node TYPE REF TO if_ixml_element.
  DATA ddena_node TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA _enquname  TYPE ddobjname.
  _enquname = objname.

  CALL FUNCTION &apos;DDIF_ENQU_GET&apos;
    EXPORTING
      name          = _enquname
      langu         = sy-langu
    IMPORTING
      gotstate      = gotstate
      dd25v_wa      = dd25v_wa
    TABLES
      dd26e_tab     = dd26e_tab
      dd27p_tab     = dd27p_tab
      ddena_tab     = ddena_tab
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc &lt;&gt; 0 OR dd25v_wa-viewname IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = dd25v_wa ).

  LOOP AT dd26e_tab INTO dd26e_wa.
    dd26e_node = xmldoc-&gt;create_element( &apos;dd26e&apos; ).
    setattributesfromstructure( node = dd26e_node structure = dd26e_wa ).
    rc = rootnode-&gt;append_child( dd26e_node ).
  ENDLOOP.

  LOOP AT dd27p_tab INTO dd27p_wa.
    dd27p_node = xmldoc-&gt;create_element( &apos;dd27p&apos; ).
    setattributesfromstructure( node = dd27p_node structure = dd27p_wa ).
    rc = rootnode-&gt;append_child( dd27p_node ).
  ENDLOOP.

  LOOP AT ddena_tab INTO ddena_wa.
    ddena_node = xmldoc-&gt;create_element( &apos;ddena&apos; ).
    setattributesfromstructure( node = ddena_node structure = ddena_wa ).
    rc = rootnode-&gt;append_child( ddena_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CREATEOBJECTFROMIXMLDOC.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate  TYPE ddgotstate,
        dd25v_wa  TYPE dd25v,
        dd26e_tab TYPE STANDARD TABLE OF dd26e,
        dd26e_wa  LIKE LINE OF dd26e_tab,
        dd27p_tab TYPE STANDARD TABLE OF dd27p,
        dd27p_wa  LIKE LINE OF dd27p_tab,
        ddena_tab TYPE STANDARD TABLE OF ddena,
        ddena_wa  LIKE LINE OF ddena_tab.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA dd26e_node  TYPE REF TO if_ixml_element.
  DATA dd27p_node  TYPE REF TO if_ixml_element.
  DATA ddena_node  TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _enquname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd25v_wa.

  objname = dd25v_wa-viewname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* retrieve Tabl details
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd26e&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd26e_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd26e_wa.
    APPEND dd26e_wa TO dd26e_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd27p&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd27p_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd27p_wa.
    APPEND dd27p_wa TO dd27p_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;ddena&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR ddena_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ddena_wa.
    APPEND ddena_wa TO ddena_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_ENQU_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd25v_wa          = dd25v_wa
    TABLES
      dd26e_tab         = dd26e_tab
      dd27p_tab         = dd27p_tab
    EXCEPTIONS
      enqu_not_found    = 1
      name_inconsistent = 2
      enqu_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.

  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDIF.

  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objName.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method DELETEOBJECT.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;ENQU&apos;.  &quot;Lock Objects
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_SEARCH_HELPS" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Data Dictionary  - Search Helps" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_SEARCH_HELPS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_SEARCH_HELPS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SEARCH_HELPS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SEARCH_HELPS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SEARCH_HELPS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_SEARCH_HELPS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name TYPE ddobjname,
        dd30v_wa TYPE dd30v.
  l_name = objname.

  CALL FUNCTION &apos;DDIF_SHLP_GET&apos;
    EXPORTING
      name          = l_name
    IMPORTING
      dd30v_wa      = dd30v_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc = 0 AND dd30v_wa-SHLPNAME IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate  TYPE ddgotstate,
        dd30v_wa  TYPE dd30v,
        dd31v_tab TYPE STANDARD TABLE OF dd31v,
        dd31v_wa  LIKE LINE OF dd31v_tab,
        dd32p_tab TYPE STANDARD TABLE OF dd32p,
        dd32p_wa  LIKE LINE OF dd32p_tab,
        dd33v_tab TYPE STANDARD TABLE OF dd33v,
        dd33v_wa  LIKE LINE OF dd33v_tab.

*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA dd31v_node TYPE REF TO if_ixml_element.
  DATA dd32p_node TYPE REF TO if_ixml_element.
  DATA dd33v_node TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA _shlpname  TYPE ddobjname.
  _shlpname = objname.

  CALL FUNCTION &apos;DDIF_SHLP_GET&apos;
    EXPORTING
      name          = _shlpname
      langu         = sy-langu
    IMPORTING
      gotstate      = gotstate
      dd30v_wa      = dd30v_wa
    TABLES
      dd31v_tab     = dd31v_tab
      dd32p_tab     = dd32p_tab
      dd33v_tab     = dd33v_tab
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc &lt;&gt; 0 OR dd30v_wa-SHLPNAME IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = dd30v_wa ).

  LOOP AT dd31v_tab INTO dd31v_wa.
    dd31v_node = xmldoc-&gt;create_element( &apos;dd31v&apos; ).
    setattributesfromstructure( node = dd31v_node structure = dd31v_wa ).
    rc = rootnode-&gt;append_child( dd31v_node ).
  ENDLOOP.

  LOOP AT dd32p_tab INTO dd32p_wa.
    dd32p_node = xmldoc-&gt;create_element( &apos;dd32p&apos; ).
    setattributesfromstructure( node = dd32p_node structure = dd32p_wa ).
    rc = rootnode-&gt;append_child( dd32p_node ).
  ENDLOOP.

  LOOP AT dd33v_tab INTO dd33v_wa.
    dd33v_node = xmldoc-&gt;create_element( &apos;dd33v&apos; ).
    setattributesfromstructure( node = dd33v_node structure = dd33v_wa ).
    rc = rootnode-&gt;append_child( dd33v_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate  TYPE ddgotstate,
        dd30v_wa  TYPE dd30v,
        dd31v_tab TYPE STANDARD TABLE OF dd31v,
        dd31v_wa  LIKE LINE OF dd31v_tab,
        dd32p_tab TYPE STANDARD TABLE OF dd32p,
        dd32p_wa  LIKE LINE OF dd32p_tab,
        dd33v_tab TYPE STANDARD TABLE OF dd33v,
        dd33v_wa  LIKE LINE OF dd33v_tab.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA dd31v_node  TYPE REF TO if_ixml_element.
  DATA dd32p_node  TYPE REF TO if_ixml_element.
  DATA dd33v_node  TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _shlpname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd30v_wa.

  objname = dd30v_wa-shlpname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* retrieve Tabl details
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd31v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd31v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd31v_wa.
    APPEND dd31v_wa TO dd31v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd32p&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd32p_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd32p_wa.
    APPEND dd32p_wa TO dd32p_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd33v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd33v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd33v_wa.
    APPEND dd33v_wa TO dd33v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_SHLP_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd30v_wa          = dd30v_wa
    TABLES
      dd31v_tab         = dd31v_tab
      dd32p_tab         = dd32p_tab
      dd33v_tab         = dd33v_tab
    EXCEPTIONS
      shlp_not_found    = 1
      name_inconsistent = 2
      shlp_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.

  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDIF.

  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objName.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;SHLP&apos;.  &quot;Search Helps
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_TABLE_TECH_SETTINGS" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Data Dictionary - Table Technical Settings" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_TABLE_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_TABLE_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CHECKEXISTS.

  DATA: l_name TYPE ddobjname,
        dd09l_wa type dd09l.
  l_name = objname.

  CALL FUNCTION &apos;DDIF_TABT_GET&apos;
    EXPORTING
      name                = l_name
    IMPORTING
      DD09l_WA            = DD09l_WA
    EXCEPTIONS
      ILLEGAL_INPUT       = 1
      OTHERS              = 2.
  IF sy-subrc = 0 AND dd09l_wa-TABNAME IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CREATEIXMLDOCFROMOBJECT.

  DATA: gotstate TYPE ddgotstate,
        dd09l_wa TYPE dd09l.

*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA _tabtname  TYPE ddobjname.
  _tabtname = objname.

  CALL FUNCTION &apos;DDIF_TABT_GET&apos;
    EXPORTING
      name          = _tabtname
    IMPORTING
      gotstate      = gotstate
      dd09l_wa      = dd09l_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc &lt;&gt; 0 OR dd09l_wa-tabname IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = dd09l_wa ).

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CREATEOBJECTFROMIXMLDOC.

  DATA: gotstate TYPE ddgotstate,
        dd09l_wa TYPE dd09l.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA rc          TYPE sysubrc.
  DATA _tabtname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd09l_wa.

  objname = dd09l_wa-tabname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_TABT_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd09L_wa          = dd09l_wa
    EXCEPTIONS
      tabt_not_found    = 1
      name_inconsistent = 2
      tabt_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.

  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDIF.

  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objName.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method DELETEOBJECT.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE.
  objecttype = &apos;TABT&apos;.  &quot;Table Technical Settings
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_TABLES" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Data Dictionary  - Tables/Structures" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_TABLES" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_TABLES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_TABLES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD checkexists.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/
*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name TYPE ddobjname,
        dd02v_wa TYPE dd02v.
  l_name = objname.

  CALL FUNCTION &apos;DDIF_TABL_GET&apos;
    EXPORTING
      name          = l_name
    IMPORTING
      dd02v_wa      = dd02v_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc = 0 AND dd02v_wa-tabname IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createixmldocfromobject.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/
*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate  TYPE ddgotstate,
        dd02v_wa  TYPE dd02v,
        dd09l_wa  TYPE dd09v,
        dd03p_tab TYPE STANDARD TABLE OF dd03p,
        dd03p_wa  LIKE LINE OF dd03p_tab,
        dd05m_tab TYPE STANDARD TABLE OF dd05m,
        dd05m_wa  LIKE LINE OF dd05m_tab,
        dd08v_tab TYPE STANDARD TABLE OF dd08v,
        dd08v_wa  LIKE LINE OF dd08v_tab,
        dd12v_tab TYPE STANDARD TABLE OF dd12v,
        dd12v_wa  LIKE LINE OF dd12v_tab,
        dd17v_tab TYPE STANDARD TABLE OF dd17v,
        dd17v_wa  LIKE LINE OF dd17v_tab,
        dd35v_tab TYPE STANDARD TABLE OF dd35v,
        dd35v_wa  LIKE LINE OF dd35v_tab,
        dd36m_tab TYPE STANDARD TABLE OF dd36m,
        dd36m_wa  LIKE LINE OF dd36m_tab.

*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA dd09l_node TYPE REF TO if_ixml_element.
  DATA dd03p_node TYPE REF TO if_ixml_element.
  DATA dd05m_node TYPE REF TO if_ixml_element.
  DATA dd08v_node TYPE REF TO if_ixml_element.
  DATA dd12v_node TYPE REF TO if_ixml_element.
  DATA dd17v_node TYPE REF TO if_ixml_element.
  DATA dd35v_node TYPE REF TO if_ixml_element.
  DATA dd36m_node TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA _tablname  TYPE ddobjname.
  _tablname = objname.

  CALL FUNCTION &apos;DDIF_TABL_GET&apos;
    EXPORTING
      name          = _tablname
      langu         = sy-langu
    IMPORTING
      gotstate      = gotstate
      dd02v_wa      = dd02v_wa
      dd09l_wa      = dd09l_wa
    TABLES
      dd03p_tab     = dd03p_tab
      dd05m_tab     = dd05m_tab
      dd08v_tab     = dd08v_tab
      dd12v_tab     = dd12v_tab
      dd17v_tab     = dd17v_tab
      dd35v_tab     = dd35v_tab
      dd36m_tab     = dd36m_tab
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc &lt;&gt; 0 OR dd02v_wa-tabname IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = dd02v_wa ).

  dd09l_node = xmldoc-&gt;create_element( &apos;dd09l&apos; ).
  setattributesfromstructure( node = dd09l_node structure = dd09l_wa ).
  rc = rootnode-&gt;append_child( dd09l_node ).

  LOOP AT dd03p_tab INTO dd03p_wa.
    dd03p_node = xmldoc-&gt;create_element( &apos;dd03p&apos; ).
    setattributesfromstructure( node = dd03p_node structure = dd03p_wa ).
    rc = rootnode-&gt;append_child( dd03p_node ).
  ENDLOOP.

  LOOP AT dd05m_tab INTO dd05m_wa.
    dd05m_node = xmldoc-&gt;create_element( &apos;dd05m&apos; ).
    setattributesfromstructure( node = dd05m_node structure = dd05m_wa ).
    rc = rootnode-&gt;append_child( dd05m_node ).
  ENDLOOP.

  LOOP AT dd08v_tab INTO dd08v_wa.
    dd08v_node = xmldoc-&gt;create_element( &apos;dd08v&apos; ).
    setattributesfromstructure( node = dd08v_node structure = dd08v_wa ).
    rc = rootnode-&gt;append_child( dd08v_node ).
  ENDLOOP.

  LOOP AT dd12v_tab INTO dd12v_wa.
    dd12v_node = xmldoc-&gt;create_element( &apos;dd12v&apos; ).
    setattributesfromstructure( node = dd12v_node structure = dd12v_wa ).
    rc = rootnode-&gt;append_child( dd12v_node ).
  ENDLOOP.

  LOOP AT dd17v_tab INTO dd17v_wa.
    dd17v_node = xmldoc-&gt;create_element( &apos;dd17v&apos; ).
    setattributesfromstructure( node = dd17v_node structure = dd17v_wa ).
    rc = rootnode-&gt;append_child( dd17v_node ).
  ENDLOOP.

  LOOP AT dd35v_tab INTO dd35v_wa.
    dd35v_node = xmldoc-&gt;create_element( &apos;dd35v&apos; ).
    setattributesfromstructure( node = dd35v_node structure = dd35v_wa ).
    rc = rootnode-&gt;append_child( dd35v_node ).
  ENDLOOP.

  LOOP AT dd36m_tab INTO dd36m_wa.
    dd36m_node = xmldoc-&gt;create_element( &apos;dd36m&apos; ).
    setattributesfromstructure( node = dd36m_node structure = dd36m_wa ).
    rc = rootnode-&gt;append_child( dd36m_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createobjectfromixmldoc.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/
*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate  TYPE ddgotstate,
        dd02v_wa  TYPE dd02v,
        dd09l_wa  TYPE dd09v,
        dd03p_tab TYPE STANDARD TABLE OF dd03p,
        dd03p_wa  LIKE LINE OF dd03p_tab,
        dd05m_tab TYPE STANDARD TABLE OF dd05m,
        dd05m_wa  LIKE LINE OF dd05m_tab,
        dd08v_tab TYPE STANDARD TABLE OF dd08v,
        dd08v_wa  LIKE LINE OF dd08v_tab,
        dd12v_tab TYPE STANDARD TABLE OF dd12v,
        dd12v_wa  LIKE LINE OF dd12v_tab,
        dd17v_tab TYPE STANDARD TABLE OF dd17v,
        dd17v_wa  LIKE LINE OF dd17v_tab,
        dd35v_tab TYPE STANDARD TABLE OF dd35v,
        dd35v_wa  LIKE LINE OF dd35v_tab,
        dd36m_tab TYPE STANDARD TABLE OF dd36m,
        dd36m_wa  LIKE LINE OF dd36m_tab.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA dd09l_node  TYPE REF TO if_ixml_element.
  DATA dd03p_node  TYPE REF TO if_ixml_element.
  DATA dd05m_node  TYPE REF TO if_ixml_element.
  DATA dd08v_node  TYPE REF TO if_ixml_element.
  DATA dd12v_node  TYPE REF TO if_ixml_element.
  DATA dd17v_node  TYPE REF TO if_ixml_element.
  DATA dd35v_node  TYPE REF TO if_ixml_element.
  DATA dd36m_node  TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _tablname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.
  DATA _objname    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd02v_wa.

  objname = dd02v_wa-tabname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  dd09l_node = xmldoc-&gt;find_from_name( &apos;dd09l&apos; ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = dd09l_node
    CHANGING
      structure = dd09l_wa.

* retrieve Tabl details
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd03p&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd03p_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd03p_wa.
    APPEND dd03p_wa TO dd03p_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd05m&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd05m_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd05m_wa.
    APPEND dd05m_wa TO dd05m_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd08v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd08v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd08v_wa.
    APPEND dd08v_wa TO dd08v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd12v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd12v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd12v_wa.
    APPEND dd12v_wa TO dd12v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd17v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd17v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd17v_wa.
    APPEND dd17v_wa TO dd17v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd35v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd35v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd35v_wa.
    APPEND dd35v_wa TO dd35v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd36m&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd36m_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd36m_wa.
    APPEND dd36m_wa TO dd36m_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        _objname = l_obj_name.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;locked
            object = _objname.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_TABL_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd02v_wa          = dd02v_wa
      dd09l_wa          = dd09l_wa
    TABLES
      dd03p_tab         = dd03p_tab
      dd05m_tab         = dd05m_tab
      dd08v_tab         = dd08v_tab
      dd35v_tab         = dd35v_tab
      dd36m_tab         = dd36m_tab
    EXCEPTIONS
      tabl_not_found    = 1
      name_inconsistent = 2
      tabl_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.

  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;system_error.
  ENDIF.

  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objname.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/
*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/
*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;TABL&apos;.  &quot;Tables and Structures
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_VIEW_TECH_SETTINGS" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Data Dictionary - Table Technical Settings" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_VIEW_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_VIEW_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VIEW_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VIEW_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VIEW_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_VIEW_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CHECKEXISTS.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name TYPE ddobjname,
        dd09l_wa type dd09l.
  l_name = objname.

  CALL FUNCTION &apos;DDIF_VIET_GET&apos;
    EXPORTING
      name                = l_name
    IMPORTING
      DD09l_WA            = DD09l_WA
    EXCEPTIONS
      ILLEGAL_INPUT       = 1
      OTHERS              = 2.
  IF sy-subrc = 0 AND dd09l_wa-TABNAME IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CREATEIXMLDOCFROMOBJECT.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate TYPE ddgotstate,
        dd09l_wa TYPE dd09l.

*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA _tabtname  TYPE ddobjname.
  _tabtname = objname.

  CALL FUNCTION &apos;DDIF_VIET_GET&apos;
    EXPORTING
      name          = _tabtname
      langu         = sy-langu
    IMPORTING
      gotstate      = gotstate
      dd09l_wa      = dd09l_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc &lt;&gt; 0 OR dd09l_wa-tabname IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = dd09l_wa ).

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CREATEOBJECTFROMIXMLDOC.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate TYPE ddgotstate,
        dd09l_wa TYPE dd09l.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA rc          TYPE sysubrc.
  DATA _tabtname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd09l_wa.

  objname = dd09l_wa-tabname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_VIET_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd09L_wa          = dd09l_wa
    EXCEPTIONS
      viet_not_found    = 1
      name_inconsistent = 2
      viet_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.

  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDIF.

  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objName.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method DELETEOBJECT.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;VIET&apos;.  &quot;View Technical Settings
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_VIEWS" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Data Dictionary  - Views" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_VIEWS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_VIEWS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VIEWS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VIEWS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VIEWS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_VIEWS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CHECKEXISTS.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name TYPE ddobjname,
        dd25v_wa TYPE dd25v.
  l_name = objname.

  CALL FUNCTION &apos;DDIF_VIEW_GET&apos;
    EXPORTING
      name          = l_name
    IMPORTING
      dd25v_wa      = dd25v_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc = 0 AND dd25v_wa-viewname IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CREATEIXMLDOCFROMOBJECT.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate  TYPE ddgotstate,
        dd25v_wa  TYPE dd25v,
        dd09l_wa  TYPE dd09v,
        dd26v_tab TYPE STANDARD TABLE OF dd26v,
        dd26v_wa  LIKE LINE OF dd26v_tab,
        dd27p_tab TYPE STANDARD TABLE OF dd27p,
        dd27p_wa  LIKE LINE OF dd27p_tab,
        dd28j_tab TYPE STANDARD TABLE OF dd28j,
        dd28j_wa  LIKE LINE OF dd28j_tab,
        dd28v_tab TYPE STANDARD TABLE OF dd28v,
        dd28v_wa  LIKE LINE OF dd28v_tab.


*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA dd09l_node TYPE REF TO if_ixml_element.
  DATA dd26v_node TYPE REF TO if_ixml_element.
  DATA dd27p_node TYPE REF TO if_ixml_element.
  DATA dd28j_node TYPE REF TO if_ixml_element.
  DATA dd28v_node TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA _viewname  TYPE ddobjname.
  _viewname = objname.

  CALL FUNCTION &apos;DDIF_VIEW_GET&apos;
    EXPORTING
      name          = _viewname
      langu         = sy-langu
    IMPORTING
      gotstate      = gotstate
      dd25v_wa      = dd25v_wa
      dd09l_wa      = dd09l_wa
    TABLES
      dd26v_tab     = dd26v_tab
      dd27p_tab     = dd27p_tab
      dd28j_tab     = dd28j_tab
      dd28v_tab     = dd28v_tab
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc &lt;&gt; 0 OR dd25v_wa-viewname IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = dd25v_wa ).

  dd09l_node = xmldoc-&gt;create_element( &apos;dd09l&apos; ).
  setattributesfromstructure( node = dd09l_node structure = dd09l_wa ).
  rc = rootnode-&gt;append_child( dd09l_node ).

  LOOP AT dd26v_tab INTO dd26v_wa.
    dd26v_node = xmldoc-&gt;create_element( &apos;dd26v&apos; ).
    setattributesfromstructure( node = dd26v_node structure = dd26v_wa ).
    rc = rootnode-&gt;append_child( dd26v_node ).
  ENDLOOP.

  LOOP AT dd27p_tab INTO dd27p_wa.
    dd27p_node = xmldoc-&gt;create_element( &apos;dd27p&apos; ).
    setattributesfromstructure( node = dd27p_node structure = dd27p_wa ).
    rc = rootnode-&gt;append_child( dd27p_node ).
  ENDLOOP.

  LOOP AT dd28j_tab INTO dd28j_wa.
    dd28j_node = xmldoc-&gt;create_element( &apos;dd28j&apos; ).
    setattributesfromstructure( node = dd28j_node structure = dd28j_wa ).
    rc = rootnode-&gt;append_child( dd28j_node ).
  ENDLOOP.

  LOOP AT dd28v_tab INTO dd28v_wa.
    dd28v_node = xmldoc-&gt;create_element( &apos;dd28v&apos; ).
    setattributesfromstructure( node = dd28v_node structure = dd28v_wa ).
    rc = rootnode-&gt;append_child( dd28v_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CREATEOBJECTFROMIXMLDOC.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate  TYPE ddgotstate,
        dd25v_wa  type dd25v,
        dd09l_wa  type dd09v,
        dd26v_tab type standard table of dd26v,
        dd26v_wa  like line of dd26v_tab,
        dd27p_tab type standard table of dd27p,
        dd27p_wa  like line of dd27p_tab,
        dd28j_tab type standard table of dd28j,
        dd28j_wa  like line of dd28j_tab,
        dd28v_tab type standard table of dd28v,
        dd28v_wa  like line of dd28v_tab.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  data dd09l_node type ref to if_ixml_element.
  data dd26v_node type ref to if_ixml_element.
  data dd27p_node type ref to if_ixml_element.
  data dd28j_node type ref to if_ixml_element.
  data dd28v_node type ref to if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _tablname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd25v_wa.

  objname = dd25v_wa-viewname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  dd09l_node = xmldoc-&gt;find_from_name( &apos;dd09l&apos; ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = dd09l_node
    CHANGING
      structure = dd09l_wa.

* retrieve Tabl details
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd26v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd26v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd26v_wa.
    APPEND dd26v_wa TO dd26v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd27p&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd27p_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd27p_wa.
    APPEND dd27p_wa TO dd27p_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd28j&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd28j_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd28j_wa.
    APPEND dd28j_wa TO dd28j_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd28v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd28v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd28v_wa.
    APPEND dd28v_wa TO dd28v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_VIEW_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd25v_wa          = dd25v_wa
      dd09l_wa          = dd09l_wa
    TABLES
      dd26v_tab         = dd26v_tab
      dd27p_tab         = dd27p_tab
      dd28j_tab         = dd28j_tab
      dd28v_tab         = dd28v_tab
    EXCEPTIONS
      view_not_found    = 1
      name_inconsistent = 2
      view_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.

  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDIF.

  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objName.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method DELETEOBJECT.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;VIEW&apos;.  &quot;Views
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" VERSION="1" LANGU="D" DESCRIPT="SAPlink Class Installer" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" WITH_UNIT_TESTS="X" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*&quot;* use this source file for your ABAP unit test classes
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

CLASS ltcl_check_enh_implementation DEFINITION FINAL FOR TESTING.
  &quot; DURATION SHORT
  &quot; RISK LEVEL HARMLESS
  &quot;#AU Duration Medium
  &quot;#AU Risk_Level Harmless
  PUBLIC SECTION.
    METHODS:
      check_010_non_existing   FOR TESTING RAISING cx_static_check,
      check_020_create_slinkee FOR TESTING RAISING cx_static_check.
  PRIVATE SECTION.
    DATA targetobject TYPE REF TO zsaplink.
    DATA ixml         TYPE REF TO if_ixml_document.
    DATA cx           TYPE REF TO cx_root.
    DATA msg  TYPE string.
    DATA name TYPE string.
    DATA devclass TYPE devclass.
    METHODS setup.
ENDCLASS.                    &quot;ltcl_check_enh_implementation DEFINITION

*----------------------------------------------------------------------*
*       CLASS ltcl_check_enh_implementation IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS ltcl_check_enh_implementation IMPLEMENTATION.

  METHOD setup.
  ENDMETHOD.                    &quot;setup

  METHOD check_010_non_existing.
    name = &apos;ZDOES_NOT_EXIST&apos;.
    CREATE OBJECT targetobject
      TYPE zsaplink_enh_implementation
      EXPORTING
        name = name.
    TRY.
        ixml = targetobject-&gt;createixmldocfromobject( ).
      CATCH zcx_saplink INTO cx.    &quot; SAPlink exception class
        msg = cx-&gt;get_text( ).
        cl_aunit_assert=&gt;assert_bound( act = cx msg = msg ).
    ENDTRY.

  ENDMETHOD.                    &quot;CHECK_CHECK_NON_EXISTING

  METHOD check_020_create_slinkee.
    DATA: xmlstring TYPE string.
    name     = &apos;ZDUMMY_BADI&apos;.
    devclass = &apos;$TMP&apos;.
    CREATE OBJECT targetobject
      TYPE zsaplink_enh_implementation
      EXPORTING
        name = name.
    TRY.
        ixml = targetobject-&gt;createixmldocfromobject( ).
      CATCH zcx_saplink INTO cx.    &quot; SAPlink exception class
        msg = cx-&gt;get_text( ).
        cl_aunit_assert=&gt;fail( msg = msg ).
    ENDTRY.
    cl_aunit_assert=&gt;assert_bound( act = ixml msg = &apos;iXML is not bound&apos; ).

    xmlstring = targetobject-&gt;convertixmldoctostring( ixmldocument = ixml ).

    FREE: ixml, cx.

    ixml = targetobject-&gt;convertstringtoixmldoc( xmlstring = xmlstring ).

    &quot; Test without overwrite
    TRY.

        targetobject-&gt;createobjectfromixmldoc(
          EXPORTING
            ixmldocument = ixml    &quot; IF_IXML_DOCUMENT
            devclass     = devclass    &quot; Development class/package
*         overwrite    = overwrite    &quot; Overwrite original objects
*       RECEIVING
*         name         = name    &quot; Installed object name
        ).
      CATCH zcx_saplink INTO cx.    &quot; SAPlink exception class
        msg = cx-&gt;get_text( ).
        cl_aunit_assert=&gt;assert_bound( act = cx msg = msg ).
    ENDTRY.
    &quot; Test with overwrite
    TRY.
        targetobject-&gt;createobjectfromixmldoc(
          EXPORTING
            ixmldocument = ixml                 &quot; IF_IXML_DOCUMENT
            devclass     = devclass    &quot; Development class/package
            overwrite    = &apos;X&apos;                  &quot; Overwrite original objects
*       RECEIVING
*         name         = name    &quot; Installed object name
        ).
      CATCH zcx_saplink INTO cx.    &quot; SAPlink exception class
        msg = cx-&gt;get_text( ).
        cl_aunit_assert=&gt;fail( msg = msg ).
    ENDTRY.
  ENDMETHOD.                    &quot;check_030_xml_string

ENDCLASS.                    &quot;ltcl_check_enh_implementation IMPLEMENTATION</localTestClasses>
  <typeUsage CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" TYPEGROUP="SEOP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" TYPEGROUP="SEOR" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" TYPEGROUP="SEOS" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" TYPEGROUP="SEOT" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" TYPEGROUP="SEOX" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <forwardDeclaration>SEOP</forwardDeclaration>
  <forwardDeclaration>SEOR</forwardDeclaration>
  <forwardDeclaration>SEOS</forwardDeclaration>
  <forwardDeclaration>SEOT</forwardDeclaration>
  <forwardDeclaration>SEOX</forwardDeclaration>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="BADIIMPL_TOOL" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="6 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="CL_ENH_TOOL_BADI_IMPL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="ENHANCEMENT_ID" VERSION="1" LANGU="D" DESCRIPT="Name for the enhancement_id Attribute" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;enhancement_id&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="ENHTOOLTYPE" VERSION="1" LANGU="D" DESCRIPT="Enhancement Tool" EXPOSURE="0" STATE="1" EDITORDER="8 " ATTDECLTYP="0" ATTVALUE="&apos;Tool Type&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ENHTOOLTYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="ENHTOOLTYPE_ID" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="9 " ATTDECLTYP="2" ATTVALUE="&apos;tooltype_id&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="HOOKIMPL_TOOL" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="7 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="CL_ENH_TOOL_HOOK_IMPL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="OBJ_NAME" VERSION="1" LANGU="D" DESCRIPT="Object Name in Object List" EXPOSURE="0" STATE="1" EDITORDER="11 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TROBJ_NAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="OBJ_TYPE" VERSION="1" LANGU="D" DESCRIPT="Object Type" EXPOSURE="0" STATE="1" EDITORDER="12 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TROBJTYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="ORIG_OBJ" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="14 " ATTDECLTYP="2" ATTVALUE="&apos;orig_object&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="PGMID" VERSION="1" LANGU="D" DESCRIPT="Program ID in Requests and Tasks" EXPOSURE="0" STATE="1" EDITORDER="10 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="PGMID" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="PROGRAM" VERSION="1" LANGU="D" DESCRIPT="ABAP Program Name" EXPOSURE="0" STATE="1" EDITORDER="13 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="PROGNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SHORTTEXT" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SHORTTEXT_ID" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;shorttext&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SPOT_NAME" VERSION="1" LANGU="D" DESCRIPT="Name (ID) of an Enhancement Spot" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ENHSPOTNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SPOT_NAME_ID" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="&apos;spot_name&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  DATA cx  TYPE REF TO cx_root.

  TRY.
      me-&gt;get_impl_tool( ).
      exists = &apos;X&apos;.
    CATCH cx_root INTO cx.
  ENDTRY.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/
  &quot; General DATA types
  DATA _objtype TYPE string.
  DATA rc TYPE sysubrc.
  DATA cx TYPE REF TO cx_enh_root.
  &quot; XML related DATA types
  DATA rootnode TYPE REF TO if_ixml_element.
  &quot; Object specific DATA types
  DATA badi_impls      TYPE enh_badi_impl_data_it.
  DATA hook_impls      TYPE ENH_HOOK_IMPL_IT.
  DATA impls_xml  TYPE string.
  DATA impls_ixml TYPE REF TO if_ixml_document.
  DATA impls_root TYPE REF TO if_ixml_element.
  DATA value TYPE string.
  DATA enh_include TYPE progname.
  DATA extension TYPE enhincludeextension.
  DATA enhobj    TYPE enhobj.
  FIELD-SYMBOLS &lt;fs_impls&gt; TYPE any.

  &quot; Set root object
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  rootnode-&gt;set_attribute(
    EXPORTING
      name      = me-&gt;enhancement_id &quot; NAME
      value     = objname          &quot; VALUE
  ).

  TRY.
    me-&gt;get_impl_tool( ).
    CATCH cx_enh_root INTO cx.
  ENDTRY.
  &quot; Read Shorttext of implementation
  me-&gt;get_shorttext( ).
  rootnode-&gt;set_attribute(
    EXPORTING
      name      = me-&gt;shorttext_id &quot; NAME
      value     = me-&gt;shorttext       &quot; VALUE
  ).

  &quot; set enhancement tool type
  value = enhtooltype.
  rootnode-&gt;set_attribute(
      EXPORTING
        name      = me-&gt;enhtooltype_id
        value     = value
    ).

  if enhtooltype eq cl_enh_tool_badi_impl=&gt;tooltype.  &quot; BADI implementation
    &quot; Enhancement Spot
    value = me-&gt;badiimpl_tool-&gt;get_spot_name( ).
    rootnode-&gt;set_attribute(
      EXPORTING
        name      = me-&gt;spot_name_id
        value     = value
    ).
    ASSIGN badi_impls to &lt;fs_impls&gt;.

  else. &quot;hook implementation

    ASSIGN hook_impls to &lt;fs_impls&gt;.
    CALL METHOD me-&gt;hookimpl_tool-&gt;get_original_object
      EXPORTING
        VERSION   = &apos;I&apos;
      IMPORTING
        PGMID     = me-&gt;pgmid
        OBJ_NAME  = me-&gt;obj_name
        OBJ_TYPE  = me-&gt;obj_type
        PROGRAM   = me-&gt;program.

     CONCATENATE me-&gt;pgmid    me-&gt;obj_name
                 me-&gt;obj_type me-&gt;program
     INTO value  SEPARATED BY &apos;-&apos;.

    rootnode-&gt;set_attribute(
      EXPORTING
        name      = me-&gt;orig_obj
        value     = value
    ).

  endif.

  &quot; Read implementations and transform to XML
  CALL METHOD ME-&gt;GET_IMPLEMENTATIONS
    IMPORTING
      R_IMPLEMENTATIONS = &lt;fs_impls&gt;.

  CALL TRANSFORMATION (`ID`)
  SOURCE impls = &lt;fs_impls&gt;
  RESULT XML impls_xml.

  impls_ixml = zsaplink=&gt;convertstringtoixmldoc( xmlstring = impls_xml ).
  impls_root = impls_ixml-&gt;get_root_element( ).

  rootnode-&gt;append_child( new_child = impls_root ).

* append root node to xmldoc
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  DATA cx  TYPE REF TO cx_root.
  DATA: msg      TYPE string.

  DATA _objtype TYPE string.
  DATA rootnode TYPE REF TO if_ixml_element.
  DATA ixml TYPE REF TO if_ixml.
  DATA impls_root TYPE REF TO if_ixml_node.
  DATA impls_ixml TYPE REF TO if_ixml_document.
  DATA impls_xml  TYPE string.
  DATA badi_impls      TYPE enh_badi_impl_data_it.
  DATA hook_impls      TYPE ENH_HOOK_IMPL_IT.
  DATA tool_type       TYPE enhtooltype.
  DATA class_not_active TYPE boolean.
  DATA enhobj TYPE string.
  DATA enhname   TYPE enhname.
  DATA enhcomp   TYPE enhcompositename.
  DATA enhref    TYPE REF TO if_enh_tool.

  FIELD-SYMBOLS: &lt;badiimpl&gt; LIKE LINE OF badi_impls.
  FIELD-SYMBOLS: &lt;hookimpl&gt; LIKE LINE OF hook_impls.
  FIELD-SYMBOLS &lt;fs_impls&gt; TYPE any.

  DATA: error_list TYPE REF TO cl_wb_checklist,
        error_tab  TYPE swbme_error_tab.
  FIELD-SYMBOLS: &lt;error&gt; LIKE LINE OF error_tab.
  FIELD-SYMBOLS: &lt;mtext&gt; LIKE LINE OF &lt;error&gt;-mtext.


  DATA:
  e_devclass               TYPE devclass,
  e_overwrite              TYPE seox_boolean.

  e_devclass = devclass.
  _objtype = getobjecttype( ).
  e_overwrite = overwrite.
  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  me-&gt;objname = rootnode-&gt;get_attribute( me-&gt;enhancement_id ).
  me-&gt;shorttext = rootnode-&gt;get_attribute( me-&gt;shorttext_id ).
  me-&gt;spot_name = rootnode-&gt;get_attribute( me-&gt;spot_name_id ).
  me-&gt;enhtooltype = tool_type = rootnode-&gt;get_attribute( me-&gt;enhtooltype_id ).
  enhobj = rootnode-&gt;get_attribute( me-&gt;orig_obj ).

  SPLIT enhobj AT &apos;-&apos;
   into me-&gt;pgmid    me-&gt;obj_name
        me-&gt;obj_type me-&gt;program.

  &quot; check if object exists
  TRY.
      me-&gt;get_impl_tool( &apos;X&apos; ).
    CATCH cx_root INTO cx.
  ENDTRY.

  IF me-&gt;badiimpl_tool IS BOUND   OR
     me-&gt;hookimpl_tool IS BOUND.
   IF overwrite         IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
   ELSE.
&quot; Delete existing object
        me-&gt;deleteobject( ).
   ENDIF.
  ENDIF.
  &quot; Read BAdI/HOOK Implementations from Slinkee
  impls_root = rootnode-&gt;get_first_child( ).
  ixml = cl_ixml=&gt;create( ).
  impls_ixml = ixml-&gt;create_document( ).
  impls_ixml-&gt;append_child( new_child = impls_root ).

  impls_xml = zsaplink=&gt;convertixmldoctostring( ixmldocument = impls_ixml ).

  if tool_type eq cl_enh_tool_badi_impl=&gt;tooltype.
     ASSIGN badi_impls to &lt;fs_impls&gt;.
  else.
    ASSIGN hook_impls to &lt;fs_impls&gt;.
  endif.

  CALL TRANSFORMATION (`ID`)
    SOURCE XML impls_xml
    RESULT impls = &lt;fs_impls&gt;.

  &quot; Create Implementation
  &quot; try create
  enhname = me-&gt;objname.
  &quot; Now create the new implementation
  TRY.
      CALL METHOD cl_enh_factory=&gt;create_enhancement
        EXPORTING
          enhname       = enhname
          enhtype       = cl_abstract_enh_tool_redef=&gt;credefinition
          enhtooltype   = tool_type
          compositename = enhcomp
        IMPORTING
          enhancement   = enhref
        CHANGING
*         TRKORR        =
          devclass      = e_devclass.
    CATCH cx_enh_root INTO cx.
      msg = cx-&gt;get_text( ).
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = msg.
  ENDTRY.

  if tool_type eq cl_enh_tool_badi_impl=&gt;tooltype.
    &quot; enhancement is of type BAdI
    CALL METHOD ME-&gt;SAVE_BADI_IMPL
      EXPORTING
        ENHREF     = enhref
        BADI_IMPLS = &lt;fs_impls&gt;.
  else.
    &quot; enhancement is of type hook
    CALL METHOD ME-&gt;SAVE_HOOK_IMPL
      EXPORTING
        ENHREF     = enhref
        HOOK_IMPLS = &lt;fs_impls&gt;.
  endif.
  &quot; successful install
  name = me-&gt;objname.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  DATA: badi_implementations TYPE enh_badi_impl_data_it.
  DATA: hook_implementations TYPE enh_hook_impl_it.

  if enhtooltype eq cl_enh_tool_badi_impl=&gt;tooltype.
    IF me-&gt;badiimpl_tool-&gt;if_enh_object~is_locked( ) NE abap_true.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = &apos;Enhancement Object is not locked&apos;.
    ENDIF.
    me-&gt;badiimpl_tool-&gt;if_enh_object~delete(
      EXPORTING
        nevertheless_delete = &apos;X&apos;   &quot; Enhancement Boolean
        run_dark            = &apos;X&apos;    &quot; Enhancement Boolean
    ).
    me-&gt;badiimpl_tool-&gt;if_enh_object~unlock( ).

  else.
    IF me-&gt;hookimpl_tool-&gt;if_enh_object~is_locked( ) NE abap_true.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = &apos;Enhancement Object is not locked&apos;.
    ENDIF.
    me-&gt;hookimpl_tool-&gt;if_enh_object~delete(
      EXPORTING
        nevertheless_delete = &apos;X&apos;   &quot; Enhancement Boolean
        run_dark            = &apos;X&apos;    &quot; Enhancement Boolean
    ).
    me-&gt;hookimpl_tool-&gt;if_enh_object~unlock( ).
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  objecttype = &apos;ENHO&apos;.  &quot; Enhancement Implementation

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="GET_IMPLEMENTATIONS" VERSION="1" LANGU="D" DESCRIPT="Read Enhanchement Implementations" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="GET_IMPLEMENTATIONS" SCONAME="R_IMPLEMENTATIONS" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <exception CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="GET_IMPLEMENTATIONS" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method GET_IMPLEMENTATIONS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/


  if enhtooltype eq cl_enh_tool_badi_impl=&gt;tooltype.
    CALL METHOD me-&gt;badiimpl_tool-&gt;get_implementations
      EXPORTING
        version            = &apos;I&apos;
      RECEIVING
        re_implementations = r_implementations.
  else.
    CALL METHOD me-&gt;hookimpl_tool-&gt;get_hook_impls
      EXPORTING
        version            = &apos;I&apos;
      RECEIVING
        enhancements = r_implementations.
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="GET_IMPL_TOOL" VERSION="1" LANGU="D" DESCRIPT="Read Implementation Tool" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="GET_IMPL_TOOL" SCONAME="I_LOCK" VERSION="1" LANGU="D" DESCRIPT="Boolean Variable (X=True, -=False, Space=Unknown)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BOOLEAN" PAROPTIONL="X"/>
   <exception CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="GET_IMPL_TOOL" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method GET_IMPL_TOOL.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  DATA cx  TYPE REF TO cx_enh_root.
  DATA msg TYPE string.

  DATA enhname   TYPE enhname.
  DATA enhspot   TYPE enhspotname.
  DATA enhref    TYPE REF TO if_enh_tool.
  DATA classname TYPE enhtoolclassname.

  enhname = objname.
  enhspot = objname.

  &quot; FREE: enhref, me-&gt;badiimpl_tool.

  TRY.
      enhref = cl_enh_factory=&gt;get_enhancement(
                 enhancement_id = enhname
                 lock           = i_lock
               ).

      &quot; Check that is is realy a BAdI or Hook
      enhtooltype = enhref-&gt;get_tool( ).
      if enhtooltype ne cl_enh_tool_badi_impl=&gt;tooltype and
         enhtooltype ne cl_enh_tool_hook_impl=&gt;tooltype.
         CONCATENATE &apos;The enhancement&apos; enhname &apos;is not a BAdI/Hook Implementation&apos; INTO msg SEPARATED BY space.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING
              textid = zcx_saplink=&gt;error_message
              msg    = msg.
      ENDIF.

    CATCH cx_enh_root INTO cx.
      msg = cx-&gt;get_text( ).
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;not_found
          object = objname.

  ENDTRY.

 &quot; convert based on type of enhancement
  if enhtooltype eq cl_enh_tool_badi_impl=&gt;tooltype.
    me-&gt;badiimpl_tool ?= enhref.
  else.
    me-&gt;hookimpl_tool ?= enhref.
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="GET_SHORTTEXT" VERSION="1" LANGU="D" DESCRIPT="Read Short text of Enhancement Implementations" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GET_SHORTTEXT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  if enhtooltype eq cl_enh_tool_badi_impl=&gt;tooltype.
    me-&gt;shorttext = me-&gt;badiimpl_tool-&gt;if_enh_object_docu~get_shorttext( ).
  else.
    me-&gt;shorttext = me-&gt;hookimpl_tool-&gt;if_enh_object_docu~get_shorttext( ).
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SAVE_BADI_IMPL" VERSION="1" LANGU="D" DESCRIPT="Save BAdi Implementation" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SAVE_BADI_IMPL" SCONAME="ENHREF" VERSION="1" LANGU="D" DESCRIPT="SAP Enhancement Tool Root Interface" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_ENH_TOOL"/>
   <parameter CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SAVE_BADI_IMPL" SCONAME="BADI_IMPLS" VERSION="1" LANGU="D" DESCRIPT="Table ENH_BADI_IMPL_DATA" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ENH_BADI_IMPL_DATA_IT"/>
   <exception CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SAVE_BADI_IMPL" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method SAVE_BADI_IMPL.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  DATA  class_not_active TYPE boolean.
  DATA: error_list TYPE REF TO cl_wb_checklist.
  DATA error_tab  TYPE swbme_error_tab.

  DATA  cx  TYPE REF TO cx_root.
  DATA: msg      TYPE string,
        msg_long TYPE string.

  FIELD-SYMBOLS: &lt;badiimpl&gt; LIKE LINE OF badi_impls.
  FIELD-SYMBOLS: &lt;error&gt; LIKE LINE OF error_tab.
  FIELD-SYMBOLS: &lt;mtext&gt; LIKE LINE OF &lt;error&gt;-mtext.

  me-&gt;badiimpl_tool ?= enhref.
  &quot; Set Enhancement Spot Name
  me-&gt;badiimpl_tool-&gt;set_spot_name( spot_name = me-&gt;spot_name ).

  me-&gt;badiimpl_tool-&gt;if_enh_object_docu~set_shorttext( me-&gt;shorttext ).

  LOOP AT badi_impls ASSIGNING &lt;badiimpl&gt;.
    &quot; The implementation can only be created when the
    &quot; implementing class is active
    CALL FUNCTION &apos;SEO_CLASS_EXISTENCE_CHECK&apos;
      EXPORTING
        clskey        = &lt;badiimpl&gt;-impl_class
      IMPORTING
        not_active    = class_not_active
      EXCEPTIONS
        not_specified = 1
        not_existing  = 2
        is_interface  = 3
        no_text       = 4
        inconsistent  = 5
        OTHERS        = 6.
    IF sy-subrc &lt;&gt; 0.
*     MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
    IF class_not_active = abap_true.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = &apos;Classes for Enhancement Implementations must be active&apos;.
    ENDIF.
    TRY.
        CALL METHOD badiimpl_tool-&gt;add_implementation
          EXPORTING
            im_implementation = &lt;badiimpl&gt;.
      CATCH cx_enh_root INTO cx.
        msg = cx-&gt;get_text( ).
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = msg.
    ENDTRY.
  ENDLOOP.

  TRY.
      &quot; Check if the object has still errors which would avoid saving
      me-&gt;badiimpl_tool-&gt;if_enh_object~check(
        EXPORTING
          version                = cl_enh_tool_badi_impl=&gt;inactive   &quot; ABAP: Program Status (Active, Saved, Transported...)
        CHANGING
          error_list             = error_list    &quot; List of All Error Messages from a Syntax Check
      ).

      error_list-&gt;get_error_messages(
        IMPORTING
          p_error_tab = error_tab    &quot; Error Message Table
      ).

      IF error_tab IS NOT INITIAL.
        LOOP AT error_tab ASSIGNING &lt;error&gt; WHERE mtype = &apos;E&apos;.
          LOOP AT &lt;error&gt;-mtext ASSIGNING &lt;mtext&gt;.
            CONCATENATE msg &lt;mtext&gt; &apos;;&apos; INTO msg.
          ENDLOOP.
        ENDLOOP.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = msg.
      ENDIF.

      &quot; Save
      me-&gt;badiimpl_tool-&gt;if_enh_object~save( run_dark = &apos;X&apos; ).
      &quot; Unlock
      me-&gt;badiimpl_tool-&gt;if_enh_object~unlock( ).
    CATCH cx_enh_root INTO cx.
      &quot; Unlock
      me-&gt;badiimpl_tool-&gt;if_enh_object~unlock( ).
      msg = cx-&gt;get_text( ).
      msg_long = cx-&gt;get_longtext( ).
      ROLLBACK WORK.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = msg.
  ENDTRY.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SAVE_HOOK_IMPL" VERSION="1" LANGU="D" DESCRIPT="Save Hook Implementation" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SAVE_HOOK_IMPL" SCONAME="ENHREF" VERSION="1" LANGU="D" DESCRIPT="SAP Enhancement Tool Root Interface" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_ENH_TOOL"/>
   <parameter CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SAVE_HOOK_IMPL" SCONAME="HOOK_IMPLS" VERSION="1" LANGU="D" DESCRIPT="Internal Table for ENH_HOOK_IMPL" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ENH_HOOK_IMPL_IT"/>
   <exception CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SAVE_HOOK_IMPL" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method SAVE_HOOK_IMPL.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  DATA  class_not_active TYPE boolean.

  DATA  cx  TYPE REF TO cx_root.
  DATA: msg      TYPE string,
        msg_long TYPE string.

  DATA  include TYPE progname.
  DATA  extension TYPE enhincludeextension.

  FIELD-SYMBOLS: &lt;hookimpl&gt; LIKE LINE OF hook_impls.

  me-&gt;hookimpl_tool ?= enhref.
  &quot; saving the enhancement include?
  CALL METHOD me-&gt;hookimpl_tool-&gt;get_hook_impls_include
    IMPORTING
      include   = include
      extension = extension.

  if include is initial or
     extension is initial.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = &apos;Enhancement include not saved&apos;.
  endif.

  TRY.
      &quot; Set orig object name
      CALL METHOD ME-&gt;HOOKIMPL_TOOL-&gt;SET_ORIGINAL_OBJECT
        EXPORTING
          PGMID    = me-&gt;pgmid
          OBJ_NAME = me-&gt;obj_name
          OBJ_TYPE = me-&gt;obj_type
          PROGRAM  = me-&gt;program.

    CATCH cx_enh_root INTO cx.
      msg = cx-&gt;get_text( ).
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = msg.
  ENDTRY.

  me-&gt;hookimpl_tool-&gt;if_enh_object_docu~set_shorttext( me-&gt;shorttext ).

  LOOP AT hook_impls ASSIGNING &lt;hookimpl&gt;.
    TRY.
        me-&gt;hookimpl_tool-&gt;add_hook_impl(
          overwrite = &lt;hookimpl&gt;-overwrite
          method =    &lt;hookimpl&gt;-method
          enhmode =   &lt;hookimpl&gt;-enhmode
          full_name = &lt;hookimpl&gt;-full_name
          source =    &lt;hookimpl&gt;-source
         ).

      CATCH cx_enh_root INTO cx.
        msg = cx-&gt;get_text( ).
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = msg.
    ENDTRY.
  ENDLOOP.

  TRY.
      &quot; Save
      me-&gt;hookimpl_tool-&gt;if_enh_object~save( run_dark = &apos;X&apos; ).
      &quot; Unlock
      me-&gt;hookimpl_tool-&gt;if_enh_object~unlock( ).
    CATCH cx_enh_root INTO cx.
      &quot; Unlock
      me-&gt;hookimpl_tool-&gt;if_enh_object~unlock( ).
      msg = cx-&gt;get_text( ).
      msg_long = cx-&gt;get_longtext( ).
      ROLLBACK WORK.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = msg.
  ENDTRY.

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_ENH_SPOT" VERSION="1" LANGU="D" DESCRIPT="SAPlink Enhancement Spot Plug-in" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" WITH_UNIT_TESTS="X" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*&quot;* use this source file for your ABAP unit test classes
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

CLASS ltcl_check_enh_spot DEFINITION FINAL FOR TESTING.
  &quot; DURATION SHORT
  &quot; RISK LEVEL HARMLESS
  &quot;#AU Duration Medium
  &quot;#AU Risk_Level Harmless
  PUBLIC SECTION.
    METHODS:
      check_010_non_existing   FOR TESTING RAISING cx_static_check,
      check_020_create_slinkee FOR TESTING RAISING cx_static_check.
  PRIVATE SECTION.
    DATA targetobject TYPE REF TO zsaplink.
    DATA ixml         TYPE REF TO if_ixml_document.
    DATA cx           TYPE REF TO cx_root.
    DATA msg  TYPE string.
    DATA name TYPE string.
    DATA devclass TYPE devclass.
    METHODS setup.
ENDCLASS.                    &quot;ltcl_check_enh_spot DEFINITION

*----------------------------------------------------------------------*
*       CLASS ltcl_check_enh_spot IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS ltcl_check_enh_spot IMPLEMENTATION.

  METHOD setup.
  ENDMETHOD.                    &quot;setup

  METHOD check_010_non_existing.
    name = &apos;ZDOES_NOT_EXIST&apos;.
    CREATE OBJECT targetobject
      TYPE zsaplink_enh_spot
      EXPORTING
        name = name.
    TRY.
        ixml = targetobject-&gt;createixmldocfromobject( ).
      CATCH zcx_saplink INTO cx.    &quot; SAPlink exception class
        msg = cx-&gt;get_text( ).
        cl_aunit_assert=&gt;assert_bound( act = cx msg = msg ).
    ENDTRY.

  ENDMETHOD.                    &quot;CHECK_CHECK_NON_EXISTING

  METHOD check_020_create_slinkee.
    DATA: xmlstring TYPE string.
    DATA: name_created TYPE string.
    name     = &apos;ZBPMAINTAIN_TEST&apos;.
    devclass = &apos;$TMP&apos;.
    CREATE OBJECT targetobject
      TYPE zsaplink_enh_spot
      EXPORTING
        name = name.
    TRY.
        ixml = targetobject-&gt;createixmldocfromobject( ).
      CATCH zcx_saplink INTO cx.    &quot; SAPlink exception class
        msg = cx-&gt;get_text( ).
        cl_aunit_assert=&gt;fail( msg = msg ).
    ENDTRY.
    cl_aunit_assert=&gt;assert_bound( act = ixml msg = &apos;iXML is not bound&apos; ).

    xmlstring = targetobject-&gt;convertixmldoctostring( ixmldocument = ixml ).

    FREE: ixml, cx.

    ixml = targetobject-&gt;convertstringtoixmldoc( xmlstring = xmlstring ).

    &quot; Test without overwrite
    TRY.

        targetobject-&gt;createobjectfromixmldoc(
          EXPORTING
            ixmldocument = ixml     &quot; IF_IXML_DOCUMENT
            devclass     = devclass &quot; Development class/package
*         overwrite    = overwrite    &quot; Overwrite original objects
*       RECEIVING
*         name         = name    &quot; Installed object name
        ).
      CATCH zcx_saplink INTO cx.    &quot; SAPlink exception class
        msg = cx-&gt;get_text( ).
        cl_aunit_assert=&gt;assert_bound( act = cx msg = msg ).
    ENDTRY.
    &quot; Test with overwrite
    TRY.
        name_created = targetobject-&gt;createobjectfromixmldoc(
            ixmldocument = ixml     &quot; IF_IXML_DOCUMENT
            devclass     = devclass &quot; Development class/package
            overwrite    = &apos;X&apos;      &quot; Overwrite original objects
        ).
        cl_aunit_assert=&gt;assert_equals(
            exp                  = name    &quot; Data Object with Expected Type
            act                  = name_created    &quot; Data Object with Current Value
        ).
      CATCH zcx_saplink INTO cx.    &quot; SAPlink exception class
        msg = cx-&gt;get_text( ).
        cl_aunit_assert=&gt;fail( msg = msg ).
    ENDTRY.
  ENDMETHOD.                    &quot;check_030_xml_string

ENDCLASS.                    &quot;ltcl_check_enh_spot IMPLEMENTATION</localTestClasses>
  <typeUsage CLSNAME="ZSAPLINK_ENH_SPOT" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_ENH_SPOT" TYPEGROUP="SEOP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_ENH_SPOT" TYPEGROUP="SEOR" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_ENH_SPOT" TYPEGROUP="SEOS" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_ENH_SPOT" TYPEGROUP="SEOT" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_ENH_SPOT" TYPEGROUP="SEOX" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <forwardDeclaration>SEOP</forwardDeclaration>
  <forwardDeclaration>SEOR</forwardDeclaration>
  <forwardDeclaration>SEOS</forwardDeclaration>
  <forwardDeclaration>SEOT</forwardDeclaration>
  <forwardDeclaration>SEOX</forwardDeclaration>
  <attribute CLSNAME="ZSAPLINK_ENH_SPOT" CMPNAME="BADIDEF_TOOL" VERSION="1" LANGU="D" DESCRIPT="Enhancement Tool BAdI" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="CL_ENH_TOOL_BADI_DEF" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_SPOT" CMPNAME="SHORTTEXT" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_SPOT" CMPNAME="SHORTTEXT_ID" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;shorttext&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_SPOT" CMPNAME="SPOT_NAME_ID" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;spot_name&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_ENH_SPOT" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_ENH_SPOT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_ENH_SPOT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_ENH_SPOT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_ENH_SPOT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_ENH_SPOT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  DATA cx  TYPE REF TO cx_root.

  TRY.
      me-&gt;get_badidef_tool( ).
      exists = &apos;X&apos;.
    CATCH cx_root INTO cx.
  ENDTRY.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/
  &quot; General DATA types
  DATA _objtype TYPE string.
  DATA rc TYPE sysubrc.
  DATA cx TYPE REF TO cx_enh_root.
  &quot; XML related DATA types
  DATA rootnode TYPE REF TO if_ixml_element.
  &quot; Object specific DATA types
  DATA impls      TYPE enh_badi_data_it.
  DATA impls_xml  TYPE string.
  DATA impls_ixml TYPE REF TO if_ixml_document.
  DATA impls_root TYPE REF TO if_ixml_element.
  DATA value TYPE string.
  FIELD-SYMBOLS &lt;impl&gt; LIKE LINE OF impls.

  &quot; Set root object
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  rootnode-&gt;set_attribute(
    EXPORTING
      name      = me-&gt;spot_name_id &quot; NAME
      value     = objname          &quot; VALUE
  ).

  me-&gt;get_badidef_tool( ).

  &quot; Read Shorttext
  me-&gt;shorttext = me-&gt;badidef_tool-&gt;if_enh_object_docu~get_shorttext( ).
  rootnode-&gt;set_attribute(
    EXPORTING
      name      = me-&gt;shorttext_id &quot; NAME
      value     = me-&gt;shorttext       &quot; VALUE
  ).

  &quot; Read implementations and transform to XML
  impls = me-&gt;get_implementations( ).
  CALL TRANSFORMATION (`ID`)
    SOURCE impls = impls
    RESULT XML impls_xml.

  impls_ixml = zsaplink=&gt;convertstringtoixmldoc( xmlstring = impls_xml ).
  impls_root = impls_ixml-&gt;get_root_element( ).

  rootnode-&gt;append_child( new_child = impls_root ).

* append root node to xmldoc
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  DATA cx  TYPE REF TO cx_root.
  DATA: msg      TYPE string,
        msg_long TYPE string.

  DATA _objtype TYPE string.
  DATA rootnode TYPE REF TO if_ixml_element.
  DATA ixml TYPE REF TO if_ixml.
  DATA impls_root TYPE REF TO if_ixml_node.
  DATA impls_ixml TYPE REF TO if_ixml_document.
  DATA impls_xml  TYPE string.
  DATA impls      TYPE enh_badi_data_it.
  DATA interface_not_active TYPE boolean.

  FIELD-SYMBOLS: &lt;impl&gt; LIKE LINE OF impls.

  DATA: error_list TYPE REF TO cl_wb_checklist,
        error_tab  TYPE swbme_error_tab.
  FIELD-SYMBOLS: &lt;error&gt; LIKE LINE OF error_tab.
  FIELD-SYMBOLS: &lt;mtext&gt; LIKE LINE OF &lt;error&gt;-mtext.


  DATA:
  e_devclass               TYPE devclass,
  e_overwrite              TYPE seox_boolean.

  e_devclass = devclass.
  _objtype = getobjecttype( ).
  e_overwrite = overwrite.
  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).
  me-&gt;objname = rootnode-&gt;get_attribute( me-&gt;spot_name_id ).
  me-&gt;shorttext = rootnode-&gt;get_attribute( me-&gt;shorttext_id ).

  &quot; check if object exists
  TRY.
      me-&gt;get_badidef_tool( &apos;X&apos; ).
    CATCH cx_root INTO cx.
  ENDTRY.

  IF me-&gt;badidef_tool IS BOUND AND
     overwrite         IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;existing.
  ENDIF.
  &quot; Read BAdI Definitionss from Slinkee
  impls_root = rootnode-&gt;get_first_child( ).

  ixml = cl_ixml=&gt;create( ).
  impls_ixml = ixml-&gt;create_document( ).
  impls_ixml-&gt;append_child( new_child = impls_root ).

  impls_xml = zsaplink=&gt;convertixmldoctostring( ixmldocument = impls_ixml ).

  CALL TRANSFORMATION (`ID`)
    SOURCE XML impls_xml
    RESULT impls = impls.

  &quot; Create Implementation
  &quot; try create
  DATA spot_name  TYPE enhspotname.
  DATA enhcomp   TYPE enhcompositename.
  DATA enhref    TYPE REF TO if_enh_spot_tool.
  &quot; Delete existing object
  IF me-&gt;badidef_tool IS BOUND.
    me-&gt;deleteobject( ).
  ENDIF.

  spot_name = me-&gt;objname.
  &quot; Now create the new implementation
  TRY.
      cl_enh_factory=&gt;create_enhancement_spot(
        EXPORTING
          spot_name     = spot_name    &quot; Name (ID) of an Enhancement Spot
          tooltype      = cl_enh_tool_badi_def=&gt;tooltype   &quot; Enhancement Spot Tool
          compositename = enhcomp
        IMPORTING
          spot          = enhref   &quot; SAP Enhancement Tool Root Interface
        CHANGING
*          trkorr        = trkorr    &quot; Request/Task
          devclass      = e_devclass
      ).
    CATCH cx_enh_root INTO cx.
      msg = cx-&gt;get_text( ).
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = msg.
  ENDTRY.

  &quot; enhancement is of type BAdI, so convert
  me-&gt;badidef_tool ?= enhref.
  &quot; Set Enhancement Spot Name

  me-&gt;badidef_tool-&gt;if_enh_object_docu~set_shorttext( me-&gt;shorttext ).

  LOOP AT impls ASSIGNING &lt;impl&gt;.
    &quot; The implementation can only be created when the
    &quot; implementing class is active
    CALL FUNCTION &apos;SEO_INTERFACE_EXISTENCE_CHECK&apos;
      EXPORTING
        intkey        = &lt;impl&gt;-interface_name
      IMPORTING
        not_active    = interface_not_active
      EXCEPTIONS
        not_specified = 1
        not_existing  = 2
        is_class      = 3
        no_text       = 4
        inconsistent  = 5
        OTHERS        = 6.
    IF sy-subrc &lt;&gt; 0.
*     MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    IF interface_not_active = abap_true.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = &apos;Classes for Enhancement Implementations must be active&apos;.
    ENDIF.
    TRY.
      badidef_tool-&gt;add_badi_def( &lt;impl&gt; ).
      CATCH cx_enh_root INTO cx.
        msg = cx-&gt;get_text( ).
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = msg.
    ENDTRY.
  ENDLOOP.

  TRY.
      &quot; Check if the object has still errors which would avoid saving
      me-&gt;badidef_tool-&gt;if_enh_object~check(
        EXPORTING
          version                = cl_enh_tool_badi_impl=&gt;inactive   &quot; ABAP: Program Status (Active, Saved, Transported...)
        CHANGING
          error_list             = error_list    &quot; List of All Error Messages from a Syntax Check
      ).
      error_list-&gt;get_error_messages(
        IMPORTING
          p_error_tab = error_tab    &quot; Error Message Table
      ).
      IF error_tab IS NOT INITIAL.
        LOOP AT error_tab ASSIGNING &lt;error&gt; WHERE mtype = &apos;E&apos;.
          LOOP AT &lt;error&gt;-mtext ASSIGNING &lt;mtext&gt;.
            CONCATENATE msg &lt;mtext&gt; &apos;;&apos; INTO msg.
          ENDLOOP.
        ENDLOOP.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = msg.
      ENDIF.

      &quot; Save
      me-&gt;badidef_tool-&gt;if_enh_object~save( ).
      &quot; Unlock
      me-&gt;badidef_tool-&gt;if_enh_object~unlock( ).
    CATCH cx_enh_root INTO cx.
      &quot; Unlock
      me-&gt;badidef_tool-&gt;if_enh_object~unlock( ).
      msg = cx-&gt;get_text( ).
      msg_long = cx-&gt;get_longtext( ).
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = msg.
  ENDTRY.
  &quot; successful install
  name = me-&gt;objname.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  DATA: implementations TYPE enh_badi_data_it.
  FIELD-SYMBOLS: &lt;impl&gt; LIKE LINE OF implementations.
  &quot; First delete implementation
  implementations = me-&gt;get_implementations( ).

  IF me-&gt;badidef_tool-&gt;if_enh_object~is_locked( ) NE abap_true.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = &apos;Enhancement Object is not locked&apos;.
  ENDIF.

  &quot; And now the Enhancement itself
  me-&gt;badidef_tool-&gt;if_enh_object~delete(
    EXPORTING
      nevertheless_delete = &apos;X&apos;   &quot; Enhancement Boolean
      run_dark            = &apos;X&apos;    &quot; Enhancement Boolean
  ).
  me-&gt;badidef_tool-&gt;if_enh_object~unlock( ).

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  objecttype = &apos;ENHS&apos;.  &quot; Enhancement Spot

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_ENH_SPOT" CMPNAME="GET_BADIDEF_TOOL" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_ENH_SPOT" CMPNAME="GET_BADIDEF_TOOL" SCONAME="I_LOCK" VERSION="1" LANGU="D" DESCRIPT="Boolean Variable (X=True, -=False, Space=Unknown)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BOOLEAN" PAROPTIONL="X"/>
   <exception CLSNAME="ZSAPLINK_ENH_SPOT" CMPNAME="GET_BADIDEF_TOOL" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method GET_BADIDEF_TOOL.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  DATA cx  TYPE REF TO cx_enh_root.
  DATA msg TYPE string.

  DATA spot_name     TYPE enhspotname.
  DATA enhref        TYPE REF TO IF_ENH_SPOT_TOOL.

  spot_name = objname.

  &quot; FREE: enhref, me-&gt;badiimpl_tool.

  TRY.
      enhref = cl_enh_factory=&gt;get_enhancement_spot(
                 spot_name      = spot_name
                 lock           = i_lock
               ).
      &quot; Check that is is realy a BAdI
      IF enhref-&gt;get_tool( ) &lt;&gt; cl_enh_tool_badi_def=&gt;tooltype.
        CONCATENATE &apos;The enhancement&apos; spot_name &apos;is not a BAdI Definition&apos; INTO msg SEPARATED BY space.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = msg.
      ENDIF.

    CATCH cx_enh_root INTO cx.
      msg = cx-&gt;get_text( ).
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;not_found
          object = objname.
  ENDTRY.

  &quot; enhancement is of type BAdI, so convert
  me-&gt;badidef_tool ?= enhref.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_ENH_SPOT" CMPNAME="GET_IMPLEMENTATIONS" VERSION="1" LANGU="D" DESCRIPT="Read Enhancement Implementations" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_ENH_SPOT" CMPNAME="GET_IMPLEMENTATIONS" SCONAME="R_DEFINITIONS" VERSION="1" LANGU="D" DESCRIPT="Table ENH_BADI_IMPL_DATA" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ENH_BADI_DATA_IT"/>
   <exception CLSNAME="ZSAPLINK_ENH_SPOT" CMPNAME="GET_IMPLEMENTATIONS" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method GET_IMPLEMENTATIONS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  r_definitions = me-&gt;badidef_tool-&gt;get_badi_defs( im_version = &apos;A&apos; ).

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_INTERFACE" VERSION="1" LANGU="D" DESCRIPT="SapLink Interface" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZSAPLINK_INTERFACE" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_INTERFACE" TYPEGROUP="SEOO" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_INTERFACE" TYPEGROUP="SEOR" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_INTERFACE" TYPEGROUP="SEOS" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_INTERFACE" TYPEGROUP="SEOT" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <forwardDeclaration>SEOO</forwardDeclaration>
  <forwardDeclaration>SEOR</forwardDeclaration>
  <forwardDeclaration>SEOS</forwardDeclaration>
  <forwardDeclaration>SEOT</forwardDeclaration>
  <attribute CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="XML_KEY_ATTRIBUTE" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="&apos;attribute&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="XML_KEY_EVENTS" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;events&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="XML_KEY_EXCEPTION" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;exception&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="XML_KEY_INCLUDE" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="8 " ATTDECLTYP="2" ATTVALUE="&apos;include&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="XML_KEY_METHOD" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;method&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="XML_KEY_PARAMETER" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;parameter&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="XML_KEY_TYPES" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="7 " ATTDECLTYP="2" ATTVALUE="&apos;types&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="XML_KEY_TYPEUSAGE" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="6 " ATTDECLTYP="2" ATTVALUE="&apos;typeUsage&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_INTERFACE" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_INTERFACE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_INTERFACE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_INTERFACE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_INTERFACE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATESTRINGFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_INTERFACE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_INTERFACE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

data intkey type SEOCLSKEY.
data not_active TYPE  char1.

  intkey-clsName = objname.

  CALL FUNCTION &apos;SEO_INTERFACE_EXISTENCE_CHECK&apos;
    EXPORTING
      intkey              = intkey
    IMPORTING
      not_active    = not_active
    EXCEPTIONS
*     NOT_SPECIFIED       = 1
     NOT_EXISTING        = 2
*     IS_CLASS            = 3
*     NO_TEXT             = 4
*     INCONSISTENT        = 5
*     OTHERS              = 6
            .
  IF sy-subrc &lt;&gt; 2.
    exists = &apos;X&apos;.
  endif.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  data intfsection type ref to if_ixml_element.
  data rootnode type ref to if_ixml_element.
  data _classname type seoclsname.
  data rc type sysubrc.
  data intfdescr type ref to cl_abap_intfdescr.
  data typedescr type ref to cl_abap_typedescr.
  data classkey type seoclskey.
  data intproperties type vseointerf.
  data _objtype type string.

  _classname = objname.
  classkey-clsname = objname.

  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  call function &apos;SEO_INTERFACE_GET&apos;
    EXPORTING
      intkey       = classkey
      version      = &apos;1&apos;
    IMPORTING
      interface    = intproperties
    EXCEPTIONS
      not_existing = 1
      deleted      = 2
      is_class     = 3
      model_only   = 4
      others       = 5.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 1.
        raise exception type zcx_SAPlink
          exporting textid = zcx_SAPlink=&gt;not_found.
      when 2.
        raise exception type zcx_SAPlink
          exporting
            textid = zcx_SAPlink=&gt;error_message
            msg = &apos;interface deleted&apos;.
      when 3.
        raise exception type zcx_SAPlink
          exporting
            textid = zcx_SAPlink=&gt;error_message
            msg = &apos;classes not supported&apos;.
      when 4.
        raise exception type zcx_SAPlink
          exporting
            textid = zcx_SAPlink=&gt;error_message
            msg = &apos;interface is modeled only&apos;.
    endcase.
  endif.

  setattributesfromstructure( node = rootnode
                         structure = intproperties ).

  try.
      call method cl_abap_intfdescr=&gt;describe_by_name
        EXPORTING
          p_name         = objname
        RECEIVING
          p_descr_ref    = typedescr
        EXCEPTIONS
          type_not_found = 1.
      if sy-subrc = 0.
        intfdescr ?= typedescr.
      endif.
    catch cx_root.
      raise exception type zcx_SAPlink
        exporting textid = zcx_SAPlink=&gt;system_error.
  endtry.

*Add included interfaces to the xml document
  CALL METHOD ME-&gt;EXPORT_INTERFACES
    EXPORTING
      CLASSKEY = classkey
    IMPORTING
      RC       = rc
    CHANGING
      ROOTNODE = rootnode.

*Add types to the xml document
  CALL METHOD me-&gt;EXPORT_TYPES
    EXPORTING
      CLASSKEY = classkey
    CHANGING
      RC       = rc
      ROOTNODE = rootnode.

*Add typegroups to the xml document
  CALL METHOD me-&gt;EXPORT_TYPEGROUPS
    EXPORTING
      CLASSKEY = classkey
    CHANGING
      RC       = rc
      ROOTNODE = rootnode.

*Add events to the xml document
  CALL METHOD me-&gt;EXPORT_EVENTS
    EXPORTING
      CLASSKEY = classkey
    CHANGING
      RC       = rc
      ROOTNODE = rootnode.

*Add attributes to the xml document
  CALL METHOD me-&gt;EXPORT_ATTRIBUTES
    EXPORTING
      INTFDESCR = intfdescr
    CHANGING
      RC        = rc
      ROOTNODE  = rootnode.

*Add methods to the xml document
  CALL METHOD me-&gt;EXPORT_METHODS
    EXPORTING
      INTFDESCR = intfdescr
      CLASSNAME = _CLASSNAME
    CHANGING
      RC        = rc
      ROOTNODE  = rootnode.

* append root node to xmldoc
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  data rootnode type ref to if_ixml_element.
  data classkey type seoclskey.
  data not_active type boolean.
  data _devclass type devclass.
  data _objtype type string.
  data checkexists type flag.

  data: e_corrnr                 type TRKORR,
        e_devclass               type DEVCLASS,
        e_version                type SEOVERSION,
        e_genflag                type GENFLAG,
        e_authority_check        type SEOX_BOOLEAN,
        e_overwrite              type SEOX_BOOLEAN.

  data: i_korrnr type trkorr.

  data: ch_interface type VSEOINTERF,
        ch_comprisings type SEOR_COMPRISINGS_R,
        ch_attributes type SEOO_ATTRIBUTES_R,
        ch_methods type SEOO_METHODS_R,
        ch_events type SEOO_EVENTS_R,
        ch_parameters type SEOS_PARAMETERS_R,
        ch_exceps type SEOS_EXCEPTIONS_R,
        ch_typeusages type SEOT_TYPEPUSAGES_R,
        ch_types type SEOO_TYPES_R.

  call function &apos;SEO_BUFFER_INIT&apos;.

  e_devclass = devclass.
  _objtype = getobjecttype( ).
  e_overwrite = overwrite.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  call method getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = ch_interface.

  checkexists = checkexists( ).
  if checkexists is not initial.
    if overwrite is initial.
      raise exception type zcx_SAPlink
        exporting textid = zcx_SAPlink=&gt;existing.
    else.
*     delete object for new install
      deleteobject( ).
    endif.
  endif.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 1.
        raise exception type zcx_SAPlink
          exporting textid = zcx_SAPlink=&gt;not_authorized.
      when others.
        raise exception type zcx_SAPlink
          exporting textid = zcx_SAPlink=&gt;system_error.
    endcase.
  endif.

*Add attributes to new interface
  call method import_attributes
    CHANGING
      ch_attributes = ch_attributes.

*Add includes
  call method import_interfaces
    CHANGING
      ch_comprisings = ch_comprisings.

*Add types and type groups
  call method import_types
    CHANGING
      ch_types      = ch_types
      ch_typeusages = ch_typeusages.

*Add events and event parameters
  call method import_events
    CHANGING
      ch_events     = ch_events
      ch_parameters = ch_parameters.

*Add methods, method parameters and method exceptions
  call method import_methods
    CHANGING
      ch_methods    = ch_methods
      ch_parameters = ch_parameters
      ch_exceps     = ch_exceps.

*Create the interface
  CALL FUNCTION &apos;SEO_INTERFACE_CREATE_COMPLETE&apos;
   EXPORTING
    CORRNR                             = e_corrnr
    DEVCLASS                           = e_devclass
    VERSION                            = e_version
    GENFLAG                            = e_genflag
    AUTHORITY_CHECK                    = e_authority_check
    OVERWRITE                          = e_overwrite
*     SUPPRESS_REFACTORING_SUPPORT       = SEOX_TRUE
   IMPORTING
    KORRNR                             = i_korrnr
* TABLES
*   CLASS_DESCRIPTIONS                 =
*   COMPONENT_DESCRIPTIONS             =
*   SUBCOMPONENT_DESCRIPTIONS          =
   CHANGING
    INTERFACE                          = ch_interface
    COMPRISINGS                        = ch_comprisings
    ATTRIBUTES                         = ch_attributes
    METHODS                            = ch_methods
    EVENTS                             = ch_events
    PARAMETERS                         = ch_parameters
    EXCEPS                             = ch_exceps
*   ALIASES                            =
    TYPEPUSAGES                        = ch_typeusages
*   CLSDEFERRDS                        =
*   INTDEFERRDS                        =
    TYPES                              = ch_types
   EXCEPTIONS
    EXISTING                           = 1
    IS_CLASS                           = 2
    DB_ERROR                           = 3
    COMPONENT_ERROR                    = 4
    NO_ACCESS                          = 5
    OTHER                              = 6
    OTHERS                             = 7.

  case sy-subrc.
    when &apos;0&apos;.
** i guess if we made it this far, we will assume
** successful install
      name = objname.
    when &apos;1&apos;.
      RAISE EXCEPTION TYPE zcx_SAPlink
        EXPORTING textid = zcx_SAPlink=&gt;existing.
    when others.
      raise exception type zcx_SAPlink
        exporting textid = zcx_SAPlink=&gt;system_error.
  endcase.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATESTRINGFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATESTRINGFROMOBJECT.
**TRY.
*SUPER-&gt;CREATESTRINGFROMOBJECT(
*  RECEIVING
*    STRING =
*       ).
** CATCH zcx_saplink .
**ENDTRY.
  endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  DATA clskey TYPE seoclskey.
  clskey-clsname = objname.

  CALL FUNCTION &apos;SEO_INTERFACE_GET&apos;
    EXPORTING
      INTKEY       = clskey
      VERSION      = SEOC_VERSION_INACTIVE
      STATE        = &apos;0&apos;
    EXCEPTIONS
      NOT_EXISTING = 1
      DELETED      = 2
      IS_CLASS     = 3
      MODEL_ONLY   = 4
      OTHERS       = 5.

  IF SY-SUBRC &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_SAPlink
      EXPORTING
        textid = zcx_SAPlink=&gt;error_message
        msg = &apos;interface not deleted&apos;.
  ENDIF.

  CALL FUNCTION &apos;SEO_INTERFACE_DELETE_W_DEPS&apos;
    EXPORTING
      intkey       = clskey
      save         = &apos; &apos;
    EXCEPTIONS
      not_existing = 1
      is_class     = 2
      not_deleted  = 3
      db_error     = 4
      OTHERS       = 5.

  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE zcx_SAPlink
          EXPORTING textid = zcx_SAPlink=&gt;not_found.
      WHEN 2.
        RAISE EXCEPTION TYPE zcx_SAPlink
          EXPORTING
            textid = zcx_SAPlink=&gt;error_message
            msg = &apos;class not supported&apos;.
      WHEN 3.
        RAISE EXCEPTION TYPE zcx_SAPlink
          EXPORTING
            textid = zcx_SAPlink=&gt;error_message
            msg = &apos;interface not deleted&apos;.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_SAPlink
          EXPORTING textid = zcx_SAPlink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;SEO_CLIF_SAVE_ALL&apos;
    EXPORTING
      CIFKEY        = clskey
*      CHANGING
*        CORRNR        = corrnr
    EXCEPTIONS
      NOT_EXISTING  = 1
      NOTHING_TO_DO = 2
      ACCESS_ERROR  = 3
      DB_ERROR      = 4
      OTHERS        = 5.
  IF SY-SUBRC &lt;&gt; 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_ATTRIBUTES" VERSION="1" LANGU="D" DESCRIPT="Adds attributes to the xml document" EXPOSURE="0" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_ATTRIBUTES" SCONAME="INTFDESCR" VERSION="1" LANGU="D" DESCRIPT="Runtime Type Services" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="CL_ABAP_INTFDESCR"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_ATTRIBUTES" SCONAME="RC" VERSION="1" LANGU="D" DESCRIPT="Return Value of ABAP Statements" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SYSUBRC"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_ATTRIBUTES" SCONAME="ROOTNODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method EXPORT_ATTRIBUTES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  data: attribkey type seocmpkey,
        attribdescr type abap_attrdescr,
        attribnode type ref to if_ixml_element,
        attribproperties type vseoattrib,
        _otrguid type sotr_conc,
        otrnode type ref to if_ixml_element.

  attribkey-clsname = objname.
  loop at intfdescr-&gt;attributes into attribdescr where is_inherited =
  abap_false.
    attribnode = xmldoc-&gt;create_element( XML_KEY_ATTRIBUTE ).
    attribkey-cmpname = attribdescr-name.
    call function &apos;SEO_ATTRIBUTE_GET&apos;
      EXPORTING
        attkey    = attribkey
      IMPORTING
        attribute = attribproperties.

*   include OTR if necessary (for exception classes)
    if attribproperties-type = &apos;SOTR_CONC&apos; and attribproperties-attvalue
    is not initial.
      _otrguid = attribproperties-attvalue+1(32).
      otrnode = createnodefromotr( _otrguid ).
      if otrnode is bound.
        rc = attribnode-&gt;append_child( otrnode ).
      endif.
    endif.

*   append attribute node to parent node
    setattributesfromstructure( node = attribnode structure =
    attribproperties ).
    rc = rootnode-&gt;append_child( attribnode ).
  endloop.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_EVENTS" VERSION="1" LANGU="D" DESCRIPT="Adds events to the xml document" EXPOSURE="0" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_EVENTS" SCONAME="CLASSKEY" VERSION="1" LANGU="D" DESCRIPT="Key structure of a class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOCLSKEY"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_EVENTS" SCONAME="RC" VERSION="1" LANGU="D" DESCRIPT="Return Value of ABAP Statements" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SYSUBRC"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_EVENTS" SCONAME="ROOTNODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method EXPORT_EVENTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  DATA: events      TYPE SEOO_EVENTS_R,
        wa_event    LIKE LINE OF events,
        eventkey    type SEOCMPKEY,
        eventparams type seos_parameters_r,
        wa_params   type seos_parameter_r,
        event_node  TYPE REF TO if_ixml_element,
        parameternode type ref to if_ixml_element.

  CALL FUNCTION &apos;SEO_EVENT_READ_ALL&apos;
    EXPORTING
      cifkey            = classkey
      version           = 1
    IMPORTING
      events            = events
    EXCEPTIONS
      clif_not_existing = 1
      OTHERS            = 2.

  IF sy-subrc &lt;&gt; 0.
  ENDIF.

  LOOP AT events INTO wa_event.
    eventkey-clsname = wa_event-clsname.
    eventkey-cmpname = wa_event-CMPNAME.
    event_node = xmldoc-&gt;create_element( XML_KEY_EVENTS ).
    setattributesfromstructure( node = event_node structure =
    wa_event ).
    CALL FUNCTION &apos;SEO_EVENT_SIGNATURE_GET&apos;
      EXPORTING
        EVTKEY     = eventkey
      IMPORTING
        PARAMETERS = eventparams.
*   event parameters
    loop at eventParams into wa_params.

      parameternode = xmldoc-&gt;create_element( XML_KEY_PARAMETER ).
      setattributesfromstructure( node = parameternode
      structure = wa_params ).
      rc = event_node-&gt;append_child( parameternode ).
    ENDLOOP.
    rc = rootnode-&gt;append_child( event_node ).
  ENDLOOP.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_INTERFACES" VERSION="1" LANGU="D" DESCRIPT="Adds included interfaces to the xml document" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_INTERFACES" SCONAME="CLASSKEY" VERSION="1" LANGU="D" DESCRIPT="Key structure of a class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOCLSKEY"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_INTERFACES" SCONAME="RC" VERSION="1" LANGU="D" DESCRIPT="Return Value of ABAP Statements" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="SYSUBRC"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_INTERFACES" SCONAME="ROOTNODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method EXPORT_INTERFACES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  DATA: it_vseocompri type table of VSEOCOMPRI,
        wa_vseocompri like line of it_vseocompri,
        implementingNode TYPE REF TO if_ixml_element,
        objname type VRSD-OBJNAME.

  objname = classkey.

  CALL FUNCTION &apos;SVRS_GET_VERSION_INTF_40&apos;
    EXPORTING
*   DESTINATION                        =
      OBJECT_NAME                        = objname
      VERSNO                             = &apos;00000&apos;
*   IV_NO_RELEASE_TRANSFORMATION       =
* IMPORTING
*   INFO_LINE                          =
  TABLES
*   VSMODISRC                          =
*   PSEOALIASES                        =
*   PVSEOATTRIB                        =
      PVSEOCOMPRI                        = it_vseocompri
*   PVSEOEVENT                         =
*   PVSEOEXCEP                         =
*   PVSEOINTERF                        =
*   PSMODILOG                          =
*   PVSEOMETHOD                        =
*   PVSEOPARAM                         =
*   PPOOL_SOURCE                       =
*   PSOURCE                            =
*   PTRDIR                             =
*   TYPE_TAB                           =
*   PSEOTYPEPLS                        =
  EXCEPTIONS
    NO_VERSION                         = 1
    SYSTEM_FAILURE                     = 2
    COMMUNICATION_FAILURE              = 3
    OTHERS                             = 4
            .
  IF SY-SUBRC &lt;&gt; 0.
  ENDIF.

  LOOP AT it_vseocompri INTO wa_vseocompri.
    implementingNode = xmldoc-&gt;create_element( XML_KEY_INCLUDE ).
    setattributesfromstructure( node = implementingNode structure =
    wa_vseocompri ).
    rc = rootnode-&gt;append_child( implementingNode ).
  ENDLOOP.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_METHODS" VERSION="1" LANGU="D" DESCRIPT="Adds methods to the xml document" EXPOSURE="0" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_METHODS" SCONAME="INTFDESCR" VERSION="1" LANGU="D" DESCRIPT="Runtime Type Services" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="CL_ABAP_INTFDESCR"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_METHODS" SCONAME="CLASSNAME" VERSION="1" LANGU="D" DESCRIPT="Object Type Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOCLSNAME"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_METHODS" SCONAME="RC" VERSION="1" LANGU="D" DESCRIPT="Return Value of ABAP Statements" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SYSUBRC"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_METHODS" SCONAME="ROOTNODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method EXPORT_METHODS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  data: methoddescr type abap_methdescr,
        methodkey type seocpdkey,
        clsmethkey type seocmpkey,
        methodproperties type vseomethod,
        paramdescr type abap_parmdescr,
        paramproperties type vseoparam,
        paramkey type seoscokey,
        exceptionlist type seos_exceptions_r,
        anexception type vseoexcep,
        exceptionnode type ref to if_ixml_element,
        parameternode type ref to if_ixml_element,
        methodnode type ref to if_ixml_element.

  loop at intfdescr-&gt;methods into methoddescr where
  not ( is_inherited = &apos;X&apos; and is_redefined is initial ).
    methodkey-clsname = classname.
    methodkey-cpdname = methoddescr-name.

    clsmethkey-clsname = classname.
    clsmethkey-cmpname = methoddescr-name.
    clear methodproperties.

    call function &apos;SEO_METHOD_GET&apos;
      EXPORTING
        mtdkey       = clsmethkey
      IMPORTING
        method       = methodproperties
      EXCEPTIONS
        not_existing = 1.
    if sy-subrc = 0.
      methodnode = xmldoc-&gt;create_element( XML_KEY_METHOD ).
      setattributesfromstructure( node = methodnode structure =
      methodproperties ).

*add method parameters only when not an alias
      if methoddescr-alias_for eq &apos;&apos;.

        loop at methoddescr-parameters into paramdescr.
          clear paramproperties.
          parameternode = xmldoc-&gt;create_element( XML_KEY_PARAMETER ).
          paramkey-cmpname = clsmethkey-cmpname.
          paramkey-sconame = paramdescr-name.
          paramkey-clsname = objname.
          call function &apos;SEO_PARAMETER_GET&apos;
            EXPORTING
              parkey    = paramkey
              version   = &apos;1&apos;
            IMPORTING
              parameter = paramproperties.
          setattributesfromstructure( node = parameternode
          structure = paramproperties ).
          rc = methodnode-&gt;append_child( parameternode ).
        endloop.

      endif.

*add method exceptions
      call function &apos;SEO_METHOD_SIGNATURE_GET&apos;
        EXPORTING
          mtdkey  = clsmethkey
          version = &apos;1&apos;
        IMPORTING
          exceps  = exceptionlist.
      loop at exceptionlist into anexception.
        exceptionnode = xmldoc-&gt;create_element( XML_KEY_EXCEPTION ).
        setattributesfromstructure( node = exceptionnode
        structure = anexception ).
        rc = methodnode-&gt;append_child( exceptionnode ).
      endloop.
    endif. &quot;method found
    rc = rootnode-&gt;append_child( methodnode ).
  endloop.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_TYPEGROUPS" VERSION="1" LANGU="D" DESCRIPT="Adds typegroups to the xml document" EXPOSURE="0" STATE="1" EDITORDER="11 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_TYPEGROUPS" SCONAME="CLASSKEY" VERSION="1" LANGU="D" DESCRIPT="Key structure of a class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOCLSKEY"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_TYPEGROUPS" SCONAME="RC" VERSION="1" LANGU="D" DESCRIPT="Return Value of ABAP Statements" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SYSUBRC"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_TYPEGROUPS" SCONAME="ROOTNODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method EXPORT_TYPEGROUPS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  data: forwarddeclarationlist type seot_typepusages_r,
        forwarddeclaration type ref to if_ixml_element,
        forwarddeclarationrow type seot_typepusage_r.

  call function &apos;SEO_TYPEPUSAGE_READ_ALL&apos;
    EXPORTING
      cifkey      = classkey
      version     = &apos;1&apos;
    IMPORTING
      typepusages = forwarddeclarationlist.

*comment rrq old way....forwardDeclarations the only attribute
*set was the &quot;TypeGroup&quot;
*the new way....the entire structure is passed as in node typeUsage
  LOOP AT forwarddeclarationlist INTO forwarddeclarationrow.
    forwarddeclaration = xmldoc-&gt;create_element( XML_KEY_TYPEUSAGE ).
    setattributesfromstructure( node = forwarddeclaration structure =
    forwarddeclarationrow ).
    rc = rootnode-&gt;append_child( forwarddeclaration ).
  ENDLOOP.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_TYPES" VERSION="1" LANGU="D" DESCRIPT="Adds types to the xml document" EXPOSURE="0" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_TYPES" SCONAME="CLASSKEY" VERSION="1" LANGU="D" DESCRIPT="Key structure of a class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOCLSKEY"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_TYPES" SCONAME="RC" VERSION="1" LANGU="D" DESCRIPT="Return Value of ABAP Statements" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SYSUBRC"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_TYPES" SCONAME="ROOTNODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method EXPORT_TYPES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  data: types      type seoo_types_r,
      wa_type    like line of types,
      types_node type ref to if_ixml_element.

  call function &apos;SEO_TYPE_READ_ALL&apos;
    EXPORTING
      cifkey            = classkey
      version           = 1
    IMPORTING
      types             = types
    EXCEPTIONS
      clif_not_existing = 1
      others            = 2.

  if sy-subrc &lt;&gt; 0.
  endif.

  loop at types into wa_type.
    types_node = xmldoc-&gt;create_element( XML_KEY_TYPES ).
    setattributesfromstructure( node = types_node structure =
    wa_type ).
    rc = rootnode-&gt;append_child( types_node ).
  endloop.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  objecttype = &apos;INTF&apos;.  &quot;Interface

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_ATTRIBUTES" VERSION="1" LANGU="D" DESCRIPT="Imports attributes from the xml document" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_ATTRIBUTES" SCONAME="CH_ATTRIBUTES" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOO_ATTRIBUTES_R"/>
   <exception CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_ATTRIBUTES" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method IMPORT_ATTRIBUTES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  data: otrConcept type SOTR_TEXT-CONCEPT,
        wa_attributes like line of ch_attributes,
        filter type ref to if_ixml_node_filter,
        iterator type ref to if_ixml_node_iterator,
        node type ref to if_ixml_element,
        otrnode type ref to if_ixml_element.

  filter = xmldoc-&gt;create_filter_name( XML_KEY_ATTRIBUTE ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
*   create OTR texts if necessary (for exception classes)
    clear otrConcept.
    otrnode = node-&gt;find_from_name( &apos;sotr&apos; ).
    IF otrnode IS NOT INITIAL.
      me-&gt;createotrfromnode(
        exporting node = otrnode
        importing concept = otrConcept ).
    ENDIF.
    clear wa_attributes.
*   create attribute
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_attributes.
    wa_attributes-version = &apos;0&apos;.
*   ewH:issue33--&gt;6.40 and above, must create new concept
    if otrConcept is not initial.
      concatenate `&apos;` otrConcept `&apos;` into wa_attributes-attvalue.
    endif.
    append wa_attributes to ch_attributes.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_EVENTS" VERSION="1" LANGU="D" DESCRIPT="Imports events from the xml document" EXPOSURE="0" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_EVENTS" SCONAME="CH_EVENTS" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOO_EVENTS_R"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_EVENTS" SCONAME="CH_PARAMETERS" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOS_PARAMETERS_R"/>
   <source>method IMPORT_EVENTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  data: event_filter type ref to if_ixml_node_filter,
        parameter_filter type ref to if_ixml_node_filter,
        event_iterator type ref to if_ixml_node_iterator,
        parameter_iterator type ref to if_ixml_node_iterator,
        event_node type ref to if_ixml_element,
        parameter_node type ref to if_ixml_element,
        wa_events like line of ch_events,
        wa_parameters like line of ch_parameters.

  event_filter = xmldoc-&gt;create_filter_name( XML_KEY_EVENTS ).
  event_iterator = xmldoc-&gt;create_iterator_filtered( event_filter ).
  event_node ?= event_iterator-&gt;get_next( ).
  WHILE event_node IS NOT INITIAL.
    CLEAR wa_events.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = event_node
      CHANGING
        structure = wa_events.
    append wa_events to ch_events.
    parameter_filter = event_node-&gt;create_filter_name( XML_KEY_PARAMETER ).
    parameter_iterator = event_node-&gt;create_iterator_filtered( parameter_filter ).
    parameter_node ?= parameter_iterator-&gt;get_next( ).
    WHILE parameter_node IS NOT INITIAL.
      CLEAR wa_parameters.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = parameter_node
        CHANGING
          structure = wa_parameters.
      append wa_parameters to ch_parameters.
      parameter_node ?= parameter_iterator-&gt;get_next( ).
    endwhile.
    event_node ?= event_iterator-&gt;get_next( ).
  ENDWHILE.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_INTERFACES" VERSION="1" LANGU="D" DESCRIPT="Imports included interfaces from the xml document" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_INTERFACES" SCONAME="CH_COMPRISINGS" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOR_COMPRISINGS_R"/>
   <source>method IMPORT_INTERFACES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  data: filter type ref to if_ixml_node_filter,
        iterator type ref to if_ixml_node_iterator,
        node type ref to if_ixml_element,
        wa_comprisings like line of ch_comprisings.

  filter = xmldoc-&gt;create_filter_name( XML_KEY_INCLUDE ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR wa_comprisings.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_comprisings.
    wa_comprisings-version = &apos;0&apos;.
    append wa_comprisings to ch_comprisings.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_METHODS" VERSION="1" LANGU="D" DESCRIPT="Imports methods from the xml document" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_METHODS" SCONAME="CH_METHODS" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOO_METHODS_R"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_METHODS" SCONAME="CH_PARAMETERS" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOS_PARAMETERS_R"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_METHODS" SCONAME="CH_EXCEPS" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOS_EXCEPTIONS_R"/>
   <source>method IMPORT_METHODS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  data: filter type ref to if_ixml_node_filter,
        filter2 type ref to if_ixml_node_filter,
        iterator type ref to if_ixml_node_iterator,
        iterator2 type ref to if_ixml_node_iterator,
        node type ref to if_ixml_element,
        node2 type ref to if_ixml_element,
        wa_parameters like line of ch_parameters,
        wa_methods like line of ch_methods,
        wa_exceps like line of ch_exceps.

*Add methods to new interface
  filter = xmldoc-&gt;create_filter_name( XML_KEY_METHOD ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR wa_methods.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_methods.

*Add parameters
    filter2 = node-&gt;create_filter_name( XML_KEY_PARAMETER ).
    iterator2 = node-&gt;create_iterator_filtered( filter2 ).
    node2 ?= iterator2-&gt;get_next( ).
    WHILE node2 IS NOT INITIAL.
      CLEAR wa_parameters.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = node2
        CHANGING
          structure = wa_parameters.
      append wa_parameters to ch_parameters.
      node2 ?= iterator2-&gt;get_next( ).
    ENDWHILE.
*Add exceptions
    filter2 = node-&gt;create_filter_name( XML_KEY_EXCEPTION ).
    iterator2 = node-&gt;create_iterator_filtered( filter2 ).
    node2 ?= iterator2-&gt;get_next( ).
    WHILE node2 IS NOT INITIAL.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = node2
        CHANGING
          structure = wa_exceps.
      append wa_exceps to ch_exceps.
      node2 ?= iterator2-&gt;get_next( ).
    ENDWHILE.
    append wa_methods to ch_methods.
    node ?= iterator-&gt;get_next( ).
  endwhile.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_TYPES" VERSION="1" LANGU="D" DESCRIPT="Imports types and typegroups from the xml document" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_TYPES" SCONAME="CH_TYPEUSAGES" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOT_TYPEPUSAGES_R"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_TYPES" SCONAME="CH_TYPES" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOO_TYPES_R"/>
   <source>method IMPORT_TYPES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  data: filter type ref to if_ixml_node_filter,
        iterator type ref to if_ixml_node_iterator,
        node type ref to if_ixml_element,
        wa_types like line of ch_types,
        wa_typeusages like line of ch_typeusages.

  filter = xmldoc-&gt;create_filter_name( XML_KEY_TYPES ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR wa_types.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_types.
    wa_types-version = &apos;0&apos;.
    append wa_types to ch_types.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

*ewH: for version 0.1.3, we will continue to generate both nodes
* in order for upgradeability of SAPlink itself.  For version
* 2.0, forwardDeclaration node generations will be deprecated.
  filter = xmldoc-&gt;create_filter_name( XML_KEY_TYPEUSAGE ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_typeUsages.
    APPEND wa_typeusages TO ch_typeusages.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_VIEW_CLUSTER" VERSION="1" LANGU="D" DESCRIPT="SAPlink - View cluster" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_VIEW_CLUSTER" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_VIEW_CLUSTER" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VIEW_CLUSTER" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VIEW_CLUSTER" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VIEW_CLUSTER" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_VIEW_CLUSTER" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD checkexists.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  SELECT SINGLE vclname INTO objname FROM vcldir WHERE vclname = objname.
  IF sy-subrc = 0.
    exists = &apos;X&apos;.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_VIEW_CLUSTER" CMPNAME="CHECK_AUTHORITY" VERSION="1" LANGU="D" DESCRIPT="Authorization check" EXPOSURE="0" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZSAPLINK_VIEW_CLUSTER" CMPNAME="CHECK_AUTHORITY" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD check_authority.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  CALL FUNCTION &apos;VIEW_AUTHORITY_CHECK&apos;
    EXPORTING
      view_action                    = &apos;U&apos;
      view_name                      = &apos;V_VCLDIR&apos;
      no_warning_for_clientindep     = &apos;X&apos;
    EXCEPTIONS
      no_authority                   = 1
      no_clientindependent_authority = 2
      OTHERS                         = 3.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;not_authorized.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createixmldocfromobject.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA lv_vclname             TYPE vcldir-vclname.
  DATA ls_vcldir              TYPE v_vcldir.
  DATA lt_vclstruc            TYPE TABLE OF v_vclstruc.
  DATA lt_vclstrudep          TYPE TABLE OF vclstrudep.
  DATA lt_vcltab              TYPE TABLE OF vclmf.
  DATA ls_vclstruc            TYPE v_vclstruc.
  DATA ls_vclstrudep          TYPE vclstrudep.
  DATA ls_vcltab              TYPE vclmf.
  DATA rc                     TYPE sysubrc.                 &quot;#EC NEEDED

  DATA _objtype               TYPE string.
  DATA rootnode               TYPE REF TO if_ixml_element.
  DATA node                   TYPE REF TO if_ixml_element.



  &quot; Read view cluster info
  lv_vclname = objname.
  CALL FUNCTION &apos;VIEWCLUSTER_GET_DEFINITION&apos;
    EXPORTING
      vclname                = lv_vclname
    IMPORTING
      vcldir_entry           = ls_vcldir
    TABLES
      vclstruc_tab           = lt_vclstruc
      vclstrudep_tab         = lt_vclstrudep
      vclmf_tab              = lt_vcltab
    EXCEPTIONS
      viewcluster_not_found  = 1
      incomplete_viewcluster = 2
      OTHERS                 = 3.

  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;not_found.
  ENDIF.


  &quot; Create XML
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = ls_vcldir ).

  LOOP AT lt_vclstruc INTO ls_vclstruc.
    node = xmldoc-&gt;create_element( &apos;vclstruc&apos; ).
    setattributesfromstructure( node = node structure = ls_vclstruc ).
    rc = rootnode-&gt;append_child( node ).
  ENDLOOP.

  LOOP AT lt_vclstrudep INTO ls_vclstrudep.
    node = xmldoc-&gt;create_element( &apos;vclstrudep&apos; ).
    setattributesfromstructure( node = node structure = ls_vclstrudep ).
    rc = rootnode-&gt;append_child( node ).
  ENDLOOP.

  LOOP AT lt_vcltab INTO ls_vcltab.
    node = xmldoc-&gt;create_element( &apos;vcltab&apos; ).
    setattributesfromstructure( node = node structure = ls_vcltab ).
    rc = rootnode-&gt;append_child( node ).
  ENDLOOP.

  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createobjectfromixmldoc.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA lv_vclname             TYPE vcldir-vclname.
  DATA ls_vcldir              TYPE v_vcldir.
  DATA lt_vclstruc            TYPE TABLE OF v_vclstruc.
  DATA lt_vclstrudep          TYPE TABLE OF vclstrudep.
  DATA lt_vcltab              TYPE TABLE OF vclmf.
  DATA ls_vclstruc            TYPE v_vclstruc.
  DATA ls_vclstrudep          TYPE vclstrudep.
  DATA ls_vcltab              TYPE vclmf.
  DATA checkexists            TYPE flag.
  DATA lv_trkorr              TYPE trkorr.

  DATA _objtype               TYPE string.
  DATA rootnode               TYPE REF TO if_ixml_element.
  DATA node                   TYPE REF TO if_ixml_element.
  DATA filter                 TYPE REF TO if_ixml_node_filter.
  DATA iterator               TYPE REF TO if_ixml_node_iterator.



  _objtype = getobjecttype( ).
  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = ls_vcldir.

  objname = ls_vcldir-vclname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
    ELSE.                                                   &quot;#EC NEEDED
      &quot; Object will be overwritten automatically
      &quot; No need for deletion
    ENDIF.
  ENDIF.


  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;vclstruc&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR ls_vclstruc.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ls_vclstruc.
    APPEND ls_vclstruc TO lt_vclstruc.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;vclstrudep&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR ls_vclstrudep.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ls_vclstrudep.
    APPEND ls_vclstrudep TO lt_vclstrudep.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;vcltab&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR ls_vcltab.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ls_vcltab.
    APPEND ls_vcltab TO lt_vcltab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  check_authority( ).
  enqueue( action = &apos;E&apos; ).
  lv_trkorr = create_transport( ).

  CALL FUNCTION &apos;VIEWCLUSTER_SAVE_DEFINITION&apos;
    EXPORTING
      vcldir_entry   = ls_vcldir
    TABLES
      vclstruc_tab   = lt_vclstruc
      vclstrudep_tab = lt_vclstrudep
      vclmf_tab      = lt_vcltab.

  CALL FUNCTION &apos;OBJ_GENERATE&apos;
    EXPORTING
      iv_korrnum       = lv_trkorr
      iv_objectname    = ls_vcldir-vclname
      iv_objecttype    = &apos;C&apos;
      iv_maint_mode    = &apos;I&apos;
    EXCEPTIONS
      illegal_call     = 1
      object_not_found = 2
      generate_error   = 3
      transport_error  = 4
      OTHERS           = 5.

  IF sy-subrc = 0.
    &quot; successful install
    enqueue( action = &apos;D&apos; ).
    name = ls_vcldir-vclname.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_VIEW_CLUSTER" CMPNAME="CREATE_TRANSPORT" VERSION="1" LANGU="D" DESCRIPT="Create transport order for newly created view cluster" EXPOSURE="0" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_VIEW_CLUSTER" CMPNAME="CREATE_TRANSPORT" SCONAME="RV_TRKORR" VERSION="1" LANGU="D" DESCRIPT="Request/Task" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TRKORR"/>
   <exception CLSNAME="ZSAPLINK_VIEW_CLUSTER" CMPNAME="CREATE_TRANSPORT" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD create_transport.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA lt_ko200 TYPE TABLE OF ko200.
  DATA ls_ko200 TYPE ko200.
  DATA lv_trkorr  TYPE trkorr.


  ls_ko200-pgmid = &apos;R3TR&apos;.
  ls_ko200-object = &apos;VCLS&apos;.
  ls_ko200-obj_name = objname.
  APPEND ls_ko200 TO lt_ko200.

  CALL FUNCTION &apos;TR_OBJECTS_CHECK&apos;
    IMPORTING
      we_order                = lv_trkorr
    TABLES
      wt_ko200                = lt_ko200
    EXCEPTIONS
      cancel_edit_other_error = 1
      show_only_other_error   = 2
      OTHERS                  = 3.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;system_error.
  ENDIF.

  CALL FUNCTION &apos;TR_OBJECTS_INSERT&apos;
    EXPORTING
      wi_order                = lv_trkorr
    IMPORTING
      we_order                = rv_trkorr
    TABLES
      wt_ko200                = lt_ko200
    EXCEPTIONS
      cancel_edit_other_error = 1
      show_only_other_error   = 2
      OTHERS                  = 3.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;system_error.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD deleteobject.                                        &quot;#EC NEEDED
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

* Do need to delete -&gt; Object will be regenerated

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_VIEW_CLUSTER" CMPNAME="ENQUEUE" VERSION="1" LANGU="D" DESCRIPT="Enqueue" EXPOSURE="0" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_VIEW_CLUSTER" CMPNAME="ENQUEUE" SCONAME="ACTION" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="C"/>
   <exception CLSNAME="ZSAPLINK_VIEW_CLUSTER" CMPNAME="ENQUEUE" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD enqueue.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA: vcl_sellist TYPE TABLE OF vimsellist.
  DATA: vcl_sel     TYPE vimsellist.
  DATA: lv_error    TYPE string.
  DATA: lv_subrc    TYPE sysubrc.

  REFRESH vcl_sellist. CLEAR vcl_sellist.
  vcl_sel-viewfield = &apos;VCLNAME&apos;.
  vcl_sel-operator  = &apos;EQ&apos;.
  vcl_sel-value     = objname.
  vcl_sel-ddic      = &apos;S&apos;.
  APPEND vcl_sel TO vcl_sellist.

  CALL FUNCTION &apos;VIEW_ENQUEUE&apos;
    EXPORTING
      action         = action
      enqueue_mode   = &apos;E&apos;
      view_name      = &apos;V_VCLDIR&apos;
      enqueue_range  = &apos;X&apos;
    TABLES
      sellist        = vcl_sellist
    EXCEPTIONS
      foreign_lock   = 1
      system_failure = 2.
  IF sy-subrc &lt;&gt; 0 AND action = &apos;E&apos;.
    CASE sy-subrc.
      WHEN 1.
        MESSAGE e049(sv) WITH sy-msgv1 INTO lv_error.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = lv_error.
      WHEN 2.
        MESSAGE e050(sv) WITH &apos;V_VCLDIR&apos; INTO lv_error.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = lv_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;VIEW_ENQUEUE&apos;
    EXPORTING
      action         = action
      enqueue_mode   = &apos;E&apos;
      view_name      = &apos;V_VCLSTRUC&apos;
      enqueue_range  = &apos;X&apos;
    TABLES
      sellist        = vcl_sellist
    EXCEPTIONS
      foreign_lock   = 1
      system_failure = 2.
  IF sy-subrc &lt;&gt; 0 AND action = &apos;E&apos;.
    lv_subrc = sy-subrc.
    CALL FUNCTION &apos;VIEW_ENQUEUE&apos;
      EXPORTING
        action        = &apos;D&apos;
        enqueue_mode  = &apos;E&apos;
        view_name     = &apos;V_VCLDIR&apos;
        enqueue_range = &apos;X&apos;
      TABLES
        sellist       = vcl_sellist.

    CASE lv_subrc.
      WHEN 1.
        MESSAGE e049(sv) WITH sy-msgv1 INTO lv_error.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = lv_error.
      WHEN 2.
        MESSAGE e050(sv) WITH &apos;V_VCLSTRUC&apos; INTO lv_error.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = lv_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;VIEW_ENQUEUE&apos;
    EXPORTING
      action         = action
      enqueue_mode   = &apos;E&apos;
      view_name      = &apos;V_VCLSTDEP&apos;
      enqueue_range  = &apos;X&apos;
    TABLES
      sellist        = vcl_sellist
    EXCEPTIONS
      foreign_lock   = 1
      system_failure = 2.
  IF sy-subrc &lt;&gt; 0 AND action = &apos;E&apos;.
    lv_subrc = sy-subrc.
    CALL FUNCTION &apos;VIEW_ENQUEUE&apos;
      EXPORTING
        action        = &apos;D&apos;
        enqueue_mode  = &apos;E&apos;
        view_name     = &apos;V_VCLDIR&apos;
        enqueue_range = &apos;X&apos;
      TABLES
        sellist       = vcl_sellist.
    CALL FUNCTION &apos;VIEW_ENQUEUE&apos;
      EXPORTING
        action        = &apos;D&apos;
        enqueue_mode  = &apos;E&apos;
        view_name     = &apos;V_VCLSTRUC&apos;
        enqueue_range = &apos;X&apos;
      TABLES
        sellist       = vcl_sellist.

    CASE lv_subrc.
      WHEN 1.
        MESSAGE e049(sv) WITH sy-msgv1 INTO lv_error.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = lv_error.
      WHEN 2.
        MESSAGE e050(sv) WITH &apos;V_VCLSTDEP&apos; INTO lv_error.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = lv_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;VIEW_ENQUEUE&apos;
    EXPORTING
      action         = action
      enqueue_mode   = &apos;E&apos;
      view_name      = &apos;V_VCLMF&apos;
      enqueue_range  = &apos;X&apos;
    TABLES
      sellist        = vcl_sellist
    EXCEPTIONS
      foreign_lock   = 1
      system_failure = 2.
  IF sy-subrc &lt;&gt; 0 AND action = &apos;E&apos;.
    lv_subrc = sy-subrc.
    CALL FUNCTION &apos;VIEW_ENQUEUE&apos;
      EXPORTING
        action        = &apos;D&apos;
        enqueue_mode  = &apos;E&apos;
        view_name     = &apos;V_VCLDIR&apos;
        enqueue_range = &apos;X&apos;
      TABLES
        sellist       = vcl_sellist.
    CALL FUNCTION &apos;VIEW_ENQUEUE&apos;
      EXPORTING
        action        = &apos;D&apos;
        enqueue_mode  = &apos;E&apos;
        view_name     = &apos;V_VCLSTRUC&apos;
        enqueue_range = &apos;X&apos;
      TABLES
        sellist       = vcl_sellist.
    CALL FUNCTION &apos;VIEW_ENQUEUE&apos;
      EXPORTING
        action        = &apos;D&apos;
        enqueue_mode  = &apos;E&apos;
        view_name     = &apos;V_VCLSTDEP&apos;
        enqueue_range = &apos;X&apos;
      TABLES
        sellist       = vcl_sellist.
    CASE lv_subrc.
      WHEN 1.
        MESSAGE e049(sv) WITH sy-msgv1 INTO lv_error.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = lv_error.
      WHEN 2.
        MESSAGE e050(sv) WITH &apos;V_VCLMF&apos; INTO lv_error.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = lv_error.
    ENDCASE.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD getobjecttype.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  objecttype = &apos;VCLS&apos;. &quot; View cluster

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_USER_PARAMETER" VERSION="1" LANGU="D" DESCRIPT="SAPlink - User parameter" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_USER_PARAMETER" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_USER_PARAMETER" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_USER_PARAMETER" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_USER_PARAMETER" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_USER_PARAMETER" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_USER_PARAMETER" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD checkexists.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA ls_para  TYPE tpara.

  SELECT SINGLE * FROM tpara INTO ls_para WHERE paramid = objname.
  IF sy-subrc = 0.
    exists = &apos;X&apos;.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_USER_PARAMETER" CMPNAME="CHECK_AUTHORITY" VERSION="1" LANGU="D" DESCRIPT="Authorization check" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_USER_PARAMETER" CMPNAME="CHECK_AUTHORITY" SCONAME="IV_ACTVT" VERSION="1" LANGU="D" DESCRIPT="Version Number Component" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CHAR1"/>
   <exception CLSNAME="ZSAPLINK_USER_PARAMETER" CMPNAME="CHECK_AUTHORITY" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD check_authority.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA lv_mode            TYPE char6.
  DATA lv_paramid         TYPE tpara-paramid.
  DATA lv_error           TYPE string.


  lv_paramid = objname.
  CASE iv_actvt.
    WHEN &apos;C&apos;. &quot; Create user parameter
      lv_mode = &apos;INSERT&apos;.

    WHEN &apos;D&apos;. &quot; Delete user parameter
      lv_mode = &apos;MODIFY&apos;.

    WHEN OTHERS.
      &quot; Not supported
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;system_error.
  ENDCASE.

  CALL FUNCTION &apos;RS_ACCESS_PERMISSION&apos;
    EXPORTING
      global_lock             = abap_true
      object                  = lv_paramid
      object_class            = &apos;PARA&apos;
      mode                    = lv_mode
      language_upd_exit       = &apos;RS_PARAMETER_LANGUAGE_EXIT&apos;
      suppress_language_check = space
    EXCEPTIONS
      canceled_in_corr        = 1
      OTHERS                  = 2.

  IF sy-subrc NE 0.
    MESSAGE ID sy-msgid TYPE &apos;E&apos; NUMBER sy-msgno
          WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
          INTO lv_error.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_error.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createixmldocfromobject.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA ls_para                TYPE tpara.
  DATA lt_parat               TYPE TABLE OF tparat.
  DATA ls_parat               TYPE tparat.
  DATA lv_error               TYPE string.
  DATA rc                     TYPE sysubrc.                 &quot;#EC NEEDED

  DATA _objtype               TYPE string.
  DATA rootnode               TYPE REF TO if_ixml_element.
  DATA node                   TYPE REF TO if_ixml_element.



  &quot; Read user parameter properties
  SELECT SINGLE * FROM tpara INTO ls_para  WHERE paramid = objname.
  SELECT * FROM tparat INTO TABLE lt_parat WHERE paramid = objname.

  IF ls_para IS INITIAL.
    MESSAGE e061(eu) WITH objname INTO lv_error.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_error.
  ENDIF.

  &quot; Create XML
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = ls_para ).

  LOOP AT lt_parat INTO ls_parat.
    node = xmldoc-&gt;create_element( &apos;parat&apos; ).
    setattributesfromstructure( node = node structure = ls_parat ).
    rc = rootnode-&gt;append_child( node ).
  ENDLOOP.

  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createobjectfromixmldoc.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA ls_para                TYPE tpara.
  DATA ls_parat               TYPE tparat.
  DATA lt_parat               TYPE TABLE OF tparat.
  DATA lv_error               TYPE string.

  DATA _objtype               TYPE string.
  DATA rootnode               TYPE REF TO if_ixml_element.
  DATA node                   TYPE REF TO if_ixml_element.
  DATA filter                 TYPE REF TO if_ixml_node_filter.
  DATA iterator               TYPE REF TO if_ixml_node_iterator.
  DATA checkexists            TYPE flag.


  _objtype = getobjecttype( ).
  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = ls_para.
  objname = ls_para-paramid.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
    ELSE.
      deleteobject( ).
    ENDIF.
  ENDIF.

  filter = xmldoc-&gt;create_filter_name( &apos;parat&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR ls_parat.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ls_parat.
    APPEND ls_parat TO lt_parat.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  &quot; Create user parameter
  check_authority( &apos;C&apos; ).
  CALL FUNCTION &apos;RS_CHARACTER_CHECK&apos;
    EXPORTING
      objectname = ls_para-paramid
    EXCEPTIONS
      OTHERS     = 5.
  IF sy-subrc NE 0.
    MESSAGE ID sy-msgid TYPE &apos;E&apos; NUMBER sy-msgno
          WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
          INTO lv_error.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_error.
  ENDIF.

  CALL FUNCTION &apos;RS_CORR_INSERT&apos;
    EXPORTING
      global_lock         = abap_true
      object              = ls_para-paramid
      object_class        = &apos;PARA&apos;
      mode                = &apos;I&apos;
      master_language     = sy-langu
    EXCEPTIONS
      cancelled           = 01
      permission_failure  = 02
      unknown_objectclass = 03.
  IF sy-subrc NE 0.
    MESSAGE ID sy-msgid TYPE &apos;E&apos; NUMBER sy-msgno
          WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
          INTO lv_error.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_error.
  ENDIF.

  INSERT tpara  FROM ls_para.
  INSERT tparat FROM TABLE lt_parat.

  CALL FUNCTION &apos;RS_TREE_OBJECT_PLACEMENT&apos;
    EXPORTING
      object    = ls_para-paramid
      operation = &apos;INSERT&apos;
      type      = &apos;CR&apos;.

  free( ).

  &quot; successful install
  name = objname.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD deleteobject.                                        &quot;#EC NEEDED
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA lv_error         TYPE string.
  DATA ls_para          TYPE tpara.


  check_authority( &apos;D&apos; ).

  SELECT SINGLE * FROM tpara INTO ls_para WHERE paramid = objname.
  IF sy-subrc NE 0.
    MESSAGE e061(eu) WITH objname INTO lv_error.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_error.
  ENDIF.


  DELETE FROM tpara  WHERE paramid = objname.
  DELETE FROM tparat WHERE paramid = objname.
  CALL FUNCTION &apos;RS_TREE_OBJECT_PLACEMENT&apos;
    EXPORTING
      object    = ls_para-paramid
      operation = &apos;DELETE&apos;
      type      = &apos;CR&apos;.

  free( ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_USER_PARAMETER" CMPNAME="FREE" VERSION="1" LANGU="D" DESCRIPT="Remove permission lock" EXPOSURE="0" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD free.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  CALL FUNCTION &apos;RS_ACCESS_PERMISSION&apos;
    EXPORTING
      mode         = &apos;FREE&apos;
      object       = objname
      object_class = &apos;PARA&apos;.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD getobjecttype.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  objecttype = &apos;PARA&apos;. &quot; User parameter

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Checkpoint group" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD checkexists.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA lr_acid                 TYPE REF TO cl_aab_id.
  DATA lv_state                TYPE flag.


  lr_acid = get_ref( ).
  CALL METHOD lr_acid-&gt;get_state
    IMPORTING
      ex_state = lv_state.

  IF NOT lv_state IS INITIAL.
    exists = &apos;X&apos;.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" CMPNAME="CHECK_AUTHORITY" VERSION="1" LANGU="D" DESCRIPT="Authorization check" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" CMPNAME="CHECK_AUTHORITY" SCONAME="IV_ACTVT" VERSION="1" LANGU="D" DESCRIPT="Version Number Component" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CHAR1"/>
   <exception CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" CMPNAME="CHECK_AUTHORITY" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD check_authority.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA lr_acid                 TYPE REF TO cl_aab_id.


  CASE iv_actvt.
    WHEN &apos;C&apos;. &quot; Create checkpoint group
      IF cl_aab_id=&gt;check_acid_authority( actvt = &apos;01&apos; ) EQ abap_false.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;not_authorized.
      ENDIF.

    WHEN &apos;D&apos;. &quot; Delete checkpoint group
      lr_acid = get_ref( ).
      IF lr_acid-&gt;check_authority( actvt = &apos;06&apos; ) NE abap_true.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;not_authorized.
      ENDIF.

    WHEN OTHERS.
      &quot; Not supported
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;system_error.
  ENDCASE.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" CMPNAME="CREATE" VERSION="1" LANGU="D" DESCRIPT="Create checkpoint group" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" CMPNAME="CREATE" SCONAME="IS_PROP" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="AAB_ID_PROPT"/>
   <exception CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" CMPNAME="CREATE" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD create.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA lr_acid                 TYPE REF TO cl_aab_id.
  DATA lv_error                TYPE string.


  lr_acid = get_ref( ).
  CALL METHOD lr_acid-&gt;set_descript
    EXPORTING
      im_descript      = is_prop-descript
    EXCEPTIONS
      no_authorization = 1
      OTHERS           = 2.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
          WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
          INTO lv_error.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_error.
  ENDIF.

  CALL METHOD lr_acid-&gt;save
    EXCEPTIONS
      no_descript_specified = 1
      no_changes_found      = 2
      prop_error            = 3
      propt_error           = 4
      act_error             = 5
      cts_error             = 6
      sync_attributes_error = 7
      OTHERS                = 8.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE s011(saab) INTO lv_error.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_error.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createixmldocfromobject.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA ls_prop                TYPE aab_id_propt.
  DATA lv_string              TYPE string.
  DATA rc                     TYPE sysubrc.                 &quot;#EC NEEDED

  DATA _objtype               TYPE string.
  DATA rootnode               TYPE REF TO if_ixml_element.



  &quot; Read checkpoint group properties
  SELECT SINGLE * FROM aab_id_propt INTO ls_prop WHERE name EQ objname AND langu = sy-langu.
  IF sy-subrc &lt;&gt; 0.
    SELECT SINGLE * FROM aab_id_propt INTO ls_prop WHERE name EQ objname. &quot;#EC WARNOK
  ENDIF.

  IF ls_prop-descript IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;system_error.
  ENDIF.


  &quot; Create XML
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).

  &quot; Checkpoint name is not the first component of structure
  &quot; ls_prop so we need to add it &apos;manually&apos; in first position
  &quot; otherwise SAPLINK won&apos;t be able to fill-in
  &quot; variable &apos;objname&apos; correctly
  lv_string = ls_prop-name.
  rootnode-&gt;set_attribute( name = &apos;NAME&apos;     value = lv_string ).
  lv_string = ls_prop-langu.
  rootnode-&gt;set_attribute( name = &apos;LANGU&apos;    value = lv_string ).
  lv_string = ls_prop-descript.
  rootnode-&gt;set_attribute( name = &apos;DESCRIPT&apos; value = lv_string ).

  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createobjectfromixmldoc.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA ls_prop                TYPE aab_id_propt.
  DATA _objtype               TYPE string.
  DATA rootnode               TYPE REF TO if_ixml_element.
  DATA checkexists            TYPE flag.



  _objtype = getobjecttype( ).
  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = ls_prop.
  objname = ls_prop-name.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
    ELSE.
      &quot; Removed to avoid errors in case the checkkpoint
      &quot; group is still in use... Description will
      &quot; be updated anyway, deletion is therefore not mandatory

      &quot; deleteobject( ).
    ENDIF.
  ENDIF.



  &quot; Create checkpoint group
  check_authority( &apos;C&apos; ).
  enqueue( ).
  create( ls_prop ).
  dequeue( ).

  &quot; successful install
  name = objname.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD deleteobject.                                        &quot;#EC NEEDED
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA lr_acid          TYPE REF TO cl_aab_id.
  DATA lv_subrc         TYPE sysubrc.
  DATA lv_error         TYPE string.


  check_authority( &apos;D&apos; ).
  enqueue( ).

  lr_acid = get_ref( ).
  lr_acid-&gt;delete( EXCEPTIONS prop_error       = 1
                              propt_error      = 2
                              act_error        = 3
                              cts_error        = 4
                              cts_devclass     = 5
                              id_not_found     = 6
                              no_authorization = 7
                              OTHERS           = 8 ).
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
          WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
          INTO lv_error.
    dequeue( ).
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_error.
  ENDIF.
  dequeue( ).


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" CMPNAME="DEQUEUE" VERSION="1" LANGU="D" DESCRIPT="Enqueue" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD dequeue.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA lr_acid TYPE REF TO cl_aab_id.

  lr_acid = get_ref( ).
  lr_acid-&gt;dequeue( ).


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" CMPNAME="ENQUEUE" VERSION="1" LANGU="D" DESCRIPT="Enqueue" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" CMPNAME="ENQUEUE" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD enqueue.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA lr_acid TYPE REF TO cl_aab_id.


  lr_acid = get_ref( ).
  CALL METHOD lr_acid-&gt;enqueue
    EXCEPTIONS
      foreign_lock = 1
      system_error = 2
      cts_error    = 3
      OTHERS       = 4.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;locked.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  objecttype = &apos;ACID&apos;. &quot; Checkpoint group

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" CMPNAME="GET_REF" VERSION="1" LANGU="D" DESCRIPT="Get acid object reference" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" CMPNAME="GET_REF" SCONAME="RR_ACID" VERSION="1" LANGU="D" DESCRIPT="Activation ID" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="CL_AAB_ID"/>
   <source>METHOD get_ref.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA lv_name TYPE aab_id_name.

  lv_name = objname.
  CREATE OBJECT rr_acid
    EXPORTING
      im_name          = lv_name
    EXCEPTIONS
      name_not_allowed = 1
      OTHERS           = 2.
  IF sy-subrc &lt;&gt; 0.                                         &quot;#EC NEEDED
    &quot; Should never happen!
  ENDIF.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_TRANSFORMATION" VERSION="1" LANGU="D" DESCRIPT="SAPlink - XSLT Plugin" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="C_OBJECT_TYPE" VERSION="1" LANGU="D" DESCRIPT="XSLT Object Type" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="2" ATTVALUE="&apos;XSLT&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="C_TAG_SOURCE" VERSION="1" LANGU="D" DESCRIPT="XML Tag for Source" EXPOSURE="1" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;source&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="XSLT_NAME" VERSION="1" LANGU="D" DESCRIPT="XSLT Name" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CXSLTDESC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_TRANSFORMATION" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_TRANSFORMATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TRANSFORMATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TRANSFORMATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TRANSFORMATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_TRANSFORMATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*|Copyright 2006-2015 by Nicola Fankhauser(nicola.fankhauser@variant.ch)
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD checkexists .

  CONSTANTS:
    lc_exists TYPE char1 VALUE &apos;1&apos;.

  set_xslt_name( ).

  IF cl_o2_api_xsltdesc=&gt;exists( xslt_name ) EQ lc_exists.
    exists = abap_true.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*|Copyright 2006-2015 by Nicola Fankhauser(nicola.fankhauser@variant.ch)
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD createixmldocfromobject .

  DATA:
    lo_xslt TYPE REF TO cl_o2_api_xsltdesc,
    ls_attributes TYPE o2xsltattr,
    lo_rootnode TYPE REF TO if_ixml_element,
    lt_xslt_source TYPE o2pageline_table,
    lo_node TYPE REF TO if_ixml_element,
    l_source TYPE string.

* set internal object name
  set_xslt_name( ).

* load XSLT transformation
  lo_xslt = get_xslt( xslt_name ).

* create parent node with attributes
  lo_rootnode = xmldoc-&gt;create_element( c_object_type ).

* 1. get attributes
  ls_attributes = lo_xslt-&gt;get_attributes( ).
  setattributesfromstructure( node = lo_rootnode structure = ls_attributes ).

* 2. get XSLT source
  lt_xslt_source = lo_xslt-&gt;get_source( ).

  l_source = zsaplink_transformation=&gt;buildsourcestring( pagetable = lt_xslt_source ).
  lo_node = xmldoc-&gt;create_element( c_tag_source ).
  lo_node-&gt;set_value( l_source ).
  lo_rootnode-&gt;append_child( lo_node ).

  xmldoc-&gt;append_child( lo_rootnode ).

  ixmldocument = xmldoc.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*|Copyright 2006-2015 by Nicola Fankhauser(nicola.fankhauser@variant.ch)
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD createobjectfromixmldoc .

  DATA:
    lo_rootnode TYPE REF TO if_ixml_element,
    lo_node TYPE REF TO if_ixml_element,
    lo_filter TYPE REF TO if_ixml_node_filter,
    lo_iterator TYPE REF TO if_ixml_node_iterator,
    lo_xslt TYPE REF TO cl_o2_api_xsltdesc,
    ls_attributes TYPE o2xsltattr,
    lt_xslt_source TYPE o2pageline_table,
    ls_xslt_source LIKE LINE OF lt_xslt_source,
    l_source TYPE string,
    lt_source TYPE table_of_strings.

* try to find a XSLT transformation in the XML tree
  xmldoc = ixmldocument.
  lo_rootnode = xmldoc-&gt;find_from_name( c_object_type ).

* 1. get attributes
  getstructurefromattributes( EXPORTING node = lo_rootnode CHANGING structure = ls_attributes ).

* set XSLT transformation name
  objname = ls_attributes-xsltdesc.
  set_xslt_name( ).

* check whether object already exists and if overwriting
* is allowed
  IF checkexists( ) IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* 2. get XSLT source
  CLEAR: lo_filter, lo_iterator, lo_node.
  lo_filter = xmldoc-&gt;create_filter_name( c_tag_source ).
  lo_iterator = xmldoc-&gt;create_iterator_filtered( lo_filter ).
  lo_node ?= lo_iterator-&gt;get_next( ).

  IF lo_node IS NOT INITIAL.
    l_source = lo_node-&gt;get_value( ).
    lt_source = zsaplink_transformation=&gt;buildtablefromstring( source = l_source ).

    LOOP AT lt_source INTO l_source.
      CLEAR ls_xslt_source.
      ls_xslt_source-line = l_source.
      APPEND ls_xslt_source TO lt_xslt_source.
    ENDLOOP.
  ENDIF.

* create new XSLT transformation
  cl_o2_api_xsltdesc=&gt;create_new(
    EXPORTING
      p_source                     = lt_xslt_source
      p_attr                       = ls_attributes
    IMPORTING
      p_obj                        = lo_xslt
    EXCEPTIONS
      object_already_existing      = 1
      not_authorized               = 2
      undefined_name               = 3
      OTHERS                       = 4 ).

  IF sy-subrc NE 0.
    CASE sy-subrc.

*     object must not be existing already at this stage
      WHEN 1.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;existing.

      WHEN 2.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 3.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_found.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

* check for valid object reference
  IF lo_xslt IS NOT BOUND.

    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.

  ENDIF.

* save XSLT transformation
  save_xslt( lo_xslt ).

* reset
  set_xslt_changeable( i_changeable = abap_false io_xslt = lo_xslt ).

  name = objname.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*|Copyright 2006-2015 by Nicola Fankhauser(nicola.fankhauser@variant.ch)
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD deleteobject .

  DATA:
    lo_xslt TYPE REF TO cl_o2_api_xsltdesc.

* set internal object name
  set_xslt_name( ).

* load XSLT transformation
  lo_xslt = get_xslt( xslt_name ).

* set changeable
  set_xslt_changeable( i_changeable = abap_true io_xslt = lo_xslt ).

* delete XSLT transformation
  lo_xslt-&gt;delete(
    EXCEPTIONS
      object_invalid        = 1
      object_not_changeable = 2
      OTHERS                = 3 ).

  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_found.
      WHEN 2.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

* only this call really deletes the XSLT
  save_xslt( lo_xslt ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*|Copyright 2006-2015 by Nicola Fankhauser(nicola.fankhauser@variant.ch)
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD getobjecttype .

  objecttype = c_object_type. &quot; XSLT transformation

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="GET_XSLT" VERSION="1" LANGU="D" DESCRIPT="Returns the requested XXSLT Transformation object" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="GET_XSLT" SCONAME="I_XSLT_NAME" VERSION="1" LANGU="D" DESCRIPT="XSLT Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="GET_XSLT" SCONAME="RO_XSLT" VERSION="1" LANGU="D" DESCRIPT="XSLT Transformation" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="CL_O2_API_XSLTDESC"/>
   <exception CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="GET_XSLT" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*|Copyright 2006-2015 by Nicola Fankhauser(nicola.fankhauser@variant.ch)
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD get_xslt .

* load XSLT transformation
  cl_o2_api_xsltdesc=&gt;load(
    EXPORTING
      p_xslt_desc                  = i_xslt_name
    IMPORTING
      p_obj                        = ro_xslt
    EXCEPTIONS
      not_existing                 = 1
      permission_failure           = 2
      OTHERS                       = 5 ).

  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_found.
      WHEN 2.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="SAVE_XSLT" VERSION="1" LANGU="D" DESCRIPT="Saves the XSLT Transformation" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="SAVE_XSLT" SCONAME="IO_XSLT" VERSION="1" LANGU="D" DESCRIPT="XSLT Transformation" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="CL_O2_API_XSLTDESC"/>
   <exception CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="SAVE_XSLT" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*|Copyright 2006-2015 by Nicola Fankhauser(nicola.fankhauser@variant.ch)
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD SAVE_XSLT .

* save XSLT transformation
  io_xslt-&gt;save(
    EXCEPTIONS
      permission_failure        = 5
      OTHERS                    = 6 ).

  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 5.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="SET_XSLT_CHANGEABLE" VERSION="1" LANGU="D" DESCRIPT="Sets the XSLT Transformation changeable" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="SET_XSLT_CHANGEABLE" SCONAME="I_CHANGEABLE" VERSION="1" LANGU="D" DESCRIPT="Changeable?" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="ABAP_TRUE" PARPREFERD="X"/>
   <parameter CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="SET_XSLT_CHANGEABLE" SCONAME="IO_XSLT" VERSION="1" LANGU="D" DESCRIPT="XSLT Transformation" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="CL_O2_API_XSLTDESC"/>
   <exception CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="SET_XSLT_CHANGEABLE" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*|Copyright 2006-2015 by Nicola Fankhauser(nicola.fankhauser@variant.ch)
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD set_xslt_changeable.

* set changeable
  io_xslt-&gt;set_changeable(
    EXPORTING
      p_changeable                = i_changeable
    EXCEPTIONS
      object_already_unlocked     = 4
      object_already_changeable   = 5
      object_locked_by_other_user = 3
      permission_failure          = 2
      OTHERS                      = 10 ).

  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_found.
      WHEN 2.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 3.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN 4 OR 5. &quot; do nothing, continue
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="SET_XSLT_NAME" VERSION="1" LANGU="D" DESCRIPT="Setzt XSLT Name" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*|Copyright 2006-2015 by Nicola Fankhauser(nicola.fankhauser@variant.ch)
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD set_xslt_name.

  xslt_name = objname.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_DOMAINS" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Data Dictionary  - Domains" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZSAPLINK_DOMAINS" CMPNAME="C_MULTILANGUAGESUPPORT" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;MultiLanguageSupport&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_DOMAINS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_DOMAINS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DOMAINS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DOMAINS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DOMAINS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_DOMAINS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD checkexists.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name TYPE ddobjname,
        dd01v_wa type dd01v.
  l_name = objname.
  CALL FUNCTION &apos;DDIF_DOMA_GET&apos;
    EXPORTING
      name          = l_name
    IMPORTING
      dd01v_wa      = dd01v_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc = 0 AND dd01v_wa-domname IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD createixmldocfromobject.
*
**      Plugin created by:
**      Thomas Jung
**      thomas.jung1@gmail.com

**      Stefan Schmöcker - July 2014
**      Changed to support multilinguitiy

  DATA: lt_ddlanguage TYPE STANDARD TABLE OF ddlanguage WITH NON-UNIQUE DEFAULT KEY,
        lo_rootnode   TYPE REF TO if_ixml_element,
        lo_langunode  TYPE REF TO if_ixml_element,
        lo_dd01vnode  TYPE REF TO if_ixml_element,
        lo_dd07vnode  TYPE REF TO if_ixml_element,
        lv_objecttype TYPE string,
        lv_value      TYPE string,
        lv_ddobjname  TYPE ddobjname,
        ls_dd01v      TYPE dd01v,
        lt_dd07v      TYPE STANDARD TABLE OF dd07v WITH NON-UNIQUE DEFAULT KEY.
  FIELD-SYMBOLS: &lt;lv_ddlanguage&gt; LIKE LINE OF lt_ddlanguage,
                 &lt;ls_dd07v&gt;      LIKE LINE OF lt_dd07v.

*--------------------------------------------------------------------*
* First determine all languages that we have to take into account
* This translation could have taken place
*       for the domain description  ( DD01T )
*       or for the fix-values       ( DD07T )
* Get a list of all languages
*--------------------------------------------------------------------*
  SELECT DISTINCT ddlanguage
    INTO TABLE lt_ddlanguage
    FROM dd01t
    WHERE domname = me-&gt;objname.
  SELECT DISTINCT ddlanguage
    APPENDING TABLE lt_ddlanguage
    FROM dd07t
    WHERE domname = me-&gt;objname.
  SORT lt_ddlanguage.
  DELETE ADJACENT DUPLICATES FROM lt_ddlanguage.

*--------------------------------------------------------------------*
* Build rootnode
*--------------------------------------------------------------------*
  lv_objecttype = getobjecttype( ).
  lo_rootnode   = xmldoc-&gt;create_element( lv_objecttype ).
  lo_rootnode-&gt;set_attribute(  name  = &apos;DOMNAME&apos;
                               value = me-&gt;objname ).
  lo_rootnode-&gt;set_attribute( name  = c_multilanguagesupport
                              value = &apos;X&apos; ).
*--------------------------------------------------------------------*
* For each language add a language-node,
* and then add the relevant data from DD01L and DD07L
*--------------------------------------------------------------------*
  lv_ddobjname = me-&gt;objname.
  LOOP AT lt_ddlanguage ASSIGNING &lt;lv_ddlanguage&gt;.

*--------------------------------------------------------------------*
    lo_langunode = xmldoc-&gt;create_element( &apos;DDLANGUAGE&apos; ).
    lv_value     = &lt;lv_ddlanguage&gt;.
    lo_langunode-&gt;set_attribute(  name  = &apos;LANGU&apos;
                                  value = lv_value ).

    CLEAR: ls_dd01v,
           lt_dd07v.
    CALL FUNCTION &apos;DDIF_DOMA_GET&apos;
      EXPORTING
        name          = lv_ddobjname
        langu         = &lt;lv_ddlanguage&gt;
      IMPORTING
*      gotstate      = gotstate
        dd01v_wa      = ls_dd01v
      TABLES
        dd07v_tab     = lt_dd07v
      EXCEPTIONS
        illegal_input = 1
        OTHERS        = 2.
    IF sy-subrc &lt;&gt; 0 OR ls_dd01v-domname IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_found.
    ENDIF.

    lo_dd01vnode = xmldoc-&gt;create_element( &apos;DD01V&apos; ).
    setattributesfromstructure( node      = lo_dd01vnode
                                structure = ls_dd01v ).
    lo_langunode-&gt;append_child( lo_dd01vnode ).

    LOOP AT lt_dd07v ASSIGNING &lt;ls_dd07v&gt;.
      lo_dd07vnode = xmldoc-&gt;create_element( &apos;DD07V&apos; ).
      setattributesfromstructure( node      = lo_dd07vnode
                                  structure = &lt;ls_dd07v&gt; ).
      lo_langunode-&gt;append_child( lo_dd07vnode ).
    ENDLOOP.

    lo_rootnode-&gt;append_child( lo_langunode ).

  ENDLOOP.

  xmldoc-&gt;append_child( lo_rootnode ).
  ixmldocument = xmldoc.
*
*  DATA: gotstate TYPE ddgotstate,
*        dd01v_wa TYPE dd01v,
*        dd07v_tab TYPE STANDARD TABLE OF dd07v.
*
**xml nodes
*  DATA rootnode   TYPE REF TO if_ixml_element.
*  DATA dd07v_node TYPE REF TO if_ixml_element.
*  DATA rc         TYPE sysubrc.
*  DATA _domaname  TYPE ddobjname.
*  _domaname = objname.
*
*  CALL FUNCTION &apos;DDIF_DOMA_GET&apos;
*    EXPORTING
*      name          = _domaname
*      langu         = sy-langu
*    IMPORTING
*      gotstate      = gotstate
*      dd01v_wa      = dd01v_wa
*    TABLES
*      dd07v_tab     = dd07v_tab
*    EXCEPTIONS
*      illegal_input = 1
*      OTHERS        = 2.
*  IF sy-subrc &lt;&gt; 0 OR dd01v_wa-domname IS INITIAL.
*    RAISE EXCEPTION TYPE zcx_saplink
*      EXPORTING textid = zcx_saplink=&gt;not_found.
*  ENDIF.
*
** Create parent node
*  DATA _objtype TYPE string.
*  _objtype = getobjecttype( ).
*  rootnode = xmldoc-&gt;create_element( _objtype ).
*  setattributesfromstructure( node = rootnode structure = dd01v_wa ).
*
*  DATA: wa_dd07v LIKE LINE OF dd07v_tab.
*  LOOP AT dd07v_tab INTO wa_dd07v.
*    dd07v_node = xmldoc-&gt;create_element( &apos;dd07v&apos; ).
*    setattributesfromstructure( node = dd07v_node structure = wa_dd07v ).
*    rc = rootnode-&gt;append_child( dd07v_node ).
*  ENDLOOP.

*\--------------------------------------------------------------------/
*  rc = xmldoc-&gt;append_child( lo_rootnode ).
*  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD createobjectfromixmldoc.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

*      Stefan Schmöcker - July 2014
*      Changed to support multilinguitiy


  DATA: gotstate TYPE ddgotstate,
        dd01v_wa TYPE dd01v,
        dd07v_tab TYPE STANDARD TABLE OF dd07v.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA dd07v_node  TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _domaname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

* begin of insertion Multilinguality - check if nugget/slinkee was exported w/o support of multilinguality
  DATA: lv_multilanguagesupport TYPE flag.
  lv_multilanguagesupport = rootnode-&gt;get_attribute( name = c_multilanguagesupport ).
  IF lv_multilanguagesupport IS INITIAL.  &quot; Not found or not set --&gt; use old version of this class
    name = createobjectfromixmldoc_nolang(  ixmldocument =  ixmldocument
                                            devclass     =  devclass
                                            overwrite    =  overwrite    ).
    RETURN.
  ENDIF.
* end of insertion Multilinguality - check if nugget/slinkee was exported w/o support of multilinguality

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd01v_wa.

  objname = dd01v_wa-domname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* begin of deletion Multilinguality - moved down and into loop
** retrieve Domain details
*  FREE: filter, iterator, node.
*  filter = xmldoc-&gt;create_filter_name( &apos;dd07v&apos; ).
*  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
*  node ?= iterator-&gt;get_next( ).
*
*  DATA: wa_dd07v LIKE LINE OF dd07v_tab.
*  WHILE node IS NOT INITIAL.
*    CLEAR dd07v_node.
*    CALL METHOD getstructurefromattributes
*      EXPORTING
*        node      = node
*      CHANGING
*        structure = wa_dd07v.
*    APPEND wa_dd07v TO dd07v_tab.
*    node ?= iterator-&gt;get_next( ).
*  ENDWHILE.
* end of deletion Multilinguality - moved down and into loop

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

* begin of deletion Multilinguality - moved into loop
*  CALL FUNCTION &apos;DDIF_DOMA_PUT&apos;
*    EXPORTING
*      name              = l_dd_objname
*      dd01v_wa          = dd01v_wa
*    TABLES
*      dd07v_tab         = dd07v_tab
*    EXCEPTIONS
*      doma_not_found    = 1
*      name_inconsistent = 2
*      doma_inconsistent = 3
*      put_failure       = 4
*      put_refused       = 5
*      OTHERS            = 6.
*  IF sy-subrc &lt;&gt; 0.
*    RAISE EXCEPTION TYPE zcx_saplink
*      EXPORTING textid = zcx_saplink=&gt;system_error.
*  ENDIF.
* begin of deletion Multilinguality -  moved into loop
* begin of insertion Multilinguality - loop at languages and insert them all
  DATA: lo_langunode  TYPE REF TO if_ixml_element,
        lo_dd01vnode  TYPE REF TO if_ixml_element,
        lo_dd07vnode  TYPE REF TO if_ixml_element,
        ls_dd01v      TYPE dd01v,
        lt_dd07v      TYPE STANDARD TABLE OF dd07v WITH NON-UNIQUE DEFAULT KEY.
  FIELD-SYMBOLS: &lt;ls_dd07v&gt;      LIKE LINE OF lt_dd07v.

  lo_langunode ?= rootnode-&gt;find_from_name( &apos;DDLANGUAGE&apos; ).
  WHILE lo_langunode IS BOUND.  &quot; No need to extract anything from languagenode since language is duplicated in DD01V and DD07V

    CLEAR: ls_dd01v,
           lt_dd07v.
    FREE:  lo_dd01vnode,
           lo_dd07vnode.

* DD01V
    lo_dd01vnode ?= lo_langunode-&gt;find_from_name( &apos;DD01V&apos; ).
    IF lo_dd01vnode IS BOUND.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = lo_dd01vnode
        CHANGING
          structure = ls_dd01v.

* DD07V
      lo_dd07vnode ?= lo_langunode-&gt;find_from_name( &apos;DD07V&apos; ).
      WHILE lo_dd07vnode IS BOUND.
        APPEND INITIAL LINE TO lt_dd07v ASSIGNING &lt;ls_dd07v&gt;.
        CALL METHOD getstructurefromattributes
          EXPORTING
            node      = lo_dd07vnode
          CHANGING
            structure = &lt;ls_dd07v&gt;.
        lo_dd07vnode ?= lo_dd07vnode-&gt;get_next( ).
      ENDWHILE.


      CALL FUNCTION &apos;DDIF_DOMA_PUT&apos;
        EXPORTING
          name              = l_dd_objname
          dd01v_wa          = ls_dd01v
        TABLES
          dd07v_tab         = lt_dd07v
        EXCEPTIONS
          doma_not_found    = 1
          name_inconsistent = 2
          doma_inconsistent = 3
          put_failure       = 4
          put_refused       = 5
          OTHERS            = 6.
      IF sy-subrc &lt;&gt; 0.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
      ENDIF.
    ENDIF.

    lo_langunode ?= lo_langunode-&gt;get_next( ).


  ENDWHILE.
* end of insertion Multilinguality - loop at languages and insert them all



  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objname.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_DOMAINS" CMPNAME="CREATEOBJECTFROMIXMLDOC_NOLANG" VERSION="1" LANGU="D" DESCRIPT="Old nugget/slinkee w/o multilanguagesupport" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_DOMAINS" CMPNAME="CREATEOBJECTFROMIXMLDOC_NOLANG" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <parameter CLSNAME="ZSAPLINK_DOMAINS" CMPNAME="CREATEOBJECTFROMIXMLDOC_NOLANG" SCONAME="DEVCLASS" VERSION="1" LANGU="D" DESCRIPT="Development class/package" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS" PARVALUE="&apos;$TMP&apos;"/>
   <parameter CLSNAME="ZSAPLINK_DOMAINS" CMPNAME="CREATEOBJECTFROMIXMLDOC_NOLANG" SCONAME="OVERWRITE" VERSION="1" LANGU="D" DESCRIPT="Overwrite original objects" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_DOMAINS" CMPNAME="CREATEOBJECTFROMIXMLDOC_NOLANG" SCONAME="NAME" VERSION="1" LANGU="D" DESCRIPT="Installed object name" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <exception CLSNAME="ZSAPLINK_DOMAINS" CMPNAME="CREATEOBJECTFROMIXMLDOC_NOLANG" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
method CREATEOBJECTFROMIXMLDOC_NOLANG.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

*      Stefan Schmöcker - July 2014
*      Changed to support multilinguitiy


  DATA: gotstate TYPE ddgotstate,
        dd01v_wa TYPE dd01v,
        dd07v_tab TYPE STANDARD TABLE OF dd07v.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA dd07v_node  TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _domaname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd01v_wa.

  objname = dd01v_wa-domname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* retrieve Domain details
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd07v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  DATA: wa_dd07v LIKE LINE OF dd07v_tab.
  WHILE node IS NOT INITIAL.
    CLEAR dd07v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_dd07v.
    APPEND wa_dd07v TO dd07v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_DOMA_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd01v_wa          = dd01v_wa
    TABLES
      dd07v_tab         = dd07v_tab
    EXCEPTIONS
      doma_not_found    = 1
      name_inconsistent = 2
      doma_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDIF.



  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objname.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
method DELETEOBJECT.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;DOMA&apos;.  &quot;Domain
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_DATA_ELEMENTS" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Data Dictionary Data Elements" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZSAPLINK_DATA_ELEMENTS" CMPNAME="C_MULTILANGUAGESUPPORT" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;MultiLanguageSupport&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_DATA_ELEMENTS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_DATA_ELEMENTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DATA_ELEMENTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DATA_ELEMENTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DATA_ELEMENTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_DATA_ELEMENTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD CHECKEXISTS.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name TYPE ddobjname,
        dd04v_wa type dd04v.
  l_name = objname.

  CALL FUNCTION &apos;DDIF_DTEL_GET&apos;
    EXPORTING
      name                = l_name
    IMPORTING
      DD04V_WA            = DD04V_WA
    EXCEPTIONS
      ILLEGAL_INPUT       = 1
      OTHERS              = 2.
  IF sy-subrc = 0 AND dd04v_wa-ROLLNAME IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD createixmldocfromobject.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

**      Stefan Schmöcker - July 2014
**      Changed to support multilinguitiy


  DATA: lt_ddlanguage TYPE STANDARD TABLE OF ddlanguage WITH NON-UNIQUE DEFAULT KEY,
        lo_rootnode   TYPE REF TO if_ixml_element,
        lo_langunode  TYPE REF TO if_ixml_element,
        lo_tparanode  TYPE REF TO if_ixml_element,
        lo_dd04vnode  TYPE REF TO if_ixml_element,
        lv_objecttype TYPE string,
        lv_value      TYPE string,
        lv_ddobjname  TYPE ddobjname,
        ls_dd04v      TYPE dd04v.

  FIELD-SYMBOLS: &lt;lv_ddlanguage&gt; LIKE LINE OF lt_ddlanguage.

*--------------------------------------------------------------------*
* First determine all languages that we have to take into account
* This translation could have taken place
*       for the domain description  ( DD01T )
*       or for the fix-values       ( DD07T )
* Get a list of all languages
*--------------------------------------------------------------------*
  SELECT DISTINCT ddlanguage
    INTO TABLE lt_ddlanguage
    FROM dd04t
    WHERE rollname = me-&gt;objname.

*--------------------------------------------------------------------*
* Build rootnode
*--------------------------------------------------------------------*
  lv_objecttype = getobjecttype( ).
  lo_rootnode   = xmldoc-&gt;create_element( lv_objecttype ).

*--------------------------------------------------------------------*
* Simulate old structure to allow old versions of this class to import as well
*--------------------------------------------------------------------*
  DATA: gotstate TYPE ddgotstate,
        dd04v_wa TYPE dd04v,
        tpara_wa TYPE tpara.
  DATA _dtelname  TYPE ddobjname.
  DATA tpara_node TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  _dtelname = objname.

  CALL FUNCTION &apos;DDIF_DTEL_GET&apos;
    EXPORTING
      name          = _dtelname
      langu         = sy-langu
    IMPORTING
      gotstate      = gotstate
      dd04v_wa      = dd04v_wa
      tpara_wa      = tpara_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc &lt;&gt; 0 OR dd04v_wa-rollname IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  setattributesfromstructure( node = lo_rootnode structure = dd04v_wa ).

  tpara_node = xmldoc-&gt;create_element( &apos;tpara&apos; ).
  setattributesfromstructure( node = tpara_node structure = tpara_wa ).
  rc = lo_rootnode-&gt;append_child( tpara_node ).

  lo_rootnode-&gt;set_attribute( name  = c_multilanguagesupport
                              value = &apos;X&apos; ).

*--------------------------------------------------------------------*
* For each language add a language-node,
* and then add the relevant data from DD04
*--------------------------------------------------------------------*
  lv_ddobjname = me-&gt;objname.
  LOOP AT lt_ddlanguage ASSIGNING &lt;lv_ddlanguage&gt;.

    lo_langunode = xmldoc-&gt;create_element( &apos;DDLANGUAGE&apos; ).
    lv_value     = &lt;lv_ddlanguage&gt;.
    lo_langunode-&gt;set_attribute(  name  = &apos;LANGU&apos;
                                  value = lv_value ).

    CLEAR: ls_dd04v.
    CALL FUNCTION &apos;DDIF_DTEL_GET&apos;
      EXPORTING
        name          = lv_ddobjname
        langu         = &lt;lv_ddlanguage&gt;
      IMPORTING
        dd04v_wa      = ls_dd04v
      EXCEPTIONS
        illegal_input = 1
        OTHERS        = 2.
    IF sy-subrc &lt;&gt; 0 OR ls_dd04v-rollname IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;not_found.
    ENDIF.

    lo_dd04vnode = xmldoc-&gt;create_element( &apos;DD04V&apos; ).
    setattributesfromstructure( node      = lo_dd04vnode
                                structure = ls_dd04v ).
    lo_langunode-&gt;append_child( lo_dd04vnode ).


    lo_rootnode-&gt;append_child( lo_langunode ).

  ENDLOOP.

  xmldoc-&gt;append_child( lo_rootnode ).
  ixmldocument = xmldoc.


*
*  DATA: gotstate TYPE ddgotstate,
*        dd04v_wa TYPE dd04v,
*        tpara_wa TYPE tpara.
*
**xml nodes
*  DATA rootnode   TYPE REF TO if_ixml_element.
*  DATA tpara_node TYPE REF TO if_ixml_element.
*  DATA rc         TYPE sysubrc.
*  DATA _dtelname  TYPE ddobjname.
*  _dtelname = objname.
*
*  CALL FUNCTION &apos;DDIF_DTEL_GET&apos;
*    EXPORTING
*      name          = _dtelname
*      langu         = sy-langu
*    IMPORTING
*      gotstate      = gotstate
*      dd04v_wa      = dd04v_wa
*      tpara_wa      = tpara_wa
*    EXCEPTIONS
*      illegal_input = 1
*      OTHERS        = 2.
*
*  IF sy-subrc &lt;&gt; 0 OR dd04v_wa-rollname IS INITIAL.
*    RAISE EXCEPTION TYPE zcx_saplink
*      EXPORTING textid = zcx_saplink=&gt;not_found.
*  ENDIF.
*
** Create parent node
*  DATA _objtype TYPE string.
*  _objtype = getobjecttype( ).
*  rootnode = xmldoc-&gt;create_element( _objtype ).
*  setattributesfromstructure( node = rootnode structure = dd04v_wa ).
*
*  tpara_node = xmldoc-&gt;create_element( &apos;tpara&apos; ).
*  setattributesfromstructure( node = tpara_node structure = tpara_wa ).
*  rc = rootnode-&gt;append_child( tpara_node ).
*
**\--------------------------------------------------------------------/
*  rc = xmldoc-&gt;append_child( rootnode ).
*  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD createobjectfromixmldoc.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

*      Stefan Schmöcker - July 2014
*      Changed to support multilinguitiy

  DATA: gotstate TYPE ddgotstate,
        dd04v_wa TYPE dd04v,
        tpara_wa TYPE tpara.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA tpara_node  TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _dtelname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).


* begin of insertion Multilinguality - check if nugget/slinkee was exported w/o support of multilinguality
  DATA: lv_multilanguagesupport TYPE flag.
  lv_multilanguagesupport = rootnode-&gt;get_attribute( name = c_multilanguagesupport ).
  IF lv_multilanguagesupport IS INITIAL.  &quot; Not found or not set --&gt; use old version of this class
    name = createobjectfromixmldoc_nolang(  ixmldocument =  ixmldocument
                                            devclass     =  devclass
                                            overwrite    =  overwrite    ).
    RETURN.
  ENDIF.
* end of insertion Multilinguality - check if nugget/slinkee was exported w/o support of multilinguality

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd04v_wa.

  objname = dd04v_wa-rollname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* retrieve data element details
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;tpara&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  IF node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = tpara_wa.
  ENDIF.

  DATA : l_pgmid      TYPE tadir-pgmid,
         l_object     TYPE tadir-object,
         l_obj_name   TYPE tadir-obj_name,
         l_dd_objname TYPE ddobjname,
         l_srcsystem  TYPE tadir-srcsystem,
         l_author     TYPE tadir-author,
         l_devclass   TYPE tadir-devclass,
         l_masterlang TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

* begin of deletion Multilinguality - moved into loop
*  CALL FUNCTION &apos;DDIF_DTEL_PUT&apos;
*    EXPORTING
*      name              = l_dd_objname
*      dd04v_wa          = dd04v_wa
*    EXCEPTIONS
*      dtel_not_found    = 1
*      name_inconsistent = 2
*      dtel_inconsistent = 3
*      put_failure       = 4
*      put_refused       = 5
*      OTHERS            = 6.
*
*  IF sy-subrc &lt;&gt; 0.
*    RAISE EXCEPTION TYPE zcx_saplink
*      EXPORTING textid = zcx_saplink=&gt;system_error.
*  ENDIF.
* begin of deletion Multilinguality -  moved into loop
* begin of insertion Multilinguality - loop at languages and insert them all
  DATA: lo_langunode TYPE REF TO if_ixml_element,
        lo_dd04vnode TYPE REF TO if_ixml_element,
        ls_dd04v     TYPE dd04v.

  lo_langunode ?= rootnode-&gt;find_from_name( &apos;DDLANGUAGE&apos; ).
  WHILE lo_langunode IS BOUND.  &quot; No need to extract anything from languagenode since language is duplicated in DD01V and DD07V

    CLEAR: ls_dd04v.
    FREE:  lo_dd04vnode.

* DD04V
    lo_dd04vnode ?= lo_langunode-&gt;find_from_name( &apos;DD04V&apos; ).
    IF lo_dd04vnode IS BOUND.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = lo_dd04vnode
        CHANGING
          structure = ls_dd04v.

      CALL FUNCTION &apos;DDIF_DTEL_PUT&apos;
        EXPORTING
          name              = l_dd_objname
          dd04v_wa          = ls_dd04v
        EXCEPTIONS
          dtel_not_found    = 1
          name_inconsistent = 2
          dtel_inconsistent = 3
          put_failure       = 4
          put_refused       = 5
          OTHERS            = 6.

      IF sy-subrc &lt;&gt; 0.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;system_error.
      ENDIF.
    ENDIF.

    lo_langunode ?= lo_langunode-&gt;get_next( ).

  ENDWHILE.

* end of insertion Multilinguality - loop at languages and insert them all

  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objname.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_DATA_ELEMENTS" CMPNAME="CREATEOBJECTFROMIXMLDOC_NOLANG" VERSION="1" LANGU="D" DESCRIPT="Old nugget/slinkee w/o multilanguagesupport" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_DATA_ELEMENTS" CMPNAME="CREATEOBJECTFROMIXMLDOC_NOLANG" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <parameter CLSNAME="ZSAPLINK_DATA_ELEMENTS" CMPNAME="CREATEOBJECTFROMIXMLDOC_NOLANG" SCONAME="DEVCLASS" VERSION="1" LANGU="D" DESCRIPT="Development class/package" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS" PARVALUE="&apos;$TMP&apos;"/>
   <parameter CLSNAME="ZSAPLINK_DATA_ELEMENTS" CMPNAME="CREATEOBJECTFROMIXMLDOC_NOLANG" SCONAME="OVERWRITE" VERSION="1" LANGU="D" DESCRIPT="Overwrite original objects" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_DATA_ELEMENTS" CMPNAME="CREATEOBJECTFROMIXMLDOC_NOLANG" SCONAME="NAME" VERSION="1" LANGU="D" DESCRIPT="Installed object name" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <exception CLSNAME="ZSAPLINK_DATA_ELEMENTS" CMPNAME="CREATEOBJECTFROMIXMLDOC_NOLANG" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method CREATEOBJECTFROMIXMLDOC_NOLANG.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate TYPE ddgotstate,
        dd04v_wa TYPE dd04v,
        tpara_wa TYPE tpara.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA tpara_node  TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _dtelname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd04v_wa.

  objname = dd04v_wa-rollname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* retrieve Domain details
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;tpara&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  IF node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = tpara_wa.
  ENDIF.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_DTEL_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd04v_wa          = dd04v_wa
    EXCEPTIONS
      dtel_not_found    = 1
      name_inconsistent = 2
      dtel_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.

  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDIF.

  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objName.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
method DELETEOBJECT.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;DTEL&apos;.  &quot;Data Elements
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_TABLE_TYPES" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Data Dictionary  - Table Types" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_TABLE_TYPES" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_TABLE_TYPES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_TYPES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_TYPES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_TYPES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_TYPES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014-2015 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD CHECKEXISTS.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name   TYPE ddobjname,
        dd40v_wa TYPE dd40v.
  l_name = objname.
  CALL FUNCTION &apos;DDIF_TTYP_GET&apos;
    EXPORTING
      name          = l_name
    IMPORTING
      dd40v_wa      = dd40v_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc = 0 AND dd40v_wa-typename IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014-2015 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD createixmldocfromobject.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate   TYPE ddgotstate,
        dd40v_wa   TYPE dd40v,
        lt_dd42v   TYPE STANDARD TABLE OF dd42v WITH NON-UNIQUE DEFAULT KEY,
        ls_dd42v   LIKE LINE OF lt_dd42v,
        lt_dd43v   TYPE STANDARD TABLE OF dd43v WITH NON-UNIQUE DEFAULT KEY,
        ls_dd43v   LIKE LINE OF lt_dd43v,

        _objtype   TYPE string,

*xml nodes
        rootnode   TYPE REF TO if_ixml_element,
        dd42v_node TYPE REF TO if_ixml_element,
        dd43v_node TYPE REF TO if_ixml_element,
        rc         TYPE sysubrc,
        _ttypname  TYPE ddobjname.


  _ttypname  = objname.

  CALL FUNCTION &apos;DDIF_TTYP_GET&apos;
    EXPORTING
      name          = _ttypname
      langu         = sy-langu
    IMPORTING
      gotstate      = gotstate
      dd40v_wa      = dd40v_wa
    TABLES
      dd42v_tab     = lt_dd42v
      dd43v_tab     = lt_dd43v
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc &lt;&gt; 0 OR dd40v_wa-typename IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = dd40v_wa ).

  LOOP AT lt_dd42v INTO ls_dd42v.
    dd42v_node = xmldoc-&gt;create_element( &apos;dd42v&apos; ).
    setattributesfromstructure( node = dd42v_node structure = ls_dd42v ).
    rc = rootnode-&gt;append_child( dd42v_node ).
  ENDLOOP.

  LOOP AT lt_dd43v INTO ls_dd43v.
    dd43v_node = xmldoc-&gt;create_element( &apos;dd43v&apos; ).
    setattributesfromstructure( node = dd43v_node structure = ls_dd43v ).
    rc = rootnode-&gt;append_child( dd43v_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014-2015 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD createobjectfromixmldoc.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate     TYPE ddgotstate,
        dd40v_wa     TYPE dd40v,
        lt_dd42v     TYPE STANDARD TABLE OF dd42v WITH NON-UNIQUE DEFAULT KEY,
        ls_dd42v     LIKE LINE OF lt_dd42v,
        lt_dd43v     TYPE STANDARD TABLE OF dd43v WITH NON-UNIQUE DEFAULT KEY,
        ls_dd43v     LIKE LINE OF lt_dd43v,

*xml nodes
        rootnode     TYPE REF TO if_ixml_element,
        dd42v_node   TYPE REF TO if_ixml_element,
        dd43v_node   TYPE REF TO if_ixml_element,
        node         TYPE REF TO if_ixml_element,
        filter       TYPE REF TO if_ixml_node_filter,
        iterator     TYPE REF TO if_ixml_node_iterator,
        rc           TYPE sysubrc,
        _ttypname    TYPE ddobjname,
        _devclass    TYPE devclass,
        checkexists  TYPE flag,
        _objtype     TYPE string,
* putting object into ddic
        l_pgmid      TYPE tadir-pgmid,
        l_object     TYPE tadir-object,
        l_obj_name   TYPE tadir-obj_name,
        l_dd_objname TYPE ddobjname,
        l_srcsystem  TYPE tadir-srcsystem,
        l_author     TYPE tadir-author,
        l_devclass   TYPE tadir-devclass,
        l_masterlang TYPE tadir-masterlang.


  _devclass   = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd40v_wa.

  objname = dd40v_wa-typename.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* retrieve table type details
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd42v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CLEAR dd42v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ls_dd42v.
    APPEND ls_dd42v TO lt_dd42v.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd43v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CLEAR dd43v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ls_dd43v.
    APPEND ls_dd43v TO lt_dd43v.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_TTYP_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd40v_wa          = dd40v_wa
    TABLES
      dd42v_tab         = lt_dd42v
      dd43v_tab         = lt_dd43v
    EXCEPTIONS
      ttyp_not_found    = 1
      name_inconsistent = 2
      ttyp_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;system_error.
  ENDIF.



  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objname.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014-2015 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD DELETEOBJECT.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014-2015 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD GETOBJECTTYPE.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;TTYP&apos;.  &quot;Table Type
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_NROB" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Nummernkreisobjekte" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool>
   <language SPRAS="D">
    <textElement ID="I" KEY="E01" ENTRY="Fehler in NUMBER_RANGE_OBJECT_READ" LENGTH="48 "/>
   </language>
  </textPool>
  <inheritance CLSNAME="ZSAPLINK_NROB" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_NROB" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_NROB" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_NROB" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_NROB" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_NROB" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD checkexists .
*
  DATA:
    lv_object     TYPE nrobj.

  SELECT SINGLE object
         FROM   tnro
         INTO   lv_object
         WHERE  object = objname.
*
  exists = boolc( sy-subrc = 0 ).
*
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createixmldocfromobject .
*
  DATA:
    lv_rc         TYPE i,
    lv_object     TYPE nrobj.

  DATA:
    ls_attributes TYPE tnro,
    ls_text       TYPE tnrot.

  DATA:
    lo_root       TYPE REF TO if_ixml_element,
    lo_node       TYPE REF TO if_ixml_element.
*
  lv_object = objname.

  CALL FUNCTION &apos;NUMBER_RANGE_OBJECT_READ&apos;
    EXPORTING
      language          = sy-langu
      object            = lv_object
    IMPORTING
      object_attributes = ls_attributes
      object_text       = ls_text
    EXCEPTIONS
      object_not_found  = 1
      OTHERS            = 2.
*
  CASE sy-subrc.
    WHEN 0.
    WHEN 1.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;not_found.
    WHEN OTHERS.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = |{ &apos;Fehler in NUMBER_RANGE_OBJECT_READ&apos;(e01) }|.
  ENDCASE.
*
  lo_root = xmldoc-&gt;create_element( getobjecttype( ) ).
  lo_root-&gt;set_attribute( name  = &apos;NROB_NAME&apos;
                          value = objname  ).
*
  lo_node = xmldoc-&gt;create_element( &apos;ATTRIBUTES&apos; ).
  setattributesfromstructure( node      = lo_node
                              structure = ls_attributes ).
  lv_rc = lo_root-&gt;append_child( lo_node ).
*
  lo_node = xmldoc-&gt;create_element( &apos;TEXT&apos; ).
  setattributesfromstructure( node      = lo_node
                              structure = ls_text ).
  lv_rc = lo_root-&gt;append_child( lo_node ).
*
  lv_rc = xmldoc-&gt;append_child( lo_root ).
  ixmldocument = xmldoc.
*
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createobjectfromixmldoc .
*
  DATA:
    lv_mtext      TYPE string.

  DATA:
    lt_errors     TYPE TABLE OF inoer,
    ls_attributes TYPE tnro,
    ls_text       TYPE tnrot.

  DATA:
    lo_root       TYPE REF TO if_ixml_element,
    lo_node       TYPE REF TO if_ixml_element.
*
  xmldoc = ixmldocument.
  lo_root = xmldoc-&gt;find_from_name( getobjecttype( ) ).
*
  lo_node = xmldoc-&gt;find_from_name( &apos;ATTRIBUTES&apos; ).
  getstructurefromattributes( EXPORTING
                                node      = lo_node
                              CHANGING
                                structure = ls_attributes ).
*
  objname = ls_attributes-object.
*
  IF checkexists( ) = abap_true.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
    ELSE.
      deleteobject( ).
    ENDIF.
  ENDIF.
*
  lo_node = xmldoc-&gt;find_from_name( &apos;TEXT&apos; ).
  getstructurefromattributes( EXPORTING
                                node      = lo_node
                              CHANGING
                                structure = ls_text ).
*
  CALL FUNCTION &apos;NUMBER_RANGE_OBJECT_UPDATE&apos;
    EXPORTING
      indicator                 = &apos;I&apos;
      object_attributes         = ls_attributes
      object_text               = ls_text
    TABLES
      errors                    = lt_errors
    EXCEPTIONS
      object_already_exists     = 1
      object_attributes_missing = 2
      object_not_found          = 3
      object_text_missing       = 4
      wrong_indicator           = 5
      OTHERS                    = 6.
*
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
           WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
           INTO lv_mtext.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_mtext.
  ENDIF.
*
  CALL FUNCTION &apos;NUMBER_RANGE_OBJECT_CLOSE&apos;
    EXPORTING
      object                 = ls_attributes-object
    EXCEPTIONS
      object_not_initialized = 1.
*
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
            INTO lv_mtext.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_mtext.
  ENDIF.
*
  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus       = abap_false
      wi_tadir_pgmid      = &apos;R3TR&apos;
      wi_tadir_object     = &apos;NROB&apos;
      wi_tadir_obj_name   = objname
      wi_tadir_author     = sy-uname
      wi_tadir_devclass   = devclass
      wi_tadir_masterlang = sy-langu
      wi_set_genflag      = abap_true
    EXCEPTIONS
      OTHERS              = 1.
*
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
            INTO lv_mtext.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_mtext.
  ENDIF.
*
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD deleteobject .
*
  DATA:
    lv_mtext      TYPE string,
    lv_object     TYPE nrobj.

  lv_object = objname.

  CALL FUNCTION &apos;NUMBER_RANGE_OBJECT_DELETE&apos;
    EXPORTING
      language           = sy-langu
      object             = lv_object
    EXCEPTIONS
      delete_not_allowed = 1
      object_not_found   = 2
      wrong_indicator    = 3
      OTHERS             = 4.
*
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
            INTO lv_mtext.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_mtext.
  ENDIF.
*
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD getobjecttype .
*
  objecttype = &apos;NROB&apos;. &quot;NROB Node
*
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_SHI3" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Bereichmenüs" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <types CLSNAME="ZSAPLINK_SHI3" CMPNAME="TY_ID_MAP" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="6 " SRCCOLUMN1="4 " SRCROW2="9 " SRCCOLUMN2="24 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF ty_id_map,
           old TYPE ttree-id,
           new TYPE ttree-id,
         END OF ty_id_map
"/>
  <types CLSNAME="ZSAPLINK_SHI3" CMPNAME="TT_ID_MAP" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="11 " SRCCOLUMN1="4 " SRCROW2="11 " SRCCOLUMN2="45 " TYPESRC_LENG="0 " TYPESRC="tt_id_map TYPE STANDARD TABLE OF ty_id_map
"/>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool>
   <language SPRAS="D">
    <textElement ID="I" KEY="E01" ENTRY="ID nicht ersetzbar, SHI3" LENGTH="48 "/>
   </language>
  </textPool>
  <attribute CLSNAME="ZSAPLINK_SHI3" CMPNAME="GT_MAP" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TT_ID_MAP" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_SHI3" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_SHI3" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SHI3" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SHI3" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SHI3" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_SHI3" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD checkexists .
*
  DATA:
    lv_structure_id   TYPE hier_treeg.

  DATA:
    ls_msg    TYPE hier_mess,
    ls_header TYPE ttree,
    ls_tadir  TYPE tadir.
*
  lv_structure_id = objname.
  CALL FUNCTION &apos;STREE_STRUCTURE_EXIST&apos;
    EXPORTING
      structure_id         = lv_structure_id
      do_not_read_devclass = &apos;&apos;
    IMPORTING
      message              = ls_msg
      structure_header     = ls_header
      structure_tadir      = ls_tadir.
*
  exists = boolc( ls_header-id IS NOT INITIAL ).
*
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createixmldocfromobject .
*
  DATA:
    lv_rc             TYPE i,
    lv_structure_id   TYPE hier_treeg.

  DATA:
    ls_msg            TYPE hier_mess,
    ls_head           TYPE ttree,
    lt_titles         TYPE TABLE OF ttreet,
    lt_nodes          TYPE TABLE OF hier_iface,
    lt_texts          TYPE TABLE OF hier_texts,
    lt_refs           TYPE TABLE OF hier_ref.

  DATA:
    lo_root           TYPE REF TO if_ixml_element,
    lo_node           TYPE REF TO if_ixml_element.

  FIELD-SYMBOLS:
    &lt;ls_node&gt;         TYPE hier_iface,
    &lt;ls_nodes&gt;        TYPE hier_iface,
    &lt;ls_refs&gt;         TYPE hier_ref,
    &lt;ls_texts&gt;        TYPE hier_texts,
    &lt;ls_titles&gt;       TYPE ttreet.
*
  lv_structure_id = objname.

  CALL FUNCTION &apos;STREE_STRUCTURE_READ&apos;
    EXPORTING
      structure_id     = lv_structure_id
    IMPORTING
      message          = ls_msg
      structure_header = ls_head
    TABLES
      description      = lt_titles.
*
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;not_found.
  ENDIF.
*
  CALL FUNCTION &apos;STREE_HIERARCHY_READ&apos;
    EXPORTING
      structure_id       = lv_structure_id
      read_also_texts    = abap_true
      all_languages      = abap_true
    IMPORTING
      message            = ls_msg
    TABLES
      list_of_nodes      = lt_nodes
      list_of_references = lt_refs
      list_of_texts      = lt_texts.
*
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;not_found.
  ENDIF.
*
  CLEAR:
    ls_head-luser,
    ls_head-ldate,
    ls_head-ltime,
    ls_head-fuser,
    ls_head-fdate,
    ls_head-ftime,
    ls_head-responsibl.
*
  LOOP AT lt_nodes ASSIGNING &lt;ls_node&gt;.
    CLEAR:
      &lt;ls_node&gt;-luser,
      &lt;ls_node&gt;-ldate,
      &lt;ls_node&gt;-ltime,
      &lt;ls_node&gt;-fuser,
      &lt;ls_node&gt;-fdate,
      &lt;ls_node&gt;-ftime.
  ENDLOOP.
*
  lo_root = xmldoc-&gt;create_element( getobjecttype( ) ).
  lo_root-&gt;set_attribute( name  = &apos;BMENU_NAME&apos;
                          value = objname  ).
*
  lo_node = xmldoc-&gt;create_element( &apos;TREE_HEAD&apos; ).
  setattributesfromstructure( node      = lo_node
                              structure = ls_head ).
  lv_rc = lo_root-&gt;append_child( lo_node ).
*
  LOOP AT lt_titles ASSIGNING &lt;ls_titles&gt;.
    lo_node = xmldoc-&gt;create_element( &apos;TREE_TITLES&apos; ).
    setattributesfromstructure( node      = lo_node
                                structure = &lt;ls_titles&gt; ).
    lv_rc = lo_root-&gt;append_child( lo_node ).
  ENDLOOP.
*
  LOOP AT lt_nodes ASSIGNING &lt;ls_nodes&gt;.
    lo_node = xmldoc-&gt;create_element( &apos;TREE_NODES&apos; ).
    setattributesfromstructure( node      = lo_node
                                structure = &lt;ls_nodes&gt; ).
    lv_rc = lo_root-&gt;append_child( lo_node ).
  ENDLOOP.
*
  LOOP AT lt_refs ASSIGNING &lt;ls_refs&gt;.
    lo_node = xmldoc-&gt;create_element( &apos;TREE_REFS&apos; ).
    setattributesfromstructure( node      = lo_node
                                structure = &lt;ls_refs&gt; ).
    lv_rc = lo_root-&gt;append_child( lo_node ).
  ENDLOOP.
*
  LOOP AT lt_texts ASSIGNING &lt;ls_texts&gt;.
    lo_node = xmldoc-&gt;create_element( &apos;TREE_TEXTS&apos; ).
    setattributesfromstructure( node      = lo_node
                                structure = &lt;ls_texts&gt; ).
    lv_rc = lo_root-&gt;append_child( lo_node ).
  ENDLOOP.
*
  lv_rc = xmldoc-&gt;append_child( lo_root ).
  ixmldocument = xmldoc.
*
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createobjectfromixmldoc .
*
  DATA:
    lv_mtext  TYPE string.

  DATA:
    ls_msg    TYPE hier_mess,
    ls_head   TYPE ttree,
    ls_titles TYPE ttreet,
    ls_nodes  TYPE hier_iface,
    ls_texts  TYPE hier_texts,
    ls_refs   TYPE hier_ref,
    lt_titles TYPE TABLE OF ttreet,
    lt_nodes  TYPE TABLE OF hier_iface,
    lt_texts  TYPE TABLE OF hier_texts,
    lt_refs   TYPE TABLE OF hier_ref.

  DATA:
    lo_root   TYPE REF TO if_ixml_element,
    lo_node   TYPE REF TO if_ixml_element,
    lo_filter TYPE REF TO if_ixml_node_filter,
    lo_iter   TYPE REF TO if_ixml_node_iterator.
*
  xmldoc = ixmldocument.
  lo_root = xmldoc-&gt;find_from_name( getobjecttype( ) ).
*
* Header
*
  lo_node = xmldoc-&gt;find_from_name( &apos;TREE_HEAD&apos; ).
  getstructurefromattributes( EXPORTING
                                node      = lo_node
                              CHANGING
                                structure = ls_head ).
*
  objname = ls_head-id.
*
  IF checkexists( ) = abap_true.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
    ELSE.
      deleteobject( ).
    ENDIF.
  ENDIF.
*
* Titles
*
  lo_filter =  xmldoc-&gt;create_filter_name( &apos;TREE_TITLES&apos; ).
  lo_iter   =  xmldoc-&gt;create_iterator_filtered( lo_filter ).
  lo_node         ?= lo_iter-&gt;get_next( ).
  WHILE lo_node IS NOT INITIAL.
    CLEAR ls_titles.
    getstructurefromattributes( EXPORTING
                                  node      = lo_node
                                CHANGING
                                  structure = ls_titles ).
    APPEND ls_titles TO lt_titles.
    lo_node ?= lo_iter-&gt;get_next( ).
  ENDWHILE.
*
* Nodes
*
  FREE:
    lo_filter,
    lo_iter,
    lo_node.
*
  lo_filter =  xmldoc-&gt;create_filter_name( &apos;TREE_NODES&apos; ).
  lo_iter   =  xmldoc-&gt;create_iterator_filtered( lo_filter ).
  lo_node   ?= lo_iter-&gt;get_next( ).
  WHILE lo_node IS NOT INITIAL.
    CLEAR ls_nodes.
    getstructurefromattributes( EXPORTING
                                  node      = lo_node
                                CHANGING
                                  structure = ls_nodes ).
    APPEND ls_nodes TO lt_nodes.
    lo_node ?= lo_iter-&gt;get_next( ).
  ENDWHILE.
*
* Refs
*
  FREE:
    lo_filter,
    lo_iter,
    lo_node.
*
  lo_filter =  xmldoc-&gt;create_filter_name( &apos;TREE_REFS&apos; ).
  lo_iter   =  xmldoc-&gt;create_iterator_filtered( lo_filter ).
  lo_node   ?= lo_iter-&gt;get_next( ).
  WHILE lo_node IS NOT INITIAL.
    CLEAR ls_refs.
    getstructurefromattributes( EXPORTING
                                  node      = lo_node
                                CHANGING
                                  structure = ls_refs ).
    APPEND ls_refs TO lt_refs.
    lo_node ?= lo_iter-&gt;get_next( ).
  ENDWHILE.
*
* Texts
*
  FREE:
    lo_filter,
    lo_iter,
    lo_node.
*
  lo_filter =  xmldoc-&gt;create_filter_name( &apos;TREE_TEXTS&apos; ).
  lo_iter   =  xmldoc-&gt;create_iterator_filtered( lo_filter ).
  lo_node   ?= lo_iter-&gt;get_next( ).
  WHILE lo_node IS NOT INITIAL.
    CLEAR ls_texts.
    getstructurefromattributes( EXPORTING
                                  node      = lo_node
                                CHANGING
                                  structure = ls_texts ).
    APPEND ls_texts TO lt_texts.
    lo_node ?= lo_iter-&gt;get_next( ).
  ENDWHILE.
*
* IDs neu aufbauen
*
  regenerate_ids( CHANGING
                    ct_nodes = lt_nodes
                    ct_refs  = lt_refs
                    ct_texts = lt_texts ).
*
  CALL FUNCTION &apos;STREE_HIERARCHY_SAVE&apos;
    EXPORTING
      structure_id             = ls_head-id
      structure_type           = &apos;BMENU&apos;
      structure_description    = abap_false
      structure_masterlanguage = sy-langu
      structure_responsible    = sy-uname
      development_class        = devclass
    IMPORTING
      message                  = ls_msg
    TABLES
      list_of_nodes            = lt_nodes
      list_of_references       = lt_refs
      list_of_texts            = lt_texts
      structure_descriptions   = lt_titles
    EXCEPTIONS
      no_nodes_given           = 1
      OTHERS                   = 2.
*
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
            INTO lv_mtext.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_mtext.
  ENDIF.
*
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD deleteobject .
*
  DATA:
    lv_mtext    TYPE string.

  CALL FUNCTION &apos;BMENU_DELETE_TREE&apos;
    EXPORTING
      tree_id            = objname
    EXCEPTIONS
      trees_do_not_exist = 1
      no_authority       = 2
      canceled           = 3
    OTHERS               = 4.
*
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
            INTO lv_mtext.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_mtext.
  ENDIF.
*
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD getobjecttype .
*
  objecttype = &apos;SHI3&apos;. &quot;SHI3 Node
*
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_SHI3" CMPNAME="REGENERATE_IDS" VERSION="1" LANGU="D" DESCRIPT="IDs wiederherstellen" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_SHI3" CMPNAME="REGENERATE_IDS" SCONAME="CT_NODES" VERSION="1" LANGU="D" DESCRIPT="Schnittstellentabelle für Hierarchieknoten" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="HIER_IFACE_T"/>
   <parameter CLSNAME="ZSAPLINK_SHI3" CMPNAME="REGENERATE_IDS" SCONAME="CT_REFS" VERSION="1" LANGU="D" DESCRIPT="Verweistabelle für Knoten in der Hierarchietabelle" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="HIER_REF_T"/>
   <parameter CLSNAME="ZSAPLINK_SHI3" CMPNAME="REGENERATE_IDS" SCONAME="CT_TEXTS" VERSION="1" LANGU="D" DESCRIPT="Schnittstellentabelle für Texte in der Hierarchiepflege" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="HIER_TEXTS_T"/>
   <exception CLSNAME="ZSAPLINK_SHI3" CMPNAME="REGENERATE_IDS" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD regenerate_ids.
*
  DATA:
    ls_uid TYPE sys_uid.

  FIELD-SYMBOLS:
    &lt;ls_text&gt;   TYPE hier_texts,
    &lt;ls_ref&gt;    TYPE hier_ref,
    &lt;ls_map&gt;    TYPE ty_id_map,
    &lt;ls_node&gt;   TYPE hier_iface.
*
* Build map
*
  LOOP AT ct_nodes ASSIGNING &lt;ls_node&gt;.
    APPEND INITIAL LINE TO me-&gt;gt_map ASSIGNING &lt;ls_map&gt;.
    IF &lt;ls_node&gt;-parent_id IS INITIAL.
      &lt;ls_map&gt;-old = &lt;ls_node&gt;-node_id.
      &lt;ls_map&gt;-new = &lt;ls_node&gt;-node_id. &quot;Root node
    ELSE.
      CALL FUNCTION &apos;STREE_GET_UNIQUE_ID&apos;
        IMPORTING
          unique_id = ls_uid.
      &lt;ls_map&gt;-old  = &lt;ls_node&gt;-node_id.
      &lt;ls_map&gt;-new  = ls_uid-id.
    ENDIF.
    &lt;ls_node&gt;-node_id = &lt;ls_map&gt;-new. &quot;Replace id
  ENDLOOP.
*
  SORT me-&gt;gt_map.
*
  LOOP AT ct_nodes ASSIGNING &lt;ls_node&gt;.
    &lt;ls_node&gt;-parent_id  = replace_id( &lt;ls_node&gt;-parent_id ).
    &lt;ls_node&gt;-brother_id = replace_id( &lt;ls_node&gt;-brother_id ).
  ENDLOOP.
*
  LOOP AT ct_refs ASSIGNING &lt;ls_ref&gt;.
    &lt;ls_ref&gt;-node_id = replace_id( &lt;ls_ref&gt;-node_id ).
  ENDLOOP.
*
  LOOP AT ct_texts ASSIGNING &lt;ls_text&gt;.
    &lt;ls_text&gt;-node_id = replace_id( &lt;ls_text&gt;-node_id ).
  ENDLOOP.
*
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_SHI3" CMPNAME="REPLACE_ID" VERSION="1" LANGU="D" DESCRIPT="ID ersetzen" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_SHI3" CMPNAME="REPLACE_ID" SCONAME="IV_ID" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CLIKE"/>
   <parameter CLSNAME="ZSAPLINK_SHI3" CMPNAME="REPLACE_ID" SCONAME="RV_NEW_ID" VERSION="1" LANGU="D" DESCRIPT="GUID für Struktur" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TTREE-ID"/>
   <exception CLSNAME="ZSAPLINK_SHI3" CMPNAME="REPLACE_ID" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD replace_id.

  FIELD-SYMBOLS:
    &lt;ls_map&gt;    TYPE ty_id_map.
*
  IF iv_id IS INITIAL.
    RETURN. &quot;No substitution for empty values
  ENDIF.
*
  READ TABLE me-&gt;gt_map ASSIGNING &lt;ls_map&gt; INDEX iv_id.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = |{ &apos;ID nicht ersetzbar, SHI3&apos;(e01) }|.
  ENDIF.
*
  rv_new_id = &lt;ls_map&gt;-new.
*
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_SOTS" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Konzepte Strings" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool>
   <language SPRAS="D">
    <textElement ID="I" KEY="E01" ENTRY="SOTS : Paket nicht gefunden" LENGTH="52 "/>
    <textElement ID="I" KEY="E02" ENTRY="SOTS : Konzept nicht gefunden" LENGTH="56 "/>
    <textElement ID="I" KEY="E03" ENTRY="Paket" LENGTH="15 "/>
    <textElement ID="I" KEY="E04" ENTRY="existiert nicht!" LENGTH="26 "/>
   </language>
  </textPool>
  <inheritance CLSNAME="ZSAPLINK_SOTS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_SOTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SOTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SOTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SOTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_SOTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
*
* No implementation
*
  exists = abap_true.
*
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createixmldocfromobject.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
*
  TYPES:
    BEGIN OF ts_paket,
      paket         TYPE devclass,
    END   OF ts_paket.
*
  DATA:
    lv_rc           TYPE i.

  DATA:
    lt_otrkeys      TYPE sotrt_keys,
    lt_texts        TYPE sotr_textl_tt,
    ls_head         TYPE sotr_headu,
    ls_paket        TYPE ts_paket.

  DATA:
    lo_root         TYPE REF TO if_ixml_element,
    lo_node         TYPE REF TO if_ixml_element,
    lo_node2        TYPE REF TO if_ixml_element.

  FIELD-SYMBOLS:
    &lt;ls_texts&gt;      TYPE sotr_textl,
    &lt;ls_otrkeys&gt;    TYPE sotr_key.
*
  ls_paket-paket = objname.
*
  CALL FUNCTION &apos;SOTR_STRING_GET_KEYS_FOR_PACK&apos;
    EXPORTING
      paket          = ls_paket-paket
    IMPORTING
      sotr_keys      = lt_otrkeys
    EXCEPTIONS
      no_entry_found = 1
      OTHERS         = 2.
*
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = |{ &apos;SOTS : Paket nicht gefunden&apos;(e01) }|.
  ENDIF.
*
  lo_root = xmldoc-&gt;create_element( getobjecttype( ) ).
  me-&gt;setattributesfromstructure( node      = lo_root
                                  structure = ls_paket ).
*
  LOOP AT lt_otrkeys ASSIGNING &lt;ls_otrkeys&gt;.
*
    CLEAR:
      lt_texts,
      ls_head.
*
    CALL FUNCTION &apos;SOTR_STRING_GET_CONCEPT&apos;
      EXPORTING
        concept        = &lt;ls_otrkeys&gt;-concept
      IMPORTING
        header         = ls_head
        entries        = lt_texts
      EXCEPTIONS
        no_entry_found = 1
        OTHERS         = 2.
*
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = |{ &apos;SOTS : Konzept nicht gefunden&apos;(e02) }|.
    ENDIF.
*
* Header
*
    lo_node = xmldoc-&gt;create_element( &apos;SOTS_HEAD&apos; ).
    me-&gt;setattributesfromstructure( node      = lo_node
                                    structure = ls_head ).
*
* Texte
*
    LOOP AT lt_texts ASSIGNING &lt;ls_texts&gt;.
      lo_node2 = xmldoc-&gt;create_element( &apos;SOTS_TEXT&apos; ).
      me-&gt;setattributesfromstructure( node      = lo_node2
                                      structure = &lt;ls_texts&gt; ).
      lv_rc = lo_node-&gt;append_child( lo_node2 ).
    ENDLOOP.
*
    lv_rc = lo_root-&gt;append_child( lo_node ).
  ENDLOOP.
*
  lv_rc = xmldoc-&gt;append_child( lo_root ).
  ixmldocument = xmldoc.
*
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createobjectfromixmldoc.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
*
  TYPES:
    BEGIN OF ts_paket,
      paket         TYPE devclass,
    END   OF ts_paket.
*
  DATA:
    lv_mtext        TYPE string.

  DATA:
    lo_node         TYPE REF TO if_ixml_element,
    lt_text         TYPE sotr_textl_tt,
    lt_head         TYPE sotr_headu_tt,
    ls_text         TYPE sotr_textl,
    ls_head         TYPE sotr_headu,
    ls_paket        TYPE ts_paket.

  DATA:
    lo_root         TYPE REF TO if_ixml_element,
    lo_filter       TYPE REF TO if_ixml_node_filter,
    lo_iter         TYPE REF TO if_ixml_node_iterator,
    lo_filter2      TYPE REF TO if_ixml_node_filter,
    lo_iter2        TYPE REF TO if_ixml_node_iterator.
*
  &quot; --&gt;
  &quot; CHECKEXISTS liefert immer true
  &quot;   deshalb vorsorglich löschen
  IF checkexists( ) IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
    ELSE.
      deleteobject( ).
    ENDIF.
  ENDIF.
  &quot; &lt;--
*
  xmldoc = ixmldocument.
  lo_root = xmldoc-&gt;find_from_name( getobjecttype( ) ).
*
  me-&gt;getstructurefromattributes( EXPORTING
                                    node      = lo_root
                                  CHANGING
                                    structure = ls_paket ).
*
* Existiert das Paket?
*
  SELECT COUNT(*)
         FROM tdevc
         WHERE devclass = ls_paket-paket.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = &apos;Paket&apos;(e03)   &amp;&amp; ` `
              &amp;&amp; ls_paket-paket &amp;&amp; ` `
              &amp;&amp; &apos;existiert nicht!&apos;(e04).
  ENDIF.
*
* Header
*
  lo_filter =  xmldoc-&gt;create_filter_name( &apos;SOTS_HEAD&apos; ).
  lo_iter   =  xmldoc-&gt;create_iterator_filtered( lo_filter ).
  lo_root         ?= lo_iter-&gt;get_next( ).
  WHILE lo_root IS NOT INITIAL.
    CLEAR ls_head.
    getstructurefromattributes( EXPORTING
                                  node      = lo_root
                                CHANGING
                                  structure = ls_head ).
*
* Texte
*
    lo_filter2 =  xmldoc-&gt;create_filter_name( &apos;SOTS_TEXT&apos; ).
    lo_iter2   =  xmldoc-&gt;create_iterator_filtered( lo_filter2 ).
    lo_node          ?= lo_iter2-&gt;get_next( ).
*
    WHILE lo_node IS NOT INITIAL.
      getstructurefromattributes( EXPORTING
                                    node      = lo_node
                                  CHANGING
                                    structure = ls_text ).
      APPEND ls_text TO lt_text.
      lo_node          ?= lo_iter2-&gt;get_next( ).
    ENDWHILE.
*
    CALL FUNCTION &apos;SOTR_STRING_CREATE_CONCEPT&apos;
      EXPORTING
        paket                         = ls_paket-paket
        crea_lan                      = ls_head-crea_lan
        alias_name                    = ls_head-alias_name
        object                        = &apos;WDCC&apos;
        entries                       = lt_text
      EXCEPTIONS
        package_missing               = 1
        crea_lan_missing              = 2
        object_missing                = 3
        paket_does_not_exist          = 4
        alias_already_exist           = 5
        object_type_not_found         = 6
        langu_missing                 = 7
        identical_context_not_allowed = 8
        text_too_long                 = 9
        error_in_update               = 10
        no_master_langu               = 11
        error_in_concept_id           = 12
        internal_error                = 13
        concept_not_found             = 14
        tadir_entry_creation_failed   = 15
        error_in_correction           = 16
        user_cancelled                = 17
        no_entry_found                = 18
        alias_not_allowed             = 19
        OTHERS                        = 20.
*
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
              INTO lv_mtext.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = lv_mtext.
    ENDIF.
*
    lo_root ?= lo_iter-&gt;get_next( ).
*
  ENDWHILE.
*
  name = ls_paket-paket.
*
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
*
  DATA:
    lt_otrkeys      TYPE sotrt_keys.

  DATA:
    lv_mtext        TYPE string,
    lv_paket        TYPE devclass.

  FIELD-SYMBOLS:
    &lt;ls_otrkeys&gt;    TYPE sotr_key.
*
  lv_paket = objname.

  CALL FUNCTION &apos;SOTR_STRING_GET_KEYS_FOR_PACK&apos;
    EXPORTING
      paket          = lv_paket
    IMPORTING
      sotr_keys      = lt_otrkeys
    EXCEPTIONS
      OTHERS         = 0.
*
  LOOP AT lt_otrkeys ASSIGNING &lt;ls_otrkeys&gt;.
*
    CALL FUNCTION &apos;SOTR_DELETE_CONCEPT&apos;
      EXPORTING
        concept             = &lt;ls_otrkeys&gt;-concept
      EXCEPTIONS
        no_authorization    = 1
        no_entry_found      = 2
        concept_used        = 3
        no_master_language  = 4
        no_source_system    = 5
        no_tadir_entry      = 6
        error_in_correction = 7
        user_cancelled      = 8
        text_not_found      = 9
        invalid_package     = 10
        text_not_changeable = 11
        text_enqueued       = 12
        no_correction       = 13
        parameter_error     = 14.
*
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
              INTO lv_mtext.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = lv_mtext.
    ENDIF.
*
  ENDLOOP.
*
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
*
  objecttype = &apos;SOTS&apos;.  &quot;Node SOTS
*
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_BI_CUBE" VERSION="1" LANGU="E" DESCRIPT="SAPlink - BI  - Infocube" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_BI_CUBE" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_BI_CUBE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BI_CUBE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BI_CUBE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BI_CUBE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_BI_CUBE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Arjen Gideonse
*      gidie@xs4all.nl

  DATA: l_name TYPE ddobjname.

  l_name = objname.

* Check if cube exists
  CALL METHOD cl_rsd_dta=&gt;check_name_for_new_dta
    EXPORTING
      i_infoprov        = l_name
      i_tlogo           = rs_c_tlogo-infocube
*        I_BWAPPL          =
    EXCEPTIONS
      name_invalid      = 1
      name_already_used = 2
      OTHERS            = 3.

  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID   sy-msgid TYPE &apos;I&apos; NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    exists = &apos;X&apos;.
    EXIT.
  ENDIF.


endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Arjen Gideonse
*      gidie@xs4all.nl

*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA l_cubename TYPE ddobjname.
  l_cubename = objname.

  TYPE-POOLS rsdg.

*
  DATA: l_s_cube         TYPE rsd_s_cube.

* texts
  DATA: l_t_cubet        TYPE rsd_t_cubet.
  DATA: l_s_cubet        TYPE LINE OF rsd_t_cubet.
  DATA: cubet_node       TYPE REF TO if_ixml_element.

  DATA: l_t_dimet        TYPE rsd_t_dimet.
  DATA: l_s_dimet        TYPE LINE OF rsd_t_dimet.
  DATA: dimet_node       TYPE REF TO if_ixml_element.


* infoobjects
  DATA: l_t_cube_iobj    TYPE rsd_t_cube_iobj.
  DATA: l_s_cube_iobj    TYPE LINE OF rsd_t_cube_iobj.
  DATA: cube_iobj_node   TYPE REF TO if_ixml_element.

  DATA: l_t_icha_pro     TYPE rsd_t_icha_pro.
  DATA: l_s_icha_pro     TYPE LINE OF rsd_t_icha_pro.
  DATA: icha_pro_node    TYPE REF TO if_ixml_element.

  DATA: l_t_ikyf_pro     TYPE rsd_t_ikyf_pro.
  DATA: l_s_ikyf_pro     TYPE LINE OF rsd_t_ikyf_pro.
  DATA: ikyf_pro_node    TYPE REF TO if_ixml_element.


  DATA: l_t_ic_val_iobj  TYPE rsd_t_ic_val_iobj.
  DATA: l_s_ic_val_iobj  TYPE LINE OF rsd_t_ic_val_iobj.
  DATA: ic_val_iobj_node TYPE REF TO if_ixml_element.


* dimensions
  DATA: l_t_dime         TYPE rsd_t_dime.
  DATA: l_s_dime         TYPE LINE OF rsd_t_dime.
  DATA: dime_node        TYPE REF TO if_ixml_element.

  DATA: l_t_dime_iobj    TYPE rsd_t_dime_iobj.
  DATA: l_s_dime_iobj    TYPE LINE OF rsd_t_dime_iobj.
  DATA: dime_iobj_node   TYPE REF TO if_ixml_element.


* get infocube
  CALL FUNCTION &apos;RSD_CUBE_GET&apos;
    EXPORTING
      i_infocube               = l_cubename
      i_objvers                = rs_c_objvers-active
*     I_BYPASS_BUFFER          = RS_C_FALSE
      i_with_atr_nav           = rs_c_true
    IMPORTING
      e_s_cube                 = l_s_cube
*     E_S_TBHD                 =
*     E_TBHD_NOT_FOUND         =
      e_t_cubet                = l_t_cubet
      e_t_cube_iobj            = l_t_cube_iobj
*     E_T_CUBE_DIME            =
      e_t_dime                 = l_t_dime
      e_t_dimet                = l_t_dimet
      e_t_dime_iobj            = l_t_dime_iobj
      e_t_icha_pro             = l_t_icha_pro
      e_t_ikyf_pro             = l_t_ikyf_pro
      e_t_ic_val_iobj          = l_t_ic_val_iobj
*     E_T_CUBE_PART            =
*     E_T_CUBE_PART_IOBJ       =
*     E_T_MULTI_IOBJ           =
    EXCEPTIONS
      infocube_not_found       = 1
      illegal_input            = 2
      OTHERS                   = 3.
  IF sy-subrc &lt;&gt; 0.
*    MESSAGE i118 WITH p_cube &apos;A&apos;.
    EXIT.
  ENDIF.


* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).


  setattributesfromstructure( node = rootnode structure = l_s_cube ).

* cubet
  LOOP AT l_t_cubet INTO l_s_cubet.
    cubet_node = xmldoc-&gt;create_element( &apos;cubet&apos; ).
    setattributesfromstructure( node = cubet_node structure = l_s_cubet ).
    rc = rootnode-&gt;append_child( cubet_node ).
  ENDLOOP.

* cube_iobj
  LOOP AT l_t_cube_iobj INTO l_s_cube_iobj.
    cube_iobj_node = xmldoc-&gt;create_element( &apos;cube_iobj&apos; ).
    setattributesfromstructure( node = cube_iobj_node structure = l_s_cube_iobj ).
    rc = rootnode-&gt;append_child( cube_iobj_node ).
  ENDLOOP.

* dime
  LOOP AT l_t_dime INTO l_s_dime.
    dime_node = xmldoc-&gt;create_element( &apos;dime&apos; ).
    setattributesfromstructure( node = dime_node structure = l_s_dime ).
    rc = rootnode-&gt;append_child( dime_node ).
  ENDLOOP.

* dimet
  LOOP AT l_t_dimet INTO l_s_dimet.
    dimet_node = xmldoc-&gt;create_element( &apos;dimet&apos; ).
    setattributesfromstructure( node = dimet_node structure = l_s_dimet ).
    rc = rootnode-&gt;append_child( dimet_node ).
  ENDLOOP.


* dime_iobj
  LOOP AT l_t_dime_iobj INTO l_s_dime_iobj.
    dime_iobj_node = xmldoc-&gt;create_element( &apos;dime_iobj&apos; ).
    setattributesfromstructure( node = dime_iobj_node structure = l_s_dime_iobj ).
    rc = rootnode-&gt;append_child( dime_iobj_node ).
  ENDLOOP.


* icha_pro
  LOOP AT l_t_icha_pro INTO l_s_icha_pro.
    icha_pro_node = xmldoc-&gt;create_element( &apos;icha_pro&apos; ).
    setattributesfromstructure( node = icha_pro_node structure = l_s_icha_pro ).
    rc = rootnode-&gt;append_child( icha_pro_node ).
  ENDLOOP.


* ikyf_pro
  LOOP AT l_t_ikyf_pro INTO l_s_ikyf_pro.
    ikyf_pro_node = xmldoc-&gt;create_element( &apos;ikyf_pro&apos; ).
    setattributesfromstructure( node = ikyf_pro_node structure = l_s_ikyf_pro ).
    rc = rootnode-&gt;append_child( ikyf_pro_node ).
  ENDLOOP.

* ic_val_iobj
  LOOP AT l_t_ic_val_iobj INTO l_s_ic_val_iobj.
    ic_val_iobj_node = xmldoc-&gt;create_element( &apos;ic_val_iobj&apos; ).
    setattributesfromstructure( node = ic_val_iobj_node structure = l_s_ic_val_iobj ).
    rc = rootnode-&gt;append_child( ic_val_iobj_node ).
  ENDLOOP.


*
*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Arjen Gideonse
*      gidie@xs4all.nl

  TYPE-POOLS rsdg.

  DATA: gotstate   TYPE ddgotstate.
  DATA: l_s_cube   TYPE rsd_s_cube.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA l_subrc     TYPE sysubrc.
  DATA checkexists TYPE flag.
  DATA l_objtype   TYPE string.


* texts
  DATA: l_t_cubet        TYPE rsd_t_cubet.
  DATA: l_s_cubet        TYPE LINE OF rsd_t_cubet.
  DATA: cubet_node       TYPE REF TO if_ixml_element.

  DATA: l_t_dimet        TYPE rsd_t_dimet.
  DATA: l_s_dimet        TYPE LINE OF rsd_t_dimet.
  DATA: dimet_node       TYPE REF TO if_ixml_element.


* infoobjects
  DATA: l_t_cube_iobj    TYPE rsd_t_cube_iobj.
  DATA: l_s_cube_iobj    TYPE LINE OF rsd_t_cube_iobj.
  DATA: cube_iobj_node   TYPE REF TO if_ixml_element.

  DATA: l_t_icha_pro     TYPE rsd_t_icha_pro.
  DATA: l_s_icha_pro     TYPE LINE OF rsd_t_icha_pro.
  DATA: icha_pro_node    TYPE REF TO if_ixml_element.

  DATA: l_t_ikyf_pro     TYPE rsd_t_ikyf_pro.
  DATA: l_s_ikyf_pro     TYPE LINE OF rsd_t_ikyf_pro.
  DATA: ikyf_pro_node    TYPE REF TO if_ixml_element.

  DATA: l_t_ic_val_iobj  TYPE rsd_t_ic_val_iobj.
  DATA: l_s_ic_val_iobj  TYPE LINE OF rsd_t_ic_val_iobj.
  DATA: ic_val_iobj_node TYPE REF TO if_ixml_element.


* dimensions
  DATA: l_t_dime         TYPE rsd_t_dime.
  DATA: l_s_dime         TYPE LINE OF rsd_t_dime.
  DATA: dime_node        TYPE REF TO if_ixml_element.

  DATA: l_t_dime_iobj    TYPE rsd_t_dime_iobj.
  DATA: l_s_dime_iobj    TYPE LINE OF rsd_t_dime_iobj.
  DATA: dime_iobj_node   TYPE REF TO if_ixml_element.


* Get object type
  l_objtype = getobjecttype( ).

* Check if object exists
  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.


  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( l_objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = l_s_cube.

  objname = l_s_cube-infocube.


* retrieve Tabl details


* cubet
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;cubet&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR cubet_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = l_s_cubet.
    APPEND l_s_cubet TO l_t_cubet.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* cube_iobj
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;cube_iobj&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR cube_iobj_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = l_s_cube_iobj.
    APPEND l_s_cube_iobj TO l_t_cube_iobj.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* dime
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dime&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dime_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = l_s_dime.
    APPEND l_s_dime TO l_t_dime.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* dimet
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dimet&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dimet_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = l_s_dimet.
    APPEND l_s_dimet TO l_t_dimet.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* dime_iobj
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dime_iobj&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dime_iobj_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = l_s_dime_iobj.
    APPEND l_s_dime_iobj TO l_t_dime_iobj.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* icha_pro
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;icha_pro&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR icha_pro_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = l_s_icha_pro.
    APPEND l_s_icha_pro TO l_t_icha_pro.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.


* ikyf_pro
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;ikyf_pro&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR ikyf_pro_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = l_s_ikyf_pro.
    APPEND l_s_ikyf_pro TO l_t_ikyf_pro.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* ic_val_iobj
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;ic_val_iobj&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR ic_val_iobj_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = l_s_ic_val_iobj.
    APPEND l_s_ic_val_iobj TO l_t_ic_val_iobj.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.


* Actually create object
*      DELETE ADJACENT DUPLICATES FROM l_t_ic_val_iobj COMPARING iobjnm.
  CALL FUNCTION &apos;RSDG_DIME_MULTI_SAVE&apos;
*        exporting
*         IMPORTING
*              e_subrc          = l_subrc
*              e_t_msg          = l_t_msg
       CHANGING
            c_t_dime         = l_t_dime
            c_t_dime_iobj    = l_t_dime_iobj
       EXCEPTIONS
            illegal_input    = 1
            OTHERS           = 2.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.

    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.



  CALL FUNCTION &apos;RSDG_CUBE_SAVE&apos;
   EXPORTING
      i_langu                = sy-langu
      i_objvers              = rs_c_objvers-modified
      i_set_time_stamp       = rs_c_true
      i_progress             = rs_c_true
*     I_SET_IC_PRO           = RS_C_FALSE
      i_t_icha_pro           = l_t_icha_pro
      i_t_ikyf_pro           = l_t_ikyf_pro
*     i_t_ipro_iobjt         = l_t_ipro_iobjt
*     i_t_ipro_iobjtt        = l_t_ipro_iobjtt
      i_t_ic_val_iobj        = l_t_ic_val_iobj
*     i_t_cube_part          = l_t_cube_part
*     i_t_multi_iobj         = l_t_multi_iobj
      i_t_cubet              = l_t_cubet
*   IMPORTING
*     E_SUBRC                =
*     E_T_MSG                =
    CHANGING
      c_s_cube               = l_s_cube
      c_t_dime               = l_t_dime
      c_t_cube_iobj          = l_t_cube_iobj
*   EXCEPTIONS
*     ILLEGAL_INPUT          = 1
*     OTHERS                 = 2
            .
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.

  MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
          WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  name = objname.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Arjen Gideonse
*      gidie@xs4all.nl

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Arjen Gideonse
*      gidie@xs4all.nl

  objecttype = &apos;CUBE&apos;.  &quot;Infocubes (Only tested under BW7)
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_AUTHORIZATION_FIELDS" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Authorization Fields" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_AUTHORIZATION_FIELDS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_AUTHORIZATION_FIELDS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_AUTHORIZATION_FIELDS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_AUTHORIZATION_FIELDS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_AUTHORIZATION_FIELDS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_AUTHORIZATION_FIELDS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
*---------------------------------------------------------------------*
* Developed by Leon Boeijen
* NL for Business
* Leon.Boeijen@NL4B.com
*---------------------------------------------------------------------*
  SELECT SINGLE fieldname FROM authx INTO objname WHERE fieldname = objname.
  IF sy-subrc = 0.
    exists = &apos;X&apos;.
  ENDIF.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
*---------------------------------------------------------------------*
* Developed by Leon Boeijen
* NL for Business
* Leon.Boeijen@NL4B.com
*---------------------------------------------------------------------*
  DATA rootnode     TYPE REF TO if_ixml_element.
  DATA sourcenode   TYPE REF TO if_ixml_element.
  DATA rc           TYPE sysubrc.
  DATA sourcestring TYPE string.
  DATA _objtype     TYPE string.


  TYPES: BEGIN OF ty_root,
          name TYPE string,
         END OF ty_root.

  DATA: l_fieldname TYPE fieldname,
        l_root      TYPE ty_root,
        ls_authx    TYPE authx,
        l_xstring   TYPE xstring,
        l_string    TYPE string.

  l_fieldname = objname.
  l_root-name = objname.

  SELECT SINGLE * INTO ls_authx
    FROM authx
    WHERE fieldname EQ l_fieldname.

  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).

  setattributesfromstructure( node = rootnode structure =  l_root ).
  sourcenode = xmldoc-&gt;create_element( &apos;AuthorizationCheckField&apos; ).

  CALL TRANSFORMATION id
    SOURCE auth = ls_authx
    RESULT XML l_xstring.

  CALL FUNCTION &apos;ECATT_CONV_XSTRING_TO_STRING&apos;
    EXPORTING
      im_xstring = l_xstring
    IMPORTING
      ex_string  = l_string.


  rc = sourcenode-&gt;if_ixml_node~set_value( l_string ).
  rc = rootnode-&gt;append_child( sourcenode ).
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
*---------------------------------------------------------------------*
* Developed by Leon Boeijen
* NL for Business
* Leon.Boeijen@NL4B.com
*---------------------------------------------------------------------*
  DATA rootnode         TYPE REF TO if_ixml_element.
  DATA progattribs      TYPE trdir.
  DATA sourcenode       TYPE REF TO if_ixml_element.
  DATA l_xml_node       TYPE REF TO if_ixml_element.
  DATA source           TYPE string.
  DATA sourcetable      TYPE table_of_strings.
  DATA _objtype         TYPE string.
  DATA checkexists      TYPE flag.

  TYPES: BEGIN OF ty_root,
            name TYPE string,
           END OF ty_root.

  DATA: l_fieldname TYPE fieldname,
        l_root      TYPE ty_root,
        ls_authx    TYPE authx,
        l_xstring   TYPE xstring,
        l_string    TYPE string.

  _objtype = getobjecttype( ).
  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = l_root.
  objname = l_root-name.
  l_fieldname = objname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  sourcenode = rootnode-&gt;find_from_name( &apos;AuthorizationCheckField&apos; ).
  source = sourcenode-&gt;get_value( ).

  CALL FUNCTION &apos;ECATT_CONV_STRING_TO_XSTRING&apos;
    EXPORTING
      im_string  = source
    IMPORTING
      ex_xstring = l_xstring.

  CALL TRANSFORMATION id
      SOURCE XML l_xstring
      RESULT auth = ls_authx.

  MODIFY authx FROM ls_authx.
  IF sy-subrc NE 0.
    RAISE EXCEPTION TYPE zcx_saplink
     EXPORTING msg = &apos;Error saving Authorization Check Field&apos;.
  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
*---------------------------------------------------------------------*
* Developed by Leon Boeijen
* NL for Business
* Leon.Boeijen@NL4B.com
*---------------------------------------------------------------------*
  DATA: l_fieldname TYPE fieldname.

  l_fieldname = objname.

  DELETE FROM authx WHERE fieldname EQ l_fieldname.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
*---------------------------------------------------------------------*
* Developed by Leon Boeijen
* NL for Business
* Leon.Boeijen@NL4B.com
*---------------------------------------------------------------------*
  objecttype = &apos;AUTH&apos;. &quot;Authorization Check Fields
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_TOBJ" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Tabellenpflege-Transaktionen" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool>
   <language SPRAS="D">
    <textElement ID="I" KEY="E01" ENTRY="Fehler in CTO_OBJECT_GET" LENGTH="48 "/>
   </language>
  </textPool>
  <inheritance CLSNAME="ZSAPLINK_TOBJ" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_TOBJ" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TOBJ" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TOBJ" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TOBJ" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_TOBJ" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD checkexists .
  DATA:
    lv_objectname TYPE ob_object,
    ls_objh       TYPE objh.

*
  ls_objh = me-&gt;get_objh( ).
*
  SELECT SINGLE objectname
         FROM   objh
         INTO   lv_objectname
         WHERE  objectname = ls_objh-objectname
           AND  objecttype = ls_objh-objecttype.
*
  exists = boolc( sy-subrc = 0 ).
*
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createixmldocfromobject .
*
  DATA:
    ls_objt     TYPE objt,
    lt_objs     TYPE tt_objs,
    lt_objsl    TYPE tt_objsl,
    lt_objm     TYPE tt_objm.

  DATA:
    lv_rc       TYPE i,
    ls_objh     TYPE objh.

  DATA:
    lo_root     TYPE REF TO if_ixml_element,
    lo_node     TYPE REF TO if_ixml_element.

  FIELD-SYMBOLS:
    &lt;ls_objsl&gt;  TYPE objsl,
    &lt;ls_objm&gt;   TYPE objm,
    &lt;ls_objs&gt;   TYPE objs.
*
  ls_objh = me-&gt;get_objh( ).
*
  CALL FUNCTION &apos;CTO_OBJECT_GET&apos;
    EXPORTING
      iv_objectname      = ls_objh-objectname
      iv_objecttype      = ls_objh-objecttype
      iv_language        = sy-langu
      iv_sel_objt        = abap_true
      iv_sel_objs        = abap_true
      iv_sel_objsl       = abap_true
      iv_sel_objm        = abap_true
    IMPORTING
      es_objh            = ls_objh
      es_objt            = ls_objt
    TABLES
      tt_objs            = lt_objs
      tt_objsl           = lt_objsl
      tt_objm            = lt_objm
    EXCEPTIONS
      object_not_defined = 1
      OTHERS             = 2.
*
  CASE sy-subrc.
    WHEN 0.
    WHEN 1.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;not_found.
    WHEN OTHERS.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = |{ &apos;Fehler in CTO_OBJECT_GET&apos;(e01) }|.
  ENDCASE.
*
  CLEAR:
    ls_objh-luser,
    ls_objh-ldate.
*
  lo_root = xmldoc-&gt;create_element( getobjecttype( ) ).
  lo_root-&gt;set_attribute( name  = &apos;TOBJ_NAME&apos;
                          value = objname  ).
*
  lo_node = xmldoc-&gt;create_element( &apos;OBJH&apos; ).
  setattributesfromstructure( node      = lo_node
                              structure = ls_objh ).
  lv_rc = lo_root-&gt;append_child( lo_node ).
*
  lo_node = xmldoc-&gt;create_element( &apos;OBJT&apos; ).
  setattributesfromstructure( node      = lo_node
                              structure = ls_objt ).
  lv_rc = lo_root-&gt;append_child( lo_node ).
*
  LOOP AT lt_objs ASSIGNING &lt;ls_objs&gt;.
    lo_node = xmldoc-&gt;create_element( &apos;OBJS&apos; ).
    setattributesfromstructure( node      = lo_node
                                structure = &lt;ls_objs&gt; ).
    lv_rc = lo_root-&gt;append_child( lo_node ).
  ENDLOOP.
*
  LOOP AT lt_objsl ASSIGNING &lt;ls_objsl&gt;.
    lo_node = xmldoc-&gt;create_element( &apos;OBJSL&apos; ).
    setattributesfromstructure( node      = lo_node
                                structure = &lt;ls_objsl&gt; ).
    lv_rc = lo_root-&gt;append_child( lo_node ).
  ENDLOOP.
*
  LOOP AT lt_objm ASSIGNING &lt;ls_objm&gt;.
    lo_node = xmldoc-&gt;create_element( &apos;OBJM&apos; ).
    setattributesfromstructure( node      = lo_node
                                structure = &lt;ls_objm&gt; ).
    lv_rc = lo_root-&gt;append_child( lo_node ).
  ENDLOOP.
*
  lv_rc = xmldoc-&gt;append_child( lo_root ).
  ixmldocument = xmldoc.
*
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createobjectfromixmldoc .
*
  DATA:
    ls_objh   TYPE objh,
    ls_objt   TYPE objt,
    ls_objs   TYPE objs,
    ls_objsl  TYPE objsl,
    ls_objm   TYPE objm,
    lt_objs   TYPE tt_objs,
    lt_objsl  TYPE tt_objsl,
    lt_objm   TYPE tt_objm.

  DATA:
    lv_mtext  TYPE string.

  DATA:
    lo_root   TYPE REF TO if_ixml_element,
    lo_node   TYPE REF TO if_ixml_element,
    lo_filter TYPE REF TO if_ixml_node_filter,
    lo_iter   TYPE REF TO if_ixml_node_iterator.
*
  xmldoc = ixmldocument.
  lo_root = xmldoc-&gt;find_from_name( getobjecttype( ) ).
*
* Header
*
  lo_node = xmldoc-&gt;find_from_name( &apos;OBJH&apos; ).
  getstructurefromattributes( EXPORTING
                                node      = lo_node
                              CHANGING
                                structure = ls_objh ).
*
  objname = ls_objh-objectname &amp;&amp; ls_objh-objecttype.
*
  IF checkexists( ) = abap_true.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
    ELSE.
      deleteobject( ).
    ENDIF.
  ENDIF.
*
* Beschreibung
*
  lo_node = xmldoc-&gt;find_from_name( &apos;OBJT&apos; ).
  getstructurefromattributes( EXPORTING
                                node      = lo_node
                              CHANGING
                                structure = ls_objt ).
*
* Stückliste
*
  lo_filter =  xmldoc-&gt;create_filter_name( &apos;OBJS&apos; ).
  lo_iter   =  xmldoc-&gt;create_iterator_filtered( lo_filter ).
  lo_node         ?= lo_iter-&gt;get_next( ).
  WHILE lo_node IS NOT INITIAL.
    CLEAR ls_objs.
    getstructurefromattributes( EXPORTING
                                  node      = lo_node
                                CHANGING
                                  structure = ls_objs ).
    APPEND ls_objs TO lt_objs.
    lo_node ?= lo_iter-&gt;get_next( ).
  ENDWHILE.
*
* Stückliste logisches Objekt
*
  FREE:
    lo_filter,
    lo_iter,
    lo_node.
*
  lo_filter =  xmldoc-&gt;create_filter_name( &apos;OBJSL&apos; ).
  lo_iter   =  xmldoc-&gt;create_iterator_filtered( lo_filter ).
  lo_node   ?= lo_iter-&gt;get_next( ).
  WHILE lo_node IS NOT INITIAL.
    CLEAR ls_objsl.
    getstructurefromattributes( EXPORTING
                                  node      = lo_node
                                CHANGING
                                  structure = ls_objsl ).
    APPEND ls_objsl TO lt_objsl.
    lo_node ?= lo_iter-&gt;get_next( ).
  ENDWHILE.
*
* Methoden der Objekte
*
  FREE:
    lo_filter,
    lo_iter,
    lo_node.
*
  lo_filter =  xmldoc-&gt;create_filter_name( &apos;OBJM&apos; ).
  lo_iter   =  xmldoc-&gt;create_iterator_filtered( lo_filter ).
  lo_node   ?= lo_iter-&gt;get_next( ).
  WHILE lo_node IS NOT INITIAL.
    CLEAR ls_objm.
    getstructurefromattributes( EXPORTING
                                  node      = lo_node
                                CHANGING
                                  structure = ls_objm ).
    APPEND ls_objm TO lt_objm.
    lo_node ?= lo_iter-&gt;get_next( ).
  ENDWHILE.
*
  CALL FUNCTION &apos;OBJ_GENERATE&apos;
    EXPORTING
      iv_objectname         = ls_objh-objectname
      iv_objecttype         = ls_objh-objecttype
      iv_maint_mode         = &apos;I&apos;
      iv_objecttext         = ls_objt-ddtext
      iv_objcateg           = ls_objh-objcateg
      iv_objtransp          = ls_objh-objtransp
      iv_devclass           = devclass
    TABLES
      tt_v_obj_s            = lt_objs
      tt_objm               = lt_objm
    EXCEPTIONS
      illegal_call          = 1
      object_not_found      = 2
      generate_error        = 3
      transport_error       = 4
      object_enqueue_failed = 5
      OTHERS                = 6.
*
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
            INTO lv_mtext.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_mtext.
  ENDIF.
*
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD deleteobject .

  DATA:
    lv_mtext    TYPE string,
    ls_objh     TYPE objh.

*
  ls_objh = me-&gt;get_objh( ).
*
  CALL FUNCTION &apos;OBJ_GENERATE&apos;
    EXPORTING
      iv_objectname         = ls_objh-objectname
      iv_objecttype         = ls_objh-objecttype
      iv_maint_mode         = &apos;D&apos;
    EXCEPTIONS
      illegal_call          = 1
      object_not_found      = 2
      generate_error        = 3
      transport_error       = 4
      object_enqueue_failed = 5
      OTHERS                = 6.
*
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            INTO lv_mtext
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_mtext.
  ENDIF.
*
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD getobjecttype .
*
  objecttype = &apos;TOBJ&apos;. &quot;TOBJ Node
*
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_TOBJ" CMPNAME="GET_OBJH" VERSION="1" LANGU="D" DESCRIPT="OBJH-Struktur füllen" EXPOSURE="0" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_TOBJ" CMPNAME="GET_OBJH" SCONAME="RS_OBJH" VERSION="1" LANGU="D" DESCRIPT="Objekt: Header" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="OBJH"/>
   <source>METHOD get_objh.

  DATA:
    lv_pos    TYPE i.
*
  lv_pos = strlen( objname ) - 1.
*
  rs_objh-objectname = objname(lv_pos).
  rs_objh-objecttype = objname+lv_pos.
*
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_SICF" VERSION="1" LANGU="D" DESCRIPT="SAPlink - BSP plugin" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_SICF" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_SICF" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SICF" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SICF" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SICF" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_SICF" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method CHECKEXISTS .

data _objDirEntry type string.
data _icfName type ICFNAME.
data _parentNode type ICFPARGUID.
data l_nodeGuid type ICFNODGUID.
data tempstring type string.

  _objDirEntry = objName.
  split _objDirEntry at space into _icfName tempString.
  condense: _icfName, tempString.
  _parentNode = tempString.

  CALL FUNCTION &apos;HTTP_GET_NODEGUID&apos;
  EXPORTING
    parguid        = _parentNode
    nodename       = _icfName
  IMPORTING
    nodeguid       = l_nodeguid
  EXCEPTIONS
    node_not_found = 1
    OTHERS         = 2.

  if sy-subrc = 0.
    exists = &apos;X&apos;.
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method CREATEIXMLDOCFROMOBJECT .

data rc type sysubrc.
data rootNode type ref to if_ixml_element.
data _objDirEntry type string.
data _icfName type ICFNAME.
data _parentNode type ICFPARGUID.
*data l_nodeGuid type ICFNODGUID.
data icfAttributes type icfservice.
data tempString type string.

data docNode type ref to if_ixml_element.
data handlerNode type ref to if_ixml_element.
data wa_icfdocu type icfdocu.
data wa_icfhandler type icfhandler.
data it_icfhandler type table of icfhandler.

  _objDirEntry = objName.
  split _objDirEntry at space into _icfName tempString.
  condense: _icfName, tempString.
  _parentNode = tempString.

*  CALL FUNCTION &apos;HTTP_GET_NODEGUID&apos;
*  EXPORTING
*    parguid        = _parentNode
*    nodename       = _icfName
*  IMPORTING
*    nodeguid       = l_nodeguid
*  EXCEPTIONS
*    node_not_found = 1
*    OTHERS         = 2.
*
*  if sy-subrc &lt;&gt; 0.
*    case sy-subrc.
*      when 1.
*        raise exception type zcx_saplink
*          exporting textid = zcx_saplink=&gt;not_found.
*      when others.
*        raise exception type zcx_saplink
*          exporting textid = zcx_saplink=&gt;system_error.
*    endcase.
*  endif.

  select single * from icfservice into icfAttributes
    where icf_name = _icfName
    and   icfparguid = _parentNode.
*    and   icfnodguid = l_nodeGuid.

  if sy-subrc &lt;&gt; 0.
    raise exception type zcx_saplink
      exporting textid = zcx_saplink=&gt;not_found.
  endif.

* Create parent node
  data _objType type string.
  _objType = getObjectType( ).
  rootNode = xmlDoc-&gt;create_element( _objType ).
  setAttributesFromStructure( node = rootNode structure = icfAttributes
  ).
*  rc = rootNode-&gt;if_ixml_node~set_value( _objDirEntry ).

* icfdocu info
  select single * from icfdocu into wa_icfdocu
    where icf_name = _icfName
    and   icfparguid = _parentNode.

  if sy-subrc = 0.
    docNode = xmlDoc-&gt;create_element( &apos;icfdocu&apos; ).
    setAttributesFromStructure( node = docNode structure = wa_icfdocu ).
    rc = rootNode-&gt;append_child( docNode ).
  endif.

* icfhandler entries
  select * from icfhandler into table it_icfhandler
    where icf_name = _icfName
    and   icfparguid = _parentNode.

  loop at it_icfhandler into wa_icfhandler.
    handlerNode = xmlDoc-&gt;create_element( &apos;icfhandler&apos; ).
    setAttributesFromStructure( node = handlerNode structure = wa_icfhandler ).
    rc = rootNode-&gt;append_child( handlerNode ).
  endloop.

* append root to xml and return
  rc = xmldoc-&gt;append_child( rootNode ).
  ixmlDocument = xmlDoc.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method CREATEOBJECTFROMIXMLDOC .

*data _bspName TYPE O2APPLNAME.
*data bspAttributes type O2APPLATTR.
*data flag type char1.
*data transReq type trkorr.
*data nodes type o2applnode_table.
*data navGraph type o2applgrap_table.
*data navLine type O2APPLGRAP.
*data application type ref to cl_o2_api_application.
*data nameSpace type skwf_urlp.
*data folderName type string.
*data folderDesc type sdok_descr.
*data rootNode type ref to if_ixml_element.
*data pageNode type ref to if_ixml_element.
data node type ref to if_ixml_element.
data filter type ref to if_ixml_node_filter.
data iterator type ref to if_ixml_node_iterator.
*data pageIterator type ref to if_ixml_node_iterator.
*data ixmlNode type ref to if_ixml_node.
*data source type string.
*data trobjName type trobj_name.
*data objectName type SEU_OBJKEY.
*data obj_name type E071-OBJ_NAME.
*data l_nodeguid type ICFNODGUID.
*data l_icfdocu  type ICF_DOCU.
*data l_icfname  type ICFNAME.
data _devclass type devclass.
data checkExists type flag.
*
**page data
*data bspPages type O2PAGELIST.
*data bspPage type O2PAGATTR.
*data pageAttributes type O2PAGATTR.
*data newPage TYPE REF TO CL_O2_API_PAGES.
*data pageContent TYPE O2PAGELINE_TABLE.
*data eventHandlers type O2PAGEVH_TABLETYPE.
*data eventHandler type O2PAGEVHS.
*data eventAttributes type O2PAGEVH.
*data pageParameters TYPE O2PAGPAR_TABLETYPE.
*data pageParameter type O2PAGPARS.
*data typeDefinitionSource type RSWSOURCET.
data _objType type string.

data rc type sysubrc.
data rootNode type ref to if_ixml_element.
data _objDirEntry type SOBJ_NAME.
data _icfName type ICFNAME.
data _parentNode type ICFPARGUID.
*data l_nodeGuid type ICFNODGUID.
data icfAttributes type icfservice.
data _icfdocu  type ICF_DOCU.
data wa_icfHandler type icfHandler.
data wa_icfdocu type icfdocu.
data tempString type string.

  _devclass = devclass.
  _objType = getObjectType( ).

  xmlDoc = ixmlDocument.
  rootNode = xmlDoc-&gt;find_from_name( _objType ).

  call method GETSTRUCTUREFROMATTRIBUTES
        exporting
          node = rootNode
        changing
          structure = icfAttributes.

  _objDirEntry = icfAttributes-icf_name.
  _objDirEntry+15 = icfAttributes-icfparguid.

  objName = _objDirEntry.

  checkExists = checkexists( ).
  if checkExists is not initial.
    if overwrite is initial.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;existing.
    else.
*     delete object for new install
      deleteobject( ).
    endif.
  endif.

* get documentation info
  free node.
  node = rootnode-&gt;find_from_name( &apos;icfdocu&apos; ).
  if node IS NOT INITIAL.
    call method GETSTRUCTUREFROMATTRIBUTES
          exporting
            node = node
          changing
            structure = wa_icfdocu.
  endif.

****************Create SICF node****************
*  _icfdocu = wa_icfdocu-icf_docu.

  CALL FUNCTION &apos;HTTPTREE_INSERT_NODE&apos;
    EXPORTING
      p_icf_name                      = icfAttributes-icf_Name
      p_icfparguid                    = icfAttributes-icfparguid
      p_icfdocu                       = wa_icfdocu-icf_docu
      p_doculang                      = wa_icfdocu-icf_langu
*      p_icfactive                     = &apos;X&apos;     &quot;activate service
      p_package                       = devclass
   EXCEPTIONS
      NO_NEW_VIRTUAL_HOST             = 1
      SPECIAL_SERVICE_ERROR           = 2
      PARENT_NOT_EXISTING             = 3
      ENQUEUE_ERROR                   = 4
      NODE_ALREADY_EXISTING           = 5
      EMPTY_DOCU                      = 6
      DOCULANG_NOT_INSTALLED          = 7
      SECURITY_INFO_ERROR             = 8
      USER_PASSWORD_ERROR             = 9
      PASSWORD_ENCRYPTION_ERROR       = 10
      INVALID_URL                     = 11
      INVALID_OTR_CONCEPT             = 12
      FORMFLG401_ERROR                = 13
      HANDLER_ERROR                   = 14
      TRANSPORT_ERROR                 = 15
      TADIR_ERROR                     = 16
      PACKAGE_NOT_FOUND               = 17
      OTHERS                          = 18
            .

  if sy-subrc &lt;&gt; 0.
    raise exception type zcx_saplink
      exporting textid = zcx_saplink=&gt;system_error.
  endif.

* insert handler data
  free: filter, iterator, node.
  filter = xmlDoc-&gt;create_filter_name( &apos;icfhandler&apos; ).
  iterator = xmlDoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  while node is not initial.
    call method GETSTRUCTUREFROMATTRIBUTES
          exporting
            node = node
          changing
            structure = wa_icfHandler.

    if wa_icfHandler is not initial.
      insert icfHandler from wa_icfHandler.
    endif.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* successful install
  name = objName.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method DELETEOBJECT .

data _objDirEntry type string.
data _icfName type ICFNAME.
data _parentNode type ICFPARGUID.
data tempstring type string.

  _objDirEntry = objName.
  split _objDirEntry at space into _icfName tempString.
  condense: _icfName, tempString.
  _parentNode = tempString.

****************Delete SICF node****************
  translate _icfname to lower case.

  call function &apos;HTTPTREE_DELETE_NODE&apos;
    exporting
      p_icf_name                        = _icfname
      p_icfparguid                      = _parentNode
    exceptions
      no_virtual_host_delete            = 1
      special_service_error             = 2
      enqueue_error                     = 3
      node_not_existing                 = 4
      node_has_childs                   = 5
      node_is_aliased                   = 6
      node_not_in_original_system       = 7
      transport_error                   = 8
      tadir_error                       = 9
      db_error                          = 10
      others                            = 11.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE .

  objecttype = &apos;SICF&apos;. &quot;SICF Node

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_TRANSACTIONS" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Transaction Plug in" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature

TYPE-POOLS: ststc.</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_FALSE" VERSION="1" LANGU="B" EXPOSURE="1" STATE="1" EDITORDER="20 " ATTDECLTYP="2" ATTVALUE="SPACE" ATTEXPVIRT="0" TYPTYPE="1" TYPE="C" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_HEX_CHK" VERSION="1" LANGU="B" DESCRIPT="Transaction type" EXPOSURE="1" STATE="1" EDITORDER="7 " ATTDECLTYP="2" ATTVALUE="&apos;04&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR2" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_HEX_ENQ" VERSION="1" LANGU="B" DESCRIPT="Transaction type" EXPOSURE="1" STATE="1" EDITORDER="8 " ATTDECLTYP="2" ATTVALUE="&apos;20&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR2" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_HEX_MEN" VERSION="1" LANGU="B" DESCRIPT="Transaction type" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;01&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR2" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_HEX_OBJ" VERSION="1" LANGU="B" DESCRIPT="Transaction type" EXPOSURE="1" STATE="1" EDITORDER="6 " ATTDECLTYP="2" ATTVALUE="&apos;08&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR2" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_HEX_PAR" VERSION="1" LANGU="B" DESCRIPT="Transaction type" EXPOSURE="1" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;02&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR2" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_HEX_REP" VERSION="1" LANGU="B" DESCRIPT="Transaction type" EXPOSURE="1" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;80&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR2" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_HEX_RPV" VERSION="1" LANGU="B" DESCRIPT="Transaction type" EXPOSURE="1" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="&apos;10&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR2" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_HEX_TRA" VERSION="1" LANGU="B" DESCRIPT="Transaction type" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;00&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR2" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_OO_ASYNCHRON" VERSION="1" LANGU="B" EXPOSURE="1" STATE="1" EDITORDER="17 " ATTDECLTYP="2" ATTVALUE="&apos;U&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_OO_CLASS" VERSION="1" LANGU="B" DESCRIPT="Character field, length 7" EXPOSURE="1" STATE="1" EDITORDER="10 " ATTDECLTYP="2" ATTVALUE="&apos;\CLASS=&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR7" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_OO_FRCLASS" VERSION="1" LANGU="B" DESCRIPT="30 Characters" EXPOSURE="1" STATE="1" EDITORDER="13 " ATTDECLTYP="2" ATTVALUE="&apos;CLASS&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_OO_FRMETHOD" VERSION="1" LANGU="B" DESCRIPT="30 Characters" EXPOSURE="1" STATE="1" EDITORDER="14 " ATTDECLTYP="2" ATTVALUE="&apos;METHOD&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_OO_FRUPDTASK" VERSION="1" LANGU="B" DESCRIPT="30 Characters" EXPOSURE="1" STATE="1" EDITORDER="15 " ATTDECLTYP="2" ATTVALUE="&apos;UPDATE_MODE&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_OO_LOKAL" VERSION="1" LANGU="B" EXPOSURE="1" STATE="1" EDITORDER="18 " ATTDECLTYP="2" ATTVALUE="&apos;L&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="C" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_OO_METHOD" VERSION="1" LANGU="B" DESCRIPT="Character field, 8 characters long" EXPOSURE="1" STATE="1" EDITORDER="11 " ATTDECLTYP="2" ATTVALUE="&apos;\METHOD=&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_OO_PROGRAM" VERSION="1" LANGU="B" DESCRIPT="Character field of 9 digits" EXPOSURE="1" STATE="1" EDITORDER="9 " ATTDECLTYP="2" ATTVALUE="&apos;\PROGRAM=&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR9" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_OO_SYNCHRON" VERSION="1" LANGU="B" EXPOSURE="1" STATE="1" EDITORDER="16 " ATTDECLTYP="2" ATTVALUE="&apos;S&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_OO_TCODE" VERSION="1" LANGU="B" DESCRIPT="Transaction Code" EXPOSURE="1" STATE="1" EDITORDER="12 " ATTDECLTYP="2" ATTVALUE="&apos;OS_APPLICATION&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_TRUE" VERSION="1" LANGU="B" EXPOSURE="1" STATE="1" EDITORDER="19 " ATTDECLTYP="2" ATTVALUE="&apos;X&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="C" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_TRANSACTIONS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_TRANSACTIONS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TRANSACTIONS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TRANSACTIONS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TRANSACTIONS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_TRANSACTIONS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD checkexists.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com

  DATA: ls_tstc  TYPE tstc,
        l_tcode  TYPE tstc-tcode.

  CLEAR  exists.

  l_tcode =  objname.

* Check transaction code already exists.
  SELECT SINGLE *
    INTO ls_tstc
    FROM tstc
   WHERE tcode EQ l_tcode.

  IF sy-subrc EQ 0.
    exists = &apos;X&apos;.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createixmldocfromobject.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com

  DATA: l_tcode      TYPE tstc-tcode,
        _objtype     TYPE string,
        mtext        type string,
        rc           TYPE sysubrc.

* XML nodes
  DATA:rootnode    TYPE REF TO if_ixml_element,
       tstc_node   TYPE REF TO if_ixml_element,
       tstct_node  TYPE REF TO if_ixml_element,
       tstcc_node  TYPE REF TO if_ixml_element,
       tstcp_node  TYPE REF TO if_ixml_element,
       rsstcd_node TYPE REF TO if_ixml_element,
       rsparam_node TYPE REF TO if_ixml_element.

* Data Nodes
  DATA:
        lt_tstc    TYPE STANDARD TABLE OF tstc,
        ls_tstc    TYPE                   tstc,
        lt_tstcc   TYPE STANDARD TABLE OF tstcc,
        ls_tstcc   TYPE                   tstcc,
        ls_tstcp   TYPE                   tstcp,
        ls_tstct   TYPE                   tstct.

  l_tcode = objname.

* Read transaction details
  CALL FUNCTION &apos;RPY_TRANSACTION_READ&apos;
   EXPORTING
     transaction            = l_tcode
*   PROGRAM                =
*   DYNPRO                 =
*   TRANSACTION_TYPE       = &apos; &apos;
   TABLES
      tcodes                 = lt_tstc
      gui_attributes         = lt_tstcc
   EXCEPTIONS
     permission_error       = 1
     cancelled              = 2
     not_found              = 3
     object_not_found       = 4
     OTHERS                 = 5
            .
  IF sy-subrc &lt;&gt; 0.

    CASE sy-subrc.

      WHEN 1.
        RAISE EXCEPTION TYPE zcx_saplink
         EXPORTING textid = zcx_saplink=&gt;not_authorized.

      WHEN 3 OR 4.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_found.

      WHEN OTHERS.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                INTO mtext
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.

        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING msg = mtext.

    ENDCASE.
  ENDIF.

  CLEAR: ls_tstc,
         ls_tstcc.
  READ TABLE lt_tstc INTO ls_tstc WITH KEY tcode = l_tcode.
  IF sy-subrc NE 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.

  READ TABLE lt_tstcc INTO ls_tstcc WITH KEY tcode = l_tcode.
  IF sy-subrc NE 0.
  ENDIF.

* Get short text
  SELECT SINGLE *
    INTO ls_tstct
    FROM tstct
   WHERE sprsl = sy-langu
     AND tcode = l_tcode.

* Get parameters
  SELECT SINGLE *
  INTO ls_tstcp
  FROM tstcp
  WHERE tcode = l_tcode.

  IF sy-subrc NE 0.
*  Do nothing as not all transactions
*  need have parameters
  ENDIF.

  DATA: ls_t_tstcp TYPE tstcp,
        lt_rsparam TYPE s_param,
        ls_rsparam TYPE rsparam,
        ls_rsstcd  TYPE rsstcd.

  ls_t_tstcp = ls_tstcp.

* Split parameters
  CALL METHOD zsaplink_transactions=&gt;split_parameters
    IMPORTING
      et_rsparam = lt_rsparam
      es_rsstcd  = ls_rsstcd
    CHANGING
      is_tstcp   = ls_t_tstcp
      es_tstc    = ls_tstc.

  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = ls_tstc ).

  tstct_node = xmldoc-&gt;create_element( &apos;tstct&apos; ).
  setattributesfromstructure( node = tstct_node structure = ls_tstct ).
  rc = rootnode-&gt;append_child( tstct_node ).

  tstcc_node = xmldoc-&gt;create_element( &apos;tstcc&apos; ).
  setattributesfromstructure( node = tstcc_node structure = ls_tstcc ).
  rc = rootnode-&gt;append_child( tstcc_node ).

  tstcp_node = xmldoc-&gt;create_element( &apos;tstcp&apos; ).
  setattributesfromstructure( node = tstcp_node structure = ls_tstcp ).
  rc = rootnode-&gt;append_child( tstcp_node ).

  rsstcd_node = xmldoc-&gt;create_element( &apos;rsstcd&apos; ).
  setattributesfromstructure( node = rsstcd_node structure = ls_rsstcd ).
  rc = rootnode-&gt;append_child( rsstcd_node ).

  LOOP AT lt_rsparam INTO ls_rsparam.
    rsparam_node = xmldoc-&gt;create_element( &apos;rsparam&apos; ).
    setattributesfromstructure( node = rsparam_node structure = ls_rsparam ).
    rc = rootnode-&gt;append_child( rsparam_node ).
  ENDLOOP.

  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createobjectfromixmldoc.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com

  DATA: l_tcode      TYPE tstc-tcode,
        _objtype     TYPE string,
        l_tran_type  TYPE rglif-docutype,
        mtext        TYPE string,
        rc           TYPE sysubrc,
        l_easy_web_transaction TYPE c,
        l_html_enabled  TYPE c.


* XML nodes
  DATA:rootnode    TYPE REF TO if_ixml_element,
       tstc_node   TYPE REF TO if_ixml_element,
       tstct_node  TYPE REF TO if_ixml_element,
       tstcc_node  TYPE REF TO if_ixml_element,
       tstcp_node  TYPE REF TO if_ixml_element,
       rsstcd_node TYPE REF TO if_ixml_element,
       rsparam_node TYPE REF TO if_ixml_element.


  DATA : node        TYPE REF TO if_ixml_element,
         filter      TYPE REF TO if_ixml_node_filter,
         iterator    TYPE REF TO if_ixml_node_iterator.

* Data Nodes
  DATA:
        ls_tstc    TYPE tstc,
        ls_tstcc   TYPE tstcc,
        ls_tstcp   TYPE tstcp,
        ls_tstct   TYPE tstct,
        lt_rsparam TYPE s_param,
        ls_rsparam TYPE rsparam,
        ls_rsstcd  TYPE rsstcd.

  DATA  l_checkexists TYPE flag.

  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = ls_tstc.

  objname = ls_tstc-tcode.

  l_checkexists = checkexists( ).
  IF l_checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  tstct_node = xmldoc-&gt;find_from_name( &apos;tstct&apos; ).
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = tstct_node
    CHANGING
      structure = ls_tstct.


  tstcc_node = xmldoc-&gt;find_from_name( &apos;tstcc&apos; ).
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = tstcc_node
    CHANGING
      structure = ls_tstcc.

  tstcp_node = xmldoc-&gt;find_from_name( &apos;tstcp&apos; ).
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = tstcp_node
    CHANGING
      structure = ls_tstcp.

  rsstcd_node = xmldoc-&gt;find_from_name( &apos;rsstcd&apos; ).
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rsstcd_node
    CHANGING
      structure = ls_rsstcd.


  FREE: filter, iterator, rsparam_node.
  filter = xmldoc-&gt;create_filter_name( &apos;rsparam&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  rsparam_node ?= iterator-&gt;get_next( ).
  WHILE rsparam_node IS NOT INITIAL.
    CLEAR ls_rsparam.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = rsparam_node
      CHANGING
        structure = ls_rsparam.
    APPEND ls_rsparam TO lt_rsparam.
    rsparam_node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  l_tcode = objname.

  CASE ls_tstc-cinfo.

    WHEN c_hex_tra.
      l_tran_type = ststc_c_type_dialog.
    WHEN c_hex_rep.
      l_tran_type =  ststc_c_type_report.
    WHEN c_hex_par.
      IF  ls_rsstcd-s_vari EQ c_true.
        l_tran_type = ststc_c_type_variant.
      ELSE.
        l_tran_type = ststc_c_type_parameters.
      ENDIF.

    WHEN c_hex_obj.
      l_tran_type = ststc_c_type_object.
    WHEN OTHERS.

  ENDCASE.

  CASE ls_tstcc-s_webgui.
    WHEN &apos;1&apos;.
      l_html_enabled = c_true.
    WHEN &apos;2&apos;.
      l_easy_web_transaction = c_true.
    WHEN OTHERS.
      CLEAR: l_easy_web_transaction,
             l_html_enabled.
  ENDCASE.

  DATA: l_dnum TYPE d020s-dnum.
  l_dnum = ls_tstc-dypno.
  CALL FUNCTION &apos;RPY_TRANSACTION_INSERT&apos;
    EXPORTING
      transaction                         = l_tcode
      program                             = ls_tstc-pgmna
      dynpro                              = l_dnum
      language                            = ls_tstct-sprsl
*   WITH_DOCU                           = &apos; &apos;
*   DOCUTYPE                            = &apos;T&apos;
*   DEVELOPMENT_CLASS                   = &apos;$TMP&apos;
*   TRANSPORT_NUMBER                    =
    transaction_type                    =  l_tran_type
      shorttext                           = ls_tstct-ttext
   called_transaction                  = ls_rsstcd-call_tcode
   called_transaction_skip             = ls_rsstcd-st_skip_1
   variant                             = ls_rsstcd-variant
   cl_independend                      = ls_rsstcd-s_ind_vari
    easy_web_transaction                = l_easy_web_transaction
*   PROFESSIONEL_USER_TRANSACTION       =
    html_enabled                        =  l_html_enabled
    java_enabled                        = ls_tstcc-s_platin
    wingui_enabled                      = ls_tstcc-s_win32
    servicefile                         = ls_tstcc-s_service
*   GENFLAG                             = &apos; &apos;
*   SUPPRESS_AUTHORITY_CHECK            = &apos; &apos;
*   SUPPRESS_CORR_INSERT                = &apos; &apos;
 TABLES
*   DOCU_TABLE_USER                     =
*   DOCU_TABLE_TECH                     =
    param_values                        = lt_rsparam
 EXCEPTIONS
   cancelled                           = 1
   already_exist                       = 2
   permission_error                    = 3
   name_not_allowed                    = 4
   name_conflict                       = 5
   illegal_type                        = 6
   object_inconsistent                 = 7
   db_access_error                     = 8
   OTHERS                              = 9
            .
  IF sy-subrc &lt;&gt; 0.

    CASE sy-subrc.
      WHEN 2.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;existing.

      WHEN 3.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.

      WHEN OTHERS.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                INTO mtext
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.

        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING msg = mtext.
    ENDCASE.

  ENDIF.
  name = l_tcode.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD deleteobject.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com

  DATA: l_tcode TYPE tstc-tcode,
        mtext        TYPE string.

  l_tcode = objname.
  CALL FUNCTION &apos;RPY_TRANSACTION_DELETE&apos;
    EXPORTING
      transaction                    = l_tcode
*   TRANSPORT_NUMBER               =
*   SUPPRESS_AUTHORITY_CHECK       = &apos; &apos;
*   SUPPRESS_CORR_INSERT           = &apos; &apos;
   EXCEPTIONS
     not_excecuted                  = 1
     object_not_found               = 2
     OTHERS                         = 3
            .
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            INTO mtext
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.

    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING msg = mtext.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com

  objecttype = &apos;TRAN&apos;.  &quot;Transactions
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="SPLIT_PARAMETERS" VERSION="1" LANGU="B" DESCRIPT="Splits Transaction parameters" EXPOSURE="1" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="SPLIT_PARAMETERS" SCONAME="ET_RSPARAM" VERSION="1" LANGU="B" DESCRIPT="Parameter Assignment in Parameter Transactions" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="S_PARAM"/>
   <parameter CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="SPLIT_PARAMETERS" SCONAME="ES_RSSTCD" VERSION="1" LANGU="B" DESCRIPT="Screen fields for transaction code maintenance" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="RSSTCD"/>
   <parameter CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="SPLIT_PARAMETERS" SCONAME="IS_TSTCP" VERSION="1" LANGU="B" DESCRIPT="Parameters for Transactions" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TSTCP"/>
   <parameter CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="SPLIT_PARAMETERS" SCONAME="ES_TSTC" VERSION="1" LANGU="B" DESCRIPT="SAP Transaction Codes" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TSTC"/>
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com


*      copied from SAP standard program LSEUKF01
*      form Split_parameters to interpret the parameter
*      details of the transaction

METHOD split_parameters.

  FIELD-SYMBOLS &lt;f&gt; TYPE ANY.
  DATA: off TYPE i,
        param_beg TYPE i,
        l_length TYPE i.

  DATA: ls_param TYPE rsparam.

  REFRESH et_rsparam.
  CLEAR ls_param.


  IF is_tstcp-param(1) = &apos;\&apos;.             &quot; OO-Transaktion ohne FR

    CALL METHOD zsaplink_transactions=&gt;split_parameters_comp
      EXPORTING
        iv_type  = c_oo_program
        iv_param = is_tstcp-param
      CHANGING
        ic_value = es_tstc-pgmna.

    CALL METHOD zsaplink_transactions=&gt;split_parameters_comp
      EXPORTING
        iv_type  = c_oo_class
        iv_param = is_tstcp-param
      CHANGING
        ic_value = es_rsstcd-classname.

    CALL METHOD zsaplink_transactions=&gt;split_parameters_comp
      EXPORTING
        iv_type  = c_oo_method
        iv_param = is_tstcp-param
      CHANGING
        ic_value = es_rsstcd-method.

    IF NOT es_tstc-pgmna IS INITIAL.
      es_rsstcd-s_local = c_true.
    ENDIF.
    EXIT.
  ELSEIF is_tstcp-param(1) = &apos;@&apos;.         &quot; Transaktionsvariante
    es_rsstcd-s_vari = c_true.
    IF is_tstcp-param(2) = &apos;@@&apos;.
      es_rsstcd-s_ind_vari = c_true. off = 2.
    ELSE.
      CLEAR es_rsstcd-s_ind_vari. off = 1.
    ENDIF.
    IF is_tstcp-param CA &apos; &apos;. ENDIF.
    sy-fdpos = sy-fdpos - off.
    es_rsstcd-call_tcode = is_tstcp-param+off(sy-fdpos).
    sy-fdpos = sy-fdpos + 1 + off.
    es_rsstcd-variant = is_tstcp-param+sy-fdpos.
  ELSEIF is_tstcp-param(1) = &apos;/&apos;.
    es_rsstcd-st_tcode = c_true.
    es_rsstcd-st_prog  = space.
    IF is_tstcp-param+1(1) = &apos;*&apos;.
      es_rsstcd-st_skip_1 = c_true.
    ELSE.
      CLEAR es_rsstcd-st_skip_1.
    ENDIF.
    IF is_tstcp-param CA &apos; &apos;. ENDIF.
    param_beg = sy-fdpos + 1.
    SUBTRACT 2 FROM sy-fdpos.
    IF sy-fdpos GT 0.
      es_rsstcd-call_tcode = is_tstcp-param+2(sy-fdpos).
    ENDIF.
*    select single * from tstc into *tstc
*                    where tcode = rsstcd-call_tcode.
*    if sy-subrc = 0.
*      IF *tstc-cinfo O hex_rep.
*        PERFORM fill_tfields_report USING *tstc-pgmna.
*      ELSEIF *tstc-cinfo O hex_men OR *tstc-cinfo O hex_par.
*      ELSE.
*        PERFORM fill_tfields_dynpro USING *tstc-pgmna *tstc-dypno.
*      ENDIF.
*    ENDIF.
    SHIFT is_tstcp-param BY param_beg PLACES.
  ELSE.
    es_rsstcd-st_tcode = space.
    es_rsstcd-st_prog  = c_true.
*    PERFORM fill_tfields_dynpro USING tstc-pgmna tstc-dypno.
  ENDIF.

  DO 254 TIMES.
    IF is_tstcp-param = space. EXIT. ENDIF.
    CLEAR ls_param.
*    condense is_tstcp-param no-gaps.
    IF is_tstcp-param CA &apos;=&apos;.
      CHECK sy-fdpos NE 0.
      ASSIGN is_tstcp-param(sy-fdpos) TO &lt;f&gt;.
      ls_param-field = &lt;f&gt;.
      IF ls_param-field(1) = space. SHIFT  ls_param-field. ENDIF.
      sy-fdpos = sy-fdpos + 1.
      SHIFT is_tstcp-param BY sy-fdpos PLACES.
      IF is_tstcp-param CA &apos;;&apos;.
        IF sy-fdpos NE 0.
          ASSIGN is_tstcp-param(sy-fdpos) TO &lt;f&gt;.
          ls_param-value = &lt;f&gt;.
          IF ls_param-value(1) = space. SHIFT  ls_param-value. ENDIF.
        ENDIF.
        sy-fdpos = sy-fdpos + 1.
        SHIFT is_tstcp-param BY sy-fdpos PLACES.
        APPEND ls_param TO et_rsparam.
      ELSE.       &quot; Da _____; möglich
        l_length = STRLEN( is_tstcp-param ).
        CHECK l_length &gt; 0.
        ASSIGN is_tstcp-param(l_length) TO &lt;f&gt;.
        ls_param-value = &lt;f&gt;.
        IF ls_param-value(1) = space. SHIFT  ls_param-value. ENDIF.
        ADD 1 TO l_length.
        SHIFT is_tstcp-param BY l_length PLACES.
        APPEND ls_param TO et_rsparam.
      ENDIF.
    ENDIF.
  ENDDO.
* oo-Transaktion mit Framework
  IF es_rsstcd-call_tcode = c_oo_tcode.
    es_rsstcd-s_trframe = c_true.
    LOOP AT et_rsparam INTO ls_param.
      CASE ls_param-field.
        WHEN c_oo_frclass. es_rsstcd-classname = ls_param-value.
        WHEN c_oo_frmethod. es_rsstcd-method   = ls_param-value.
        WHEN c_oo_frupdtask.
          IF ls_param-value = c_oo_synchron.
            es_rsstcd-s_upddir  = c_true.
            es_rsstcd-s_updtask = c_false.
            es_rsstcd-s_updlok  = c_false.
          ELSEIF ls_param-value = c_oo_asynchron.
            es_rsstcd-s_upddir  = c_false.
            es_rsstcd-s_updtask = c_true.
            es_rsstcd-s_updlok  = c_false.
          ELSE.
            es_rsstcd-s_upddir  = c_false.
            es_rsstcd-s_updtask = c_false.
            es_rsstcd-s_updlok  = c_true.
          ENDIF.
      ENDCASE.
    ENDLOOP.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="SPLIT_PARAMETERS_COMP" VERSION="1" LANGU="B" DESCRIPT="Splits Parameters by position" EXPOSURE="1" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="SPLIT_PARAMETERS_COMP" SCONAME="IV_TYPE" VERSION="1" LANGU="B" DESCRIPT="Character 300" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="SPLIT_PARAMETERS_COMP" SCONAME="IV_PARAM" VERSION="1" LANGU="B" DESCRIPT="Character 300" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="SPLIT_PARAMETERS_COMP" SCONAME="IC_VALUE" VERSION="1" LANGU="B" DESCRIPT="contains 4 table elements of 250 Bytes" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com

METHOD split_parameters_comp.

  DATA: off TYPE i.

  IF iv_param CS iv_type.
    off = sy-fdpos + STRLEN( iv_type ).
    ic_value = iv_param+off.
    IF ic_value CA &apos;\&apos;.
      CLEAR ic_value+sy-fdpos.
    ENDIF.
  ENDIF.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_SOTR" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Table Contents" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_SOTR" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_SOTR" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SOTR" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SOTR" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SOTR" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_SOTR" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD checkexists.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Berthe Joseph
*      joseph.berthe@gmail.com

* No implementation

  exists = abap_true.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Berthe Joseph
*      joseph.berthe@gmail.com

  TYPES: BEGIN OF totrhead,
          packet TYPE sotr_head-paket,
         END OF totrhead.

  DATA rc(4)           TYPE n.
  DATA root_node    TYPE REF TO if_ixml_element.
  DATA sub_node     TYPE REF TO if_ixml_element.
  DATA datarow_node TYPE REF TO if_ixml_element.
  DATA _concept     TYPE sotr_head-concept.
  DATA _objtype     TYPE string.
  DATA _header      TYPE sotr_head.
  DATA _entry_keys  TYPE TABLE OF sotr_text.
  DATA _entry       TYPE TABLE OF sotr_text.
  DATA _otr_keys    TYPE TABLE OF sotr_key.
  DATA _paket       TYPE totrhead.

  FIELD-SYMBOLS: &lt;dyn_tab&gt; TYPE STANDARD TABLE.
  FIELD-SYMBOLS: &lt;dyn_wa&gt;  TYPE ANY.
  FIELD-SYMBOLS: &lt;fs_otr_key&gt; TYPE sotr_key.

* Check that table exits.
  REFRESH _otr_keys.
  CLEAR _header.

  _paket-packet = objname.
  CALL FUNCTION &apos;SOTR_GET_KEYS_FOR_PACKAGE&apos;
    EXPORTING
      paket          = _paket-packet
    IMPORTING
      sotr_keys      = _otr_keys
    EXCEPTIONS
      no_entry_found = 1
      OTHERS         = 2.

  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
    EXPORTING
      textid = zcx_saplink=&gt;error_message
      msg    = `OTR : Package not found`.
  ENDIF.

  _objtype  = getobjecttype( ).
  root_node = xmldoc-&gt;create_element( _objtype ).
  me-&gt;setattributesfromstructure( node = root_node structure = _paket  ).

  LOOP AT _otr_keys ASSIGNING &lt;fs_otr_key&gt;.
    CLEAR: _header.
    REFRESH: _entry.

    CALL FUNCTION &apos;SOTR_GET_CONCEPT&apos;
      EXPORTING
        concept        = &lt;fs_otr_key&gt;-concept
      IMPORTING
        header         = _header
      TABLES
        entries        = _entry
      EXCEPTIONS
        no_entry_found = 1
        OTHERS         = 2.




    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = `OTR not found`.
    ENDIF.

* Create sub node
    sub_node = xmldoc-&gt;create_element( &apos;SOTR_HEAD&apos; ).
    me-&gt;setattributesfromstructure( node = sub_node structure = _header  ).

* Create dynamic internal table and work area
    ASSIGN (&apos;_ENTRY[]&apos;) TO &lt;dyn_tab&gt;.

* Write records to XML node
    LOOP AT &lt;dyn_tab&gt; ASSIGNING &lt;dyn_wa&gt;.
      datarow_node = xmldoc-&gt;create_element( `SOTR_TEXT` ).
      me-&gt;setattributesfromstructure( node = datarow_node structure = &lt;dyn_wa&gt; ).
      rc = sub_node-&gt;append_child( datarow_node ).
    ENDLOOP.

    rc = root_node-&gt;append_child( sub_node ).
  ENDLOOP.
* Add node
  rc = xmldoc-&gt;append_child( root_node ).

  ixmldocument = xmldoc.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createobjectfromixmldoc.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Berthe Joseph
*      joseph.berthe@gmail.com

  TYPES: BEGIN OF totrhead,
    packet TYPE sotr_head-paket,
    END OF totrhead.


  DATA root_node        TYPE REF TO if_ixml_element.
  DATA sub_node     TYPE REF TO if_ixml_element.
  DATA sub_node_node     TYPE REF TO if_ixml_element.
  DATA sub_node_filter   TYPE REF TO if_ixml_node_filter.
  DATA sub_node_iterator TYPE REF TO if_ixml_node_iterator.

  DATA datarow_node     TYPE REF TO if_ixml_element.
  DATA datarow_filter   TYPE REF TO if_ixml_node_filter.
  DATA datarow_iterator TYPE REF TO if_ixml_node_iterator.

  DATA _objtype           TYPE string.


  DATA _header      TYPE sotr_head.
  DATA _text_tab    TYPE sotr_text_tt.
  DATA _packet      TYPE sotr_pack.
  DATA _object_type TYPE trobjtype.
  DATA _msg_err     TYPE string.
  DATA _paket       TYPE totrhead.
  DATA checkexists   TYPE flag.

  DATA dref_tab_head TYPE REF TO data.
  DATA dref_head  TYPE REF TO data.
  DATA dref_tab_text TYPE REF TO data.
  DATA dref_text  TYPE REF TO data.

  FIELD-SYMBOLS: &lt;dyn_tab_head&gt;  TYPE STANDARD TABLE.
  FIELD-SYMBOLS: &lt;dyn_tab_text&gt;  TYPE STANDARD TABLE.
  FIELD-SYMBOLS: &lt;dyn_head&gt;   TYPE sotr_head .
  FIELD-SYMBOLS: &lt;dyn_text&gt;   TYPE sotr_text .


  &quot; --&gt;
  &quot; This bloc is useless for this version.
  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.
  &quot; &lt;--

  _objtype = getobjecttype( ).
  _object_type = _objtype.
  xmldoc = ixmldocument.
  root_node ?= xmldoc-&gt;find_from_name( _objtype ).

* Get table name from XML.
  me-&gt;getstructurefromattributes(
          EXPORTING  node      = root_node
          CHANGING   structure = _paket ).

  _packet = _paket-packet.

  &quot; Check if Package exist.
  SELECT COUNT(*) FROM tdevc WHERE devclass EQ _packet.

  IF sy-subrc EQ 0.

* Create dynamic internal table and work area
    CREATE DATA dref_tab_head TYPE TABLE OF (&apos;SOTR_HEAD&apos;).
    ASSIGN dref_tab_head-&gt;* TO &lt;dyn_tab_head&gt;.
    CREATE DATA dref_head LIKE LINE OF &lt;dyn_tab_head&gt;.
    ASSIGN dref_head-&gt;* TO &lt;dyn_head&gt;.

* Build dynamic internal table from XML
    FREE: sub_node_filter, sub_node_iterator, sub_node_node.

    &quot; Find all sub_node.

    sub_node_filter = xmldoc-&gt;create_filter_name( `SOTR_HEAD` ).
    sub_node_iterator = xmldoc-&gt;create_iterator_filtered( sub_node_filter ).
    sub_node_node ?= sub_node_iterator-&gt;get_next( ).
    WHILE sub_node_node IS NOT INITIAL.
      APPEND INITIAL LINE TO &lt;dyn_tab_head&gt; ASSIGNING &lt;dyn_head&gt;.
      me-&gt;getstructurefromattributes(
              EXPORTING   node      = sub_node_node
              CHANGING    structure = &lt;dyn_head&gt; ).


* Create dynamic internal table and work area
      CREATE DATA dref_tab_text TYPE TABLE OF (&apos;SOTR_TEXT&apos;).
      ASSIGN dref_tab_text-&gt;* TO &lt;dyn_tab_text&gt;.
      CREATE DATA dref_text LIKE LINE OF &lt;dyn_tab_text&gt;.
      ASSIGN dref_text-&gt;* TO &lt;dyn_text&gt;.
      FREE: datarow_filter, datarow_iterator, datarow_node.

      datarow_filter = sub_node_node-&gt;create_filter_name( `SOTR_TEXT` ).
      datarow_iterator = sub_node_node-&gt;create_iterator_filtered( datarow_filter ).
      datarow_node ?= datarow_iterator-&gt;get_next( ).
      WHILE datarow_node IS NOT INITIAL.
        APPEND INITIAL LINE TO &lt;dyn_tab_text&gt; ASSIGNING &lt;dyn_text&gt;.
        me-&gt;getstructurefromattributes(
        EXPORTING   node      = datarow_node
        CHANGING    structure = &lt;dyn_text&gt; ).

        APPEND &lt;dyn_text&gt; TO _text_tab.


        datarow_node ?= datarow_iterator-&gt;get_next( ).
      ENDWHILE.

* Create the OTR
      CALL FUNCTION &apos;SOTR_CREATE_CONCEPT&apos;
        EXPORTING
          paket                         = _packet
          crea_lan                      = &lt;dyn_head&gt;-crea_lan
          alias_name                    = &lt;dyn_head&gt;-alias_name
          object                        = &apos;WDCC&apos;
          entries                       = _text_tab
        EXCEPTIONS
          package_missing               = 1
          crea_lan_missing              = 2
          object_missing                = 3
          paket_does_not_exist          = 4
          alias_already_exist           = 5
          object_type_not_found         = 6
          langu_missing                 = 7
          identical_context_not_allowed = 8
          text_too_long                 = 9
          error_in_update               = 10
          no_master_langu               = 11
          error_in_concept_id           = 12
          alias_not_allowed             = 13
          tadir_entry_creation_failed   = 14
          internal_error                = 15
          error_in_correction           = 16
          user_cancelled                = 17
          no_entry_found                = 18
          OTHERS                        = 19.
      IF sy-subrc &lt;&gt; 0.
        DATA: lv_msg  TYPE string.
        CASE sy-subrc.
          WHEN 1.
            lv_msg = &apos;OTR : Package missing.&apos;.
          WHEN 2.
            lv_msg = &apos;OTR : Language missing.&apos;.
          WHEN 3.
            lv_msg = &apos;OTR : Object missing.&apos;.
          WHEN 4.
            lv_msg = &apos;OTR : Packet doesn&apos;&apos;t exist.&apos;.
          WHEN 5.
            lv_msg = &apos;OTR : Alias already exist.&apos;.
          WHEN 6.
            lv_msg = &apos;OTR : Object type not found.&apos;.
          WHEN 7.
            lv_msg = &apos;OTR : Language missing.&apos;.
          WHEN 8.
            lv_msg = &apos;OTR : Identical context not allowed.&apos;.
          WHEN 9.
            lv_msg = &apos;OTR : Text too long.&apos;.
          WHEN 10.
            lv_msg = &apos;OTR : Error in update.&apos;.
          WHEN 11.
            lv_msg = &apos;OTR : No master language.&apos;.
          WHEN 12.
            lv_msg = &apos;OTR : Error in concept ID (GUID).&apos;.
          WHEN 13.
            lv_msg = &apos;OTR : Alias not allowed.&apos;.
          WHEN 14.
            lv_msg = &apos;OTR : TADIR entry creation failed.&apos;.
          WHEN 15.
            lv_msg = &apos;OTR : Internal Error.&apos;.
          WHEN 16.
            lv_msg = &apos;OTR : Error in correction.&apos;.
          WHEN 17.
            lv_msg = &apos;OTR : User cancelled.&apos;.
          WHEN 18.
            lv_msg = &apos;OTR : No entry found.&apos;.
          WHEN OTHERS.
            lv_msg = &apos;OTR : Global error.&apos;.
        ENDCASE.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = lv_msg.
      ENDIF.

      sub_node_node ?= sub_node_iterator-&gt;get_next( ).
    ENDWHILE.
  ELSE.

    CONCATENATE &apos;Package &apos; _packet &apos; doesn&apos;&apos;t exist.&apos; INTO _msg_err RESPECTING BLANKS.

    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = _msg_err.

  ENDIF.


  name = _packet.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD deleteobject.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Berthe Joseph
*      joseph.berthe@gmail.com


  TYPES: BEGIN OF totrhead,
        packet TYPE sotr_head-paket,
  END OF totrhead.

  DATA _concept     TYPE sotr_head-concept.
  DATA _objtype     TYPE string.
  DATA _header      TYPE sotr_head.
  DATA _entry_keys  TYPE TABLE OF sotr_text.
  DATA _entry       TYPE TABLE OF sotr_text.
  DATA _otr_keys    TYPE TABLE OF sotr_key.
  DATA _paket       TYPE totrhead.

  FIELD-SYMBOLS: &lt;fs_otr_key&gt; TYPE sotr_key.

  _paket-packet = objname.

  CALL FUNCTION &apos;SOTR_GET_KEYS_FOR_PACKAGE&apos;
    EXPORTING
      paket          = _paket-packet
    IMPORTING
      sotr_keys      = _otr_keys
    EXCEPTIONS
      no_entry_found = 1
      OTHERS         = 2.

  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = `OTR : Package not found`.
  ENDIF.

  _objtype  = getobjecttype( ).

  LOOP AT _otr_keys ASSIGNING &lt;fs_otr_key&gt;.
    CLEAR: _header.
    REFRESH: _entry.

    CALL FUNCTION &apos;SOTR_DELETE_CONCEPT&apos;
      EXPORTING
        concept             = &lt;fs_otr_key&gt;-concept
      EXCEPTIONS
        no_authorization    = 1
        no_entry_found      = 2
        concept_used        = 3
        no_master_language  = 4
        no_source_system    = 5
        no_tadir_entry      = 6
        error_in_correction = 7
        user_cancelled      = 8
        text_not_found      = 9
        invalid_package     = 10
        text_not_changeable = 11
        text_enqueued       = 12
        no_correction       = 13
        parameter_error     = 14.

    DATA _msg_err     TYPE string.
    CLEAR _msg_err.

    CASE sy-subrc.
      WHEN 14.
        _msg_err = &apos;OTR (Del) : No TADIR found.&apos;.
      WHEN 7.
        _msg_err = &apos;OTR (Del) : Error in correction.&apos;.
      WHEN 8.
        _msg_err = &apos;OTR (Del) : ser Cancelled.&apos;.
      WHEN 10.
        _msg_err = &apos;OTR (Del) : Invalid package.&apos;.
      WHEN 14.
        _msg_err = &apos;OTR (Del) : ext no t changeable.&apos;.
      WHEN 12.
        _msg_err = &apos;OTR (Del) : Txt Enqueued.&apos;.
      WHEN 13.
        _msg_err = &apos;OTR (Del) : No Correction&apos;.
      WHEN 14.
        _msg_err = &apos;OTR (Del) : Parameter error.&apos;.
      WHEN 9.
      WHEN OTHERS.
    ENDCASE.

    IF _msg_err IS NOT INITIAL.
      CONCATENATE _msg_err &lt;fs_otr_key&gt;-concept INTO _msg_err SEPARATED BY space.

      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = _msg_err.
    ENDIF.


  ENDLOOP.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Berthe Joseph
*      joseph.berthe@gmail.com

  objecttype = &apos;SOTR&apos;.  &quot;Table Contents

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_DEVC" VERSION="1" LANGU="D" DESCRIPT="SapLink Class Installer" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <types CLSNAME="ZSAPLINK_DEVC" CMPNAME="TS_FIELD_MAP" VERSION="1" LANGU="D" DESCRIPT="Field map" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="17 " SRCCOLUMN1="4 " SRCROW2="20 " SRCCOLUMN2="24 " TYPESRC_LENG="0 " TYPESRC='BEGIN OF ts_field_map,
        st_fn TYPE string, &quot; Structure Field Name
        obj_fn TYPE string, &quot; Object Field NAME
      END OF ts_field_map
'/>
  <types CLSNAME="ZSAPLINK_DEVC" CMPNAME="TT_FIELD_MAP" VERSION="1" LANGU="D" DESCRIPT="Mapping" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="22 " SRCCOLUMN1="4 " SRCROW2="22 " SRCCOLUMN2="71 " TYPESRC_LENG="0 " TYPESRC="tt_field_map TYPE SORTED TABLE OF ts_field_map WITH UNIQUE KEY st_fn
"/>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZSAPLINK_DEVC" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_DEVC" TYPEGROUP="SEOP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_DEVC" TYPEGROUP="SEOR" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_DEVC" TYPEGROUP="SEOS" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_DEVC" TYPEGROUP="SEOT" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_DEVC" TYPEGROUP="SEOX" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <forwardDeclaration>SEOP</forwardDeclaration>
  <forwardDeclaration>SEOR</forwardDeclaration>
  <forwardDeclaration>SEOS</forwardDeclaration>
  <forwardDeclaration>SEOT</forwardDeclaration>
  <forwardDeclaration>SEOX</forwardDeclaration>
  <attribute CLSNAME="ZSAPLINK_DEVC" CMPNAME="OBJ" VERSION="1" LANGU="D" DESCRIPT="Interface for Packages" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="IF_PACKAGE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_DEVC" CMPNAME="SCOMPKDTLN_MAPPING" VERSION="1" LANGU="D" DESCRIPT="Mapping" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TT_FIELD_MAP" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_DEVC" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_DEVC" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DEVC" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DEVC" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DEVC" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_DEVC" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This plugin have been don by : Taryck BENSIALI                    |
*|                                                                     |
*|   e-mail : taryck@bensiali.net                                      |
*|                                                                     |
*|   this plugin is distributed in the hope that it will be useful,    |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*\---------------------------------------------------------------------/


data _key type DEVCLASS.
data _devc type ref to IF_PACKAGE. &quot;for debug

  _key = objname.
  CALL METHOD cl_package=&gt;if_package~load_package
    EXPORTING
      i_package_name             = _key
      i_force_reload             = &apos;X&apos;
    IMPORTING
      e_package                  = _devc
    EXCEPTIONS
      object_not_existing        = 1
*      unexpected_error           = 2  =&gt; DUMP
*      intern_err                 = 3  =&gt; DUMP
      object_locked_and_modified = 0
*      others                     = 5  =&gt; DUMP
          .
  IF sy-subrc = 0.
    exists = &apos;X&apos;.
  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_DEVC" CMPNAME="CLASS_CONSTRUCTOR" VERSION="1" LANGU="D" DESCRIPT="CLASS_CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CLASS_CONSTRUCTOR.
*/---------------------------------------------------------------------\
*|   This plugin have been don by : Taryck BENSIALI                    |
*|                                                                     |
*|   e-mail : taryck@bensiali.net                                      |
*|                                                                     |
*|   this plugin is distributed in the hope that it will be useful,    |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*\---------------------------------------------------------------------/

  data: _wa like LINE OF SCOMPKDTLN_MAPPING.

* FROM method M_LOAD_DATA of CL_PACKAGE

* Package
  _wa-st_fn = &apos;DEVCLASS&apos;.
  _wa-obj_fn = &apos;PACKAGE_NAME&apos;.
  INSERT _wa into TABLE SCOMPKDTLN_MAPPING.

* Short Description of Repository Objects
  _wa-st_fn = &apos;CTEXT&apos;.
  _wa-obj_fn = &apos;SHORT_TEXT&apos;.
  INSERT _wa into TABLE SCOMPKDTLN_MAPPING.

* Indicator for Object Deleted from Memory
  _wa-st_fn = &apos;DEL_IN_MEM&apos;.
  _wa-obj_fn = &apos;DELETED_IN_MEMORY&apos;.
  INSERT _wa into TABLE SCOMPKDTLN_MAPPING.

* Language Key
  _wa-st_fn = &apos;LANGUAGE&apos;.
  _wa-obj_fn = &apos;TEXT_LANGUAGE&apos;.
  INSERT _wa into TABLE SCOMPKDTLN_MAPPING.

* Original Language in Repository objects
  _wa-st_fn = &apos;MASTERLANG&apos;.
  _wa-obj_fn = &apos;MASTER_LANGUAGE&apos;.
  INSERT _wa into TABLE SCOMPKDTLN_MAPPING.

* Changes Recorded
  _wa-st_fn = &apos;KORRFLAG&apos;.
  _wa-obj_fn = &apos;WBO_KORR_FLAG&apos;.
  INSERT _wa into TABLE SCOMPKDTLN_MAPPING.

* User Responsible for Package
  _wa-st_fn = &apos;AS4USER&apos;.
  _wa-obj_fn = &apos;AUTHOR&apos;.
  INSERT _wa into TABLE SCOMPKDTLN_MAPPING.

* Transport Layer in ABAP Workbench
  _wa-st_fn = &apos;PDEVCLASS&apos;.
  _wa-obj_fn = &apos;TRANSPORT_LAYER&apos;.
  INSERT _wa into TABLE SCOMPKDTLN_MAPPING.

** Short Text for Transport Layer
*  _wa-st_fn = &apos;LAYER_TEXT&apos;.
*  _wa-obj_fn = &apos;TRANSPORT_LAYER_TEXT&apos;.
*  INSERT _wa into TABLE SCOMPKDTLN_MAPPING.

* Software Component
  _wa-st_fn = &apos;DLVUNIT&apos;.
  _wa-obj_fn = &apos;SOFTWARE_COMPONENT&apos;.
  INSERT _wa into TABLE SCOMPKDTLN_MAPPING.

* Application Component ID
  _wa-st_fn = &apos;COMP_POSID&apos;.
  _wa-obj_fn = &apos;APPLICATION_COMPONENT_ABBREV&apos;.
  INSERT _wa into TABLE SCOMPKDTLN_MAPPING.

* Application Component
  _wa-st_fn = &apos;COMPONENT&apos;.
  _wa-obj_fn = &apos;APPLICATION_COMPONENT&apos;.
  INSERT _wa into TABLE SCOMPKDTLN_MAPPING.

* Flag: Inherit Use Accesses from Surrounding Package
  _wa-st_fn = &apos;PERMINHER&apos;.
  _wa-obj_fn = &apos;INHERITS_PERMISSIONS&apos;.
  INSERT _wa into TABLE SCOMPKDTLN_MAPPING.

* Surrounding Package
  _wa-st_fn = &apos;PARENTCL&apos;.
  _wa-obj_fn = &apos;SUPER_PACKAGE_NAME&apos;.
  INSERT _wa into TABLE SCOMPKDTLN_MAPPING.

* Prefix for Package Interfaces (Suggested Value)
  _wa-st_fn = &apos;INTFPREFX&apos;.
  _wa-obj_fn = &apos;INTERFACE_PREFIX&apos;.
  INSERT _wa into TABLE SCOMPKDTLN_MAPPING.

* Package Type (Permitted Object Types)
  _wa-st_fn = &apos;PACKTYPE&apos;.
  _wa-obj_fn = &apos;PACKAGE_TYPE&apos;.
  INSERT _wa into TABLE SCOMPKDTLN_MAPPING.

* Constraint on Extending Package
  _wa-st_fn = &apos;RESTRICTED&apos;.
  _wa-obj_fn = &apos;EXTENSION_RESTRICTED&apos;.
  INSERT _wa into TABLE SCOMPKDTLN_MAPPING.

* Main Package Indicator
  _wa-st_fn = &apos;MAINPACK&apos;.
  _wa-obj_fn = &apos;MAIN_PACKAGE&apos;.
  INSERT _wa into TABLE SCOMPKDTLN_MAPPING.

* Flag for Package Check as Server
  _wa-st_fn = &apos;SRV_CHECK&apos;.
  _wa-obj_fn = &apos;CHECKS_AS_SERVER_ENFORCED&apos;.
  INSERT _wa into TABLE SCOMPKDTLN_MAPPING.

* Flag: Package Check as Client
  _wa-st_fn = &apos;CLI_CHECK&apos;.
  _wa-obj_fn = &apos;CHECKS_AS_CLIENT_ENFORCED&apos;.
  INSERT _wa into TABLE SCOMPKDTLN_MAPPING.

* Alias for R/3 Enterprise Extension in Transaction FIBF
  _wa-st_fn = &apos;EXT_ALIAS&apos;.
  _wa-obj_fn = &apos;R3_EXTENSION_ALIAS&apos;.
  INSERT _wa into TABLE SCOMPKDTLN_MAPPING.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createixmldocfromobject.
*/---------------------------------------------------------------------\
*|   This plugin have been don by : Taryck BENSIALI                    |
*|                                                                     |
*|   e-mail : taryck@bensiali.net                                      |
*|                                                                     |
*|   this plugin is distributed in the hope that it will be useful,    |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*\---------------------------------------------------------------------/


  DATA _devc_data TYPE scompkdtln.
  DATA rc         TYPE sysubrc.  &quot; for debug
  DATA _objtype   TYPE string.
  DATA tmp_str    TYPE string.

  DATA root_node     TYPE REF TO if_ixml_element.

  _objtype  = getobjecttype( ).
  root_node = xmldoc-&gt;create_element( _objtype ).

  load_obj( ).
  obj_2_struct( EXPORTING obj = obj
                      mapping = scompkdtln_mapping
              CHANGING struct = _devc_data ).

  setattributesfromstructure( node = root_node structure = _devc_data  ).
* because of the following code in the previous method we have to set back DEVCLASS
*        when &apos;DEVCLASS&apos;. &quot;development class should always be $TMP
*          sValue = &apos;$TMP&apos;.
  tmp_str = _devc_data-devclass.
  rc = root_node-&gt;set_attribute( name = &apos;DEVCLASS&apos; value = tmp_str ).

  rc = xmldoc-&gt;append_child( root_node ).
  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createobjectfromixmldoc.
*/---------------------------------------------------------------------\
*|   This plugin have been don by : Taryck BENSIALI                    |
*|                                                                     |
*|   e-mail : taryck@bensiali.net                                      |
*|                                                                     |
*|   this plugin is distributed in the hope that it will be useful,    |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*\---------------------------------------------------------------------/

  DATA root_node        TYPE REF TO if_ixml_element.
  DATA rootnode TYPE REF TO if_ixml_element.
  DATA objname TYPE e071-obj_name.
  DATA _objtype TYPE string.
  DATA _devc_data TYPE scompkdtln.

  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  root_node = xmldoc-&gt;find_from_name( _objtype ).

* Get Root
  me-&gt;getstructurefromattributes(
          EXPORTING  node      = root_node
          CHANGING   structure = _devc_data ).

  objname = _devc_data-devclass.

* Done in method S_LOCK_DB de CL_PACKAGE
*  CALL FUNCTION &apos;RS_ACCESS_PERMISSION&apos;
*    EXPORTING
*      global_lock              = &apos;X&apos;
*      mode                     = &apos;INSERT&apos;
*      object                   = objname
*      object_class             = _objtype
*    EXCEPTIONS
*      canceled_in_corr         = 1
*      enqueued_by_user         = 3
*      enqueue_system_failure   = 4
*      locked_by_author         = 5
*      illegal_parameter_values = 6
*      no_modify_permission     = 7
*      no_show_permission       = 8
*      permission_failure       = 9.
*
*  IF sy-subrc &lt;&gt; 0.
*    CASE sy-subrc.
*      WHEN 7 OR 8 OR 9.
*        RAISE EXCEPTION TYPE zcx_saplink
*          EXPORTING
*            textid = zcx_saplink=&gt;not_authorized.
*      WHEN 5.
*        RAISE EXCEPTION TYPE zcx_saplink
*          EXPORTING
*            textid = zcx_saplink=&gt;error_message
*            msg = &apos;object locked&apos;.
*      WHEN OTHERS.
*        RAISE EXCEPTION TYPE zcx_saplink
*          EXPORTING
*            textid = zcx_saplink=&gt;system_error.
*    ENDCASE.
*  ENDIF.

*  CALL FUNCTION &apos;RS_CORR_INSERT&apos;
*    EXPORTING
*      object              = objname
*      object_class        = _objtype
*      mode                = &apos;INSERT&apos;
*      global_lock         = &apos;X&apos;
**     devclass            = devclass
*      author              = sy-uname
*      master_language     = sy-langu
*    EXCEPTIONS
*      cancelled           = 1
*      permission_failure  = 2
*      unknown_objectclass = 3.
*  IF sy-subrc &lt;&gt; 0.
*    CASE sy-subrc.
*      WHEN 2.
*        RAISE EXCEPTION TYPE zcx_saplink
*          EXPORTING
*            textid = zcx_saplink=&gt;not_authorized.
*      WHEN OTHERS.
*        RAISE EXCEPTION TYPE zcx_saplink
*          EXPORTING
*            textid = zcx_saplink=&gt;system_error.
*    ENDCASE.
*  ENDIF.

  CALL METHOD cl_package=&gt;if_package~create_new_package
*    EXPORTING
*      i_reuse_deleted_object     = &apos;X&apos;
    IMPORTING
      e_package                  = obj
    CHANGING
      c_package_data             = _devc_data
    EXCEPTIONS
      object_already_existing    = 1
      object_just_created        = 2
      not_authorized             = 3
      wrong_name_prefix          = 4
      undefined_name             = 5
      reserved_local_name        = 6
      invalid_package_name       = 7
      short_text_missing         = 8
      software_component_invalid = 9
      layer_invalid              = 10
      author_not_existing        = 11
      component_not_existing     = 12
      component_missing          = 13
      prefix_in_use              = 14
      unexpected_error           = 15
      intern_err                 = 16
      OTHERS                     = 17
          .
  IF sy-subrc = 11.
    _devc_data-as4user = sy-uname.
    CALL METHOD cl_package=&gt;if_package~create_new_package
*    EXPORTING
*      i_reuse_deleted_object     = &apos;X&apos;
      IMPORTING
        e_package                  = obj
      CHANGING
        c_package_data             = _devc_data
      EXCEPTIONS
        object_already_existing    = 1
        object_just_created        = 2
        not_authorized             = 3
        wrong_name_prefix          = 4
        undefined_name             = 5
        reserved_local_name        = 6
        invalid_package_name       = 7
        short_text_missing         = 8
        software_component_invalid = 9
        layer_invalid              = 10
        author_not_existing        = 11
        component_not_existing     = 12
        component_missing          = 13
        prefix_in_use              = 14
        unexpected_error           = 15
        intern_err                 = 16
        OTHERS                     = 17
            .
  ENDIF.
  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;All ready exist&apos;.
      WHEN 2 OR 3.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;not_authorized.
      WHEN 4 OR 5 OR 6 OR 7.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;Problem with Dev Class name&apos;.
      WHEN 8.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;Problem with Short Text&apos;.
      WHEN 9.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;Problem with SoftwareComponent&apos;.
      WHEN 10.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;Problem with Layer&apos;.
      WHEN 12 OR 13.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;Problem with Component&apos;.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL METHOD obj-&gt;save
*    EXPORTING
*      i_transport_request   =
*    IMPORTING
*      e_transport_request   =
    EXCEPTIONS
      object_invalid        = 1
      object_not_changeable = 2
      cancelled_in_corr     = 3
      permission_failure    = 4
      unexpected_error      = 5
      intern_err            = 6
      OTHERS                = 7
          .
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg = &apos;Dev Class creation failed !&apos;.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD deleteobject.
*/---------------------------------------------------------------------\
*|   This plugin have been don by : Taryck BENSIALI                    |
*|                                                                     |
*|   e-mail : taryck@bensiali.net                                      |
*|                                                                     |
*|   this plugin is distributed in the hope that it will be useful,    |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*\---------------------------------------------------------------------/

  load_obj( ).
  CALL METHOD obj-&gt;delete
    EXCEPTIONS
      object_not_empty      = 1
      object_not_changeable = 2
      object_invalid        = 3
      intern_err            = 4
      OTHERS                = 5.
  IF sy-subrc &lt;&gt; 0.
*  MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*             WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.
  CALL METHOD obj-&gt;save
    EXPORTING
      i_transport_request   = space
*   IMPORTING
*     e_transport_request   =
    EXCEPTIONS
      object_invalid        = 1
      object_not_changeable = 2
      cancelled_in_corr     = 3
      permission_failure    = 4
      unexpected_error      = 5
      intern_err            = 6
      OTHERS                = 7
          .
  IF sy-subrc &lt;&gt; 0.
*  MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*             WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This plugin have been don by : Taryck BENSIALI                    |
*|                                                                     |
*|   e-mail : taryck@bensiali.net                                      |
*|                                                                     |
*|   this plugin is distributed in the hope that it will be useful,    |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*\---------------------------------------------------------------------/

  objecttype = &apos;DEVC&apos;.  &quot;Dev class

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_DEVC" CMPNAME="LOAD_OBJ" VERSION="1" LANGU="D" DESCRIPT="Load IF_Package" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method LOAD_OBJ.
*/---------------------------------------------------------------------\
*|   This plugin have been don by : Taryck BENSIALI                    |
*|                                                                     |
*|   e-mail : taryck@bensiali.net                                      |
*|                                                                     |
*|   this plugin is distributed in the hope that it will be useful,    |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*\---------------------------------------------------------------------/
  data _key type DEVCLASS.

  _key = objname.
  CALL METHOD cl_package=&gt;if_package~load_package
    EXPORTING
      i_package_name             = _key
      i_force_reload             = &apos;X&apos;
    IMPORTING
      e_package                  = obj
    EXCEPTIONS
      object_not_existing        = 1
      unexpected_error           = 2
      intern_err                 = 3
      object_locked_and_modified = 4
      others                     = 5
          .
  IF sy-subrc &lt;&gt; 0.
    clear obj.
  ENDIF.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_DEVC" CMPNAME="OBJ_2_STRUCT" VERSION="1" LANGU="D" DESCRIPT="Object fields to Structure fierlds" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_DEVC" CMPNAME="OBJ_2_STRUCT" SCONAME="OBJ" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="OBJECT"/>
   <parameter CLSNAME="ZSAPLINK_DEVC" CMPNAME="OBJ_2_STRUCT" SCONAME="MAPPING" VERSION="1" LANGU="D" DESCRIPT="Mapping" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TT_FIELD_MAP" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_DEVC" CMPNAME="OBJ_2_STRUCT" SCONAME="STRUCT" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <source>METHOD obj_2_struct.
*/---------------------------------------------------------------------\
*|   This plugin have been don by : Taryck BENSIALI                    |
*|                                                                     |
*|   e-mail : taryck@bensiali.net                                      |
*|                                                                     |
*|   this plugin is distributed in the hope that it will be useful,    |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*\---------------------------------------------------------------------/
  DATA:
    of TYPE string,
    desc TYPE REF TO cl_abap_typedescr,
    fields TYPE REF TO cl_abap_structdescr.
  FIELD-SYMBOLS:
    &lt;map&gt; LIKE LINE OF mapping,
    &lt;field&gt; LIKE LINE OF fields-&gt;components,
    &lt;sf&gt; TYPE ANY,
    &lt;of&gt; TYPE ANY.

  CALL METHOD cl_abap_datadescr=&gt;describe_by_data
    EXPORTING
      p_data      = struct
    RECEIVING
      p_descr_ref = desc.

  CHECK desc-&gt;kind = cl_abap_typedescr=&gt;kind_struct.
  CHECK desc-&gt;type_kind = cl_abap_typedescr=&gt;typekind_struct1
     OR desc-&gt;type_kind = cl_abap_typedescr=&gt;typekind_struct2.

  fields ?= desc.
  CHECK fields-&gt;struct_kind = cl_abap_structdescr=&gt;structkind_flat.

  LOOP AT fields-&gt;components ASSIGNING &lt;field&gt;.
* Check for exception
    READ TABLE mapping WITH TABLE KEY st_fn = &lt;field&gt;-name
                       ASSIGNING &lt;map&gt;.
    IF sy-subrc &lt;&gt; 0.
      CONCATENATE &apos;OBJ-&gt;&apos; &lt;field&gt;-name INTO of.
    ELSE.
      CONCATENATE &apos;OBJ-&gt;&apos; &lt;map&gt;-obj_fn INTO of.
    ENDIF.
    ASSIGN (of) TO &lt;of&gt;.
    CHECK sy-subrc = 0.

    ASSIGN COMPONENT &lt;field&gt;-name OF STRUCTURE struct TO &lt;sf&gt;.
    CHECK sy-subrc = 0.

    TRY.
        &lt;sf&gt; = &lt;of&gt;.
      CATCH cx_root.
    ENDTRY.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_TOOLS" VERSION="1" LANGU="D" DESCRIPT="SAPlink tools and utilities" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <types CLSNAME="ZSAPLINK_TOOLS" CMPNAME="TY_E071" VERSION="1" LANGU="D" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="11 " SRCCOLUMN1="4 " SRCROW2="16 " SRCCOLUMN2="24 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF ty_e071,
             obj_name TYPE e071-obj_name,
             trkorr   TYPE e071-trkorr,
             activity TYPE e071-activity,
             used     TYPE abap_bool.
    TYPES: END OF ty_e071
"/>
  <types CLSNAME="ZSAPLINK_TOOLS" CMPNAME="TY_T_E071" VERSION="1" LANGU="D" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="18 " SRCCOLUMN1="4 " SRCROW2="18 " SRCCOLUMN2="43 " TYPESRC_LENG="0 " TYPESRC="ty_t_e071 TYPE STANDARD TABLE OF ty_e071
"/>
  <types CLSNAME="ZSAPLINK_TOOLS" CMPNAME="TY_E071K" VERSION="1" LANGU="D" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="4" SRCROW1="20 " SRCCOLUMN1="4 " SRCROW2="27 " SRCCOLUMN2="27 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF ty_e071k,
               trkorr     TYPE e071k-trkorr,
               activity   TYPE e071k-activity,
               mastername TYPE e071k-mastername,
               viewname   TYPE e071k-viewname,
               objname    TYPE e071k-objname,
               tabkey     TYPE e071k-tabkey.
    TYPES:   END OF ty_e071k
"/>
  <types CLSNAME="ZSAPLINK_TOOLS" CMPNAME="TY_T_E071K" VERSION="1" LANGU="D" EXPOSURE="2" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="29 " SRCCOLUMN1="4 " SRCROW2="29 " SRCCOLUMN2="45 " TYPESRC_LENG="0 " TYPESRC="ty_t_e071k TYPE STANDARD TABLE OF ty_e071k
"/>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZSAPLINK_TOOLS" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <attribute CLSNAME="ZSAPLINK_TOOLS" CMPNAME="C_BEHAVIOR_ASK" VERSION="1" LANGU="D" DESCRIPT="Ask for filter; export tables or not depending on answer" EXPOSURE="2" STATE="1" EDITORDER="6 " ATTDECLTYP="2" ATTVALUE="&apos; &apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="C" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TOOLS" CMPNAME="C_BEHAVIOR_DONT" VERSION="1" LANGU="D" DESCRIPT="Don&apos;t ask for filter anymore; don&apos;t export any table" EXPOSURE="2" STATE="1" EDITORDER="8 " ATTDECLTYP="2" ATTVALUE="&apos;N&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="C" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TOOLS" CMPNAME="C_BEHAVIOR_EXPORT" VERSION="1" LANGU="D" DESCRIPT="Don&apos;t ask for filter anymore; export all tables" EXPOSURE="2" STATE="1" EDITORDER="7 " ATTDECLTYP="2" ATTVALUE="&apos;Y&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="C" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TOOLS" CMPNAME="C_MEM_ID_SELOP" VERSION="1" LANGU="D" DESCRIPT="MEMORY ID preffix for each filter SELECT-OPTION" EXPOSURE="2" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="&apos;ZSAPLINK_FILTERS_SELOP_&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR30" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TOOLS" CMPNAME="C_MEM_ID_SELOPS" VERSION="1" LANGU="D" DESCRIPT="MEMORY ID for filter parameters" EXPOSURE="2" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;ZSAPLINK_FILTERS_SELOPS&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR30" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TOOLS" CMPNAME="C_MODE_OBJECT" VERSION="1" LANGU="D" DESCRIPT="Export from object" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;O&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="C" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TOOLS" CMPNAME="C_MODE_OTHER" VERSION="1" LANGU="D" DESCRIPT="Export from other" EXPOSURE="2" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;?&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="C" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TOOLS" CMPNAME="C_MODE_REQUEST" VERSION="1" LANGU="D" DESCRIPT="Export from request" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;R&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="C" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TOOLS" CMPNAME="GV_BEHAVIOR" VERSION="1" LANGU="D" DESCRIPT="Behavior of filter dialog" EXPOSURE="0" STATE="1" EDITORDER="9 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="C" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZSAPLINK_TOOLS" CMPNAME="ADD_TO_REQUEST" VERSION="1" LANGU="D" DESCRIPT="Add a SAPLink object to a request" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="ADD_TO_REQUEST" SCONAME="IT_E071K" VERSION="1" LANGU="D" DESCRIPT="Entradas de tabela a processar (interface de correção)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TREDT_KEYS" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="ADD_TO_REQUEST" SCONAME="IS_KO200" VERSION="1" LANGU="D" DESCRIPT="Estrutura de interface p/objetos no CTS" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="KO200"/>
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="ADD_TO_REQUEST" SCONAME="RV_RESULT" VERSION="1" LANGU="D" DESCRIPT="Código de retorno de instruções ABAP" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SY-SUBRC"/>
   <source>METHOD ADD_TO_REQUEST.

  DATA: ls_ko200   LIKE is_ko200,
        lt_e071k   LIKE it_e071k,
        lv_korrnum TYPE trkorr.

  ls_ko200 = is_ko200.
  lt_e071k[] = it_e071k[].

  CALL FUNCTION &apos;TR_OBJECT_CHECK&apos;
    EXPORTING
      wi_ko200                = ls_ko200
    TABLES
      wt_e071k                = lt_e071k
    EXCEPTIONS
      cancel_edit_other_error = 1
      show_only_other_error   = 2
      OTHERS                  = 3.

  IF sy-subrc &lt;&gt; 0.
    rv_result = sy-subrc.
    EXIT.
  ENDIF.

  IMPORT trkorr TO lv_korrnum FROM MEMORY ID &apos;ZSAPLINK_TRKORR&apos;.

  CALL FUNCTION &apos;TR_OBJECT_INSERT&apos;
    EXPORTING
      wi_order                = lv_korrnum
      wi_ko200                = ls_ko200
      iv_no_standard_editor   = abap_true
      iv_no_show_option       = abap_true
    IMPORTING
      we_task                 = lv_korrnum
    TABLES
      wt_e071k                = lt_e071k
    EXCEPTIONS
      cancel_edit_other_error = 1
      show_only_other_error   = 2
      OTHERS                  = 3.

  rv_result = sy-subrc.

  IF rv_result = 0.
    EXPORT trkorr FROM lv_korrnum TO MEMORY ID &apos;ZSAPLINK_TRKORR&apos;.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_TOOLS" CMPNAME="BUILDSOURCESTRING" VERSION="1" LANGU="D" EXPOSURE="1" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="BUILDSOURCESTRING" SCONAME="SOURCETABLE" VERSION="1" LANGU="D" DESCRIPT="Table of Strings" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RSWSOURCET" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="BUILDSOURCESTRING" SCONAME="PAGETABLE" VERSION="1" LANGU="D" DESCRIPT="O2: Oxygen Page Table" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="O2PAGELINE_TABLE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="BUILDSOURCESTRING" SCONAME="SOURCESTRING" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method BUILDSOURCESTRING .
data sTemp type string.
data pageLine type O2PAGELINE.

  if sourceTable is not initial.
    loop at sourceTable into sTemp.
      concatenate sourceString sTemp CL_ABAP_CHAR_UTILITIES=&gt;NEWLINE
        into sourceString.
    endloop.
  elseif pageTable is not initial.
    loop at pageTable into pageLine.
      concatenate sourceString pageLine-line
        CL_ABAP_CHAR_UTILITIES=&gt;NEWLINE
        into sourceString.
    endloop.
  endif.

* remove extra newline characters for conversion comparison consistency
  shift sourceString left deleting leading
    CL_ABAP_CHAR_UTILITIES=&gt;NEWLINE.
  shift sourceString right deleting trailing
    CL_ABAP_CHAR_UTILITIES=&gt;NEWLINE.
  shift sourceString left deleting leading space.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_TOOLS" CMPNAME="BUILDTABLEFROMSTRING" VERSION="1" LANGU="D" DESCRIPT="Build a table" EXPOSURE="1" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="BUILDTABLEFROMSTRING" SCONAME="SOURCE" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="BUILDTABLEFROMSTRING" SCONAME="SOURCETABLE" VERSION="1" LANGU="D" DESCRIPT="Table of Strings" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TABLE_OF_STRINGS"/>
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method BUILDTABLEFROMSTRING .
  split source at CL_ABAP_CHAR_UTILITIES=&gt;NEWLINE
    into table sourceTable.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_TOOLS" CMPNAME="EXPORT_SELOPS" VERSION="1" LANGU="D" DESCRIPT="Export filters from program generated by GET_FILTERED_TABLE" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="EXPORT_SELOPS" SCONAME="IV_REPID" VERSION="1" LANGU="D" DESCRIPT="Nome do programa chamador" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="SY-REPID"/>
   <source>METHOD EXPORT_SELOPS.

  DATA: lt_scr_info  TYPE STANDARD TABLE OF scr_info,
        lt_processed TYPE STANDARD TABLE OF string,
        lo_regex     TYPE REF TO cl_abap_regex,
        lo_matcher   TYPE REF TO cl_abap_matcher,
        lv_str       TYPE string,
        lv_str2      TYPE string,
        lt_selops    TYPE STANDARD TABLE OF dd03p-fieldname,
        lv_mem_id    TYPE c LENGTH 60,
        lv_noexp     TYPE abap_bool,
        lv_noshow    TYPE abap_bool,
        lv_notab     TYPE abap_bool.

  FIELD-SYMBOLS: &lt;fs_scr_info&gt; LIKE LINE OF lt_scr_info,
                 &lt;fs_t_selop&gt;  TYPE STANDARD TABLE,
                 &lt;fs_param&gt;    TYPE any,
                 &lt;fs_selops&gt;   LIKE LINE OF lt_selops.

* Get information about selection screen SELECT-OPTIONS
  CALL FUNCTION &apos;RS_SELSCREEN_INFO&apos;
    EXPORTING
      report              = iv_repid
    TABLES
      field_info          = lt_scr_info
    EXCEPTIONS
      no_selections       = 1
      report_not_existent = 2
      subroutine_pool     = 3
      OTHERS              = 4.

  CHECK sy-subrc = 0.

* Leave SELECT-OPTIONS for table fields only
  DELETE lt_scr_info WHERE kind    =  &apos;S&apos; AND
                           dbfield IS INITIAL.

* Create a REGEX object for SELECT-OPTIONS name pattern matching
  CREATE OBJECT lo_regex
    EXPORTING
      pattern = `^SO_\d\d\d\d\d-(LOW)|(HIGH)$`.

* Get all SELECT-OPTIONS filled by the user
  LOOP AT lt_scr_info ASSIGNING &lt;fs_scr_info&gt;.

    IF &lt;fs_scr_info&gt;-kind = &apos;S&apos;.

* Check if SELECT-OPTIONS is relevant
      lo_matcher = lo_regex-&gt;create_matcher( text = &lt;fs_scr_info&gt;-name ).
      CHECK lo_matcher-&gt;match( ) = abap_true.

* Get the name of SELECT-OPTIONS
      SPLIT &lt;fs_scr_info&gt;-name AT &apos;-&apos; INTO lv_str lv_str2.

* Check that we have not processed this SELECT-OPTIONS yet
      READ TABLE lt_processed TRANSPORTING NO FIELDS WITH KEY table_line = lv_str.
      CHECK sy-subrc &lt;&gt; 0.
      APPEND lv_str TO lt_processed.

* Get contents of SELECT-OPTIONS
      CONCATENATE `(` iv_repid &apos;)&apos; lv_str `[]` INTO lv_str.
      ASSIGN (lv_str) TO &lt;fs_t_selop&gt;.
      CHECK sy-subrc = 0 AND &lt;fs_t_selop&gt;[] IS NOT INITIAL.

* One more non-empty SELECT-OPTIONS
      APPEND INITIAL LINE TO lt_selops ASSIGNING &lt;fs_selops&gt;.
      SPLIT &lt;fs_scr_info&gt;-dbfield AT &apos;-&apos; INTO lv_str &lt;fs_selops&gt;.

* Export SELECT-OPTIONS to be used as a filter
      CONCATENATE c_mem_id_selop &lt;fs_selops&gt; INTO lv_mem_id.
      EXPORT selop FROM &lt;fs_t_selop&gt;[] TO MEMORY ID lv_mem_id.

    ELSEIF &lt;fs_scr_info&gt;-kind = &apos;P&apos;.

      CONCATENATE `(` iv_repid &apos;)&apos; &lt;fs_scr_info&gt;-name INTO lv_str.
      ASSIGN (lv_str) TO &lt;fs_param&gt;.
      CHECK sy-subrc = 0.

      IF &lt;fs_scr_info&gt;-name = &apos;P_NOEXP&apos;.
        lv_noexp = &lt;fs_param&gt;.
      ELSEIF &lt;fs_scr_info&gt;-name = &apos;P_NOSHOW&apos;.
        lv_noshow = &lt;fs_param&gt;.
      ELSEIF &lt;fs_scr_info&gt;-name = &apos;P_NOTAB&apos;.
        lv_notab = &lt;fs_param&gt;.
      ENDIF.

    ENDIF.

  ENDLOOP.

* Export the list of field names to build the SELECT-OPTIONS LOW and HIGH fields
  EXPORT noexp  FROM lv_noexp
         noshow FROM lv_noshow
         notab  FROM lv_notab
         selops FROM lt_selops[] TO MEMORY ID c_mem_id_selops.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_TOOLS" CMPNAME="FORGET_REQUEST_NUMBER" VERSION="1" LANGU="D" DESCRIPT="Force request number to be asked again" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD FORGET_REQUEST_NUMBER.

  DELETE FROM MEMORY ID &apos;ZSAPLINK_TRKORR&apos;.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_TOOLS" CMPNAME="GETSTRUCTUREFROMATTRIBUTES" VERSION="1" LANGU="D" DESCRIPT="Updates a structure with node attributes" EXPOSURE="1" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="GETSTRUCTUREFROMATTRIBUTES" SCONAME="NODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="GETSTRUCTUREFROMATTRIBUTES" SCONAME="STRUCTURE" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method GETSTRUCTUREFROMATTRIBUTES .
data attributeList type ref to IF_IXML_NAMED_NODE_MAP.
data nodeIterator type ref to IF_IXML_NODE_ITERATOR.
data attributeNode type ref to if_ixml_node.
data value type string.
data name type string.
field-symbols &lt;value&gt; type any.

  clear structure.
  attributeList = node-&gt;GET_ATTRIBUTES( ).
  nodeIterator = attributeList-&gt;create_iterator( ).
  attributeNode = nodeIterator-&gt;get_next( ).
  while attributeNode is not initial.
    name = attributeNode-&gt;get_name( ).
    if name = &apos;VERSION&apos;.
      value = &apos;0&apos;.
    else.
      value = attributeNode-&gt;get_value( ).
    endif.
    assign component name of structure structure to &lt;value&gt;.
    if sy-subrc = 0.
      &lt;value&gt; = value.
    endif.
    attributeNode = nodeIterator-&gt;get_next( ).
  endwhile.

endmethod.





*    .-&quot;-.
*  .&apos;=^=^=&apos;.
* /=^=^=^=^=\
*:^=SAPLINK=^;
*|^ EASTER  ^|
*:^=^EGG^=^=^:
* \=^=^=^=^=/
*  `.=^=^=.&apos;
*    `~~~`
* Don&apos;t like the way we did something?
* Help us fix it!  Tell us what you think!
* http://saplink.sourceforge.net</source>
  </method>
  <method CLSNAME="ZSAPLINK_TOOLS" CMPNAME="GET_FILTERED_TABLE" VERSION="1" LANGU="D" DESCRIPT="Return table contents after applying filters" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="GET_FILTERED_TABLE" SCONAME="IV_CDAT" VERSION="1" LANGU="D" DESCRIPT="CDAT name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="DDOBJNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="GET_FILTERED_TABLE" SCONAME="IV_VDAT_TDAT" VERSION="1" LANGU="D" DESCRIPT="VDAT/TDAT name" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="DDOBJNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="GET_FILTERED_TABLE" SCONAME="IV_IS_TDAT" VERSION="1" LANGU="D" DESCRIPT='&quot;X&quot; if IV_VDAT_TDAT is a TDAT, space otherwise' CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="XFELD" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="GET_FILTERED_TABLE" SCONAME="IV_TABNAME" VERSION="1" LANGU="D" DESCRIPT="Table name" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="DDOBJNAME"/>
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="GET_FILTERED_TABLE" SCONAME="ET_RESULTS" VERSION="1" LANGU="D" DESCRIPT="Result table" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="STANDARD TABLE"/>
   <exception CLSNAME="ZSAPLINK_TOOLS" CMPNAME="GET_FILTERED_TABLE" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD get_filtered_table.

  DATA: lr_t_selop         TYPE REF TO data,
        lv_str             TYPE string,
        lv_str2            TYPE string,
        lt_selops          TYPE STANDARD TABLE OF dd03p-fieldname,
        lv_mem_id          TYPE c LENGTH 60,
        lv_noexp           TYPE abap_bool,
        lv_noshow          TYPE abap_bool,
        lv_notab           TYPE abap_bool,
        ls_dd02v           TYPE dd02v,
        lt_dd03p           TYPE STANDARD TABLE OF dd03p,
        lt_prog            TYPE STANDARD TABLE OF text255,
        lt_prog2           TYPE STANDARD TABLE OF text255,
        lv_num_keyfields   TYPE i,
        lv_num_lines       TYPE i,
        lv_tabix           TYPE n LENGTH 5,
        lv_idx             TYPE c LENGTH 6,
        lv_progname        TYPE programm,
        lv_transfer_filter TYPE abap_bool,
        lv_skipped         TYPE abap_bool,
        lt_textpool        TYPE table_of_textpool,
        lt_fields          TYPE cl_abap_structdescr=&gt;component_table,
        lt_fields_base     TYPE cl_abap_structdescr=&gt;component_table,
        lo_low_high        TYPE REF TO cl_abap_elemdescr,
        lo_selop_wa        TYPE REF TO cl_abap_structdescr,
        lo_selop           TYPE REF TO cl_abap_tabledescr.

  FIELD-SYMBOLS: &lt;fs_dd03p&gt;    LIKE LINE OF lt_dd03p,
                 &lt;fs_textpool&gt; LIKE LINE OF lt_textpool,
                 &lt;fs_selops&gt;   LIKE LINE OF lt_selops,
                 &lt;fs_fields&gt;   LIKE LINE OF lt_fields,
                 &lt;fs_t_selop&gt;  TYPE STANDARD TABLE.

* Initialize return parameter
  REFRESH et_results.

* Check if user still wants tables contents to be exported
  CHECK gv_behavior &lt;&gt; c_behavior_dont.

* Get information about table fields
  REFRESH lt_dd03p.
  CALL FUNCTION &apos;DDIF_TABL_GET&apos;
    EXPORTING
      name          = iv_tabname
      langu         = sy-langu
    IMPORTING
      dd02v_wa      = ls_dd02v
    TABLES
      dd03p_tab     = lt_dd03p
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc &lt;&gt; 0 OR
     ls_dd02v IS INITIAL OR
     lt_dd03p[] IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = `Table does not exist in the active state`.
  ENDIF.

* Get all table records and exit if user wants contents of all tables to be exported
  IF gv_behavior = c_behavior_export.
    SELECT *
      INTO TABLE et_results
      FROM (iv_tabname).
    EXIT.
  ENDIF.

* Check if database table contains at least one record
  SELECT *
    UP TO 1 ROWS
    INTO TABLE et_results
    FROM (iv_tabname).
  CHECK sy-subrc = 0.

* Initialize return parameter again
  REFRESH et_results.

* Remove all pseudo fields, such as .INCLUDEs and .APPENDs
  DELETE lt_dd03p WHERE fieldname(1) = &apos;.&apos;.

* Count number of key fields
  LOOP AT lt_dd03p TRANSPORTING NO FIELDS WHERE keyflag = abap_true.
    ADD 1 TO lv_num_keyfields.
  ENDLOOP.

* Build popup window title (program name)
  APPEND INITIAL LINE TO lt_textpool ASSIGNING &lt;fs_textpool&gt;.
  &lt;fs_textpool&gt;-id    = &apos;R&apos;.
  &lt;fs_textpool&gt;-entry = `Choose filter for table`.

* Build name for parameter P_CDAT
  APPEND INITIAL LINE TO lt_textpool ASSIGNING &lt;fs_textpool&gt;.
  &lt;fs_textpool&gt;-id     = &apos;S&apos;.
  &lt;fs_textpool&gt;-key    = &apos;P_CDAT&apos;.
  &lt;fs_textpool&gt;-entry  = &apos;        CDAT object&apos;.

* Build name for parameter P_XDAT
  APPEND INITIAL LINE TO lt_textpool ASSIGNING &lt;fs_textpool&gt;.
  &lt;fs_textpool&gt;-id     = &apos;S&apos;.
  &lt;fs_textpool&gt;-key    = &apos;P_XDAT&apos;.
  IF iv_is_tdat = abap_true.
    &lt;fs_textpool&gt;-entry  = &apos;        TDAT object&apos;.
  ELSE.
    &lt;fs_textpool&gt;-entry  = &apos;        VDAT object&apos;.
  ENDIF.

* Build name for parameter P_TABU
  APPEND INITIAL LINE TO lt_textpool ASSIGNING &lt;fs_textpool&gt;.
  &lt;fs_textpool&gt;-id    = &apos;I&apos;.
  &lt;fs_textpool&gt;-key   = &apos;001&apos;.
  &lt;fs_textpool&gt;-entry = &apos;Table name&apos;.

* Build name for parameter P_NAME
  APPEND INITIAL LINE TO lt_textpool ASSIGNING &lt;fs_textpool&gt;.
  &lt;fs_textpool&gt;-id    = &apos;I&apos;.
  &lt;fs_textpool&gt;-key   = &apos;002&apos;.
  &lt;fs_textpool&gt;-entry = ls_dd02v-ddtext.

* Build name for parameter P_NOEXP
  APPEND INITIAL LINE TO lt_textpool ASSIGNING &lt;fs_textpool&gt;.
  &lt;fs_textpool&gt;-id    = &apos;I&apos;.
  &lt;fs_textpool&gt;-key   = &apos;003&apos;.
  &lt;fs_textpool&gt;-entry = &apos;Don&apos;&apos;t export any data from this table&apos;.

* Build name for parameter P_NOSHOW
  APPEND INITIAL LINE TO lt_textpool ASSIGNING &lt;fs_textpool&gt;.
  &lt;fs_textpool&gt;-id    = &apos;I&apos;.
  &lt;fs_textpool&gt;-key   = &apos;004&apos;.
  &lt;fs_textpool&gt;-entry = &apos;Don&apos;&apos;t show this filter screen anymore&apos;.

* Build name for parameter P_YESTAB
  APPEND INITIAL LINE TO lt_textpool ASSIGNING &lt;fs_textpool&gt;.
  &lt;fs_textpool&gt;-id    = &apos;I&apos;.
  &lt;fs_textpool&gt;-key   = &apos;005&apos;.
  &lt;fs_textpool&gt;-entry = &apos;and export all records from all remaining tables&apos;.

* Build name for parameter P_NOTAB
  APPEND INITIAL LINE TO lt_textpool ASSIGNING &lt;fs_textpool&gt;.
  &lt;fs_textpool&gt;-id    = &apos;I&apos;.
  &lt;fs_textpool&gt;-key   = &apos;006&apos;.
  &lt;fs_textpool&gt;-entry = &apos;and ignore all remaining tables altogether&apos;.

* Build block B02 frame title
  APPEND INITIAL LINE TO lt_textpool ASSIGNING &lt;fs_textpool&gt;.
  &lt;fs_textpool&gt;-id    = &apos;I&apos;.
  &lt;fs_textpool&gt;-key   = &apos;B02&apos;.
  &lt;fs_textpool&gt;-entry = &apos;Object hierarchy&apos;.

* Build block B03 frame title
  APPEND INITIAL LINE TO lt_textpool ASSIGNING &lt;fs_textpool&gt;.
  &lt;fs_textpool&gt;-id    = &apos;I&apos;.
  &lt;fs_textpool&gt;-key   = &apos;B03&apos;.
  &lt;fs_textpool&gt;-entry = &apos;General selections&apos;.

* Build block B04 frame title
  APPEND INITIAL LINE TO lt_textpool ASSIGNING &lt;fs_textpool&gt;.
  &lt;fs_textpool&gt;-id    = &apos;I&apos;.
  &lt;fs_textpool&gt;-key   = &apos;B04&apos;.
  &lt;fs_textpool&gt;-entry = &apos;Filters&apos;.

* Generate a ramdom name for program
  lv_str = zsaplink_tools=&gt;get_random_string( number_chars = 29 generate_lowercase = abap_false ).
  CONCATENATE `Y` lv_str INTO lv_progname.

* Build the filter program
  CONCATENATE `REPORT` lv_progname `.` INTO lv_str SEPARATED BY space.
  APPEND lv_str TO lt_prog.
  APPEND `TYPE-POOLS: abap, icon.` TO lt_prog.
  APPEND `TABLES sscrfields.` TO lt_prog.
  CONCATENATE `TABLES` iv_tabname `.` INTO lv_str SEPARATED BY space.
  APPEND lv_str TO lt_prog.
  APPEND `SELECTION-SCREEN BEGIN OF SCREEN 2000 AS WINDOW.` TO lt_prog.
  APPEND `SELECTION-SCREEN FUNCTION KEY 2.` TO lt_prog.
  APPEND `SELECTION-SCREEN BEGIN OF BLOCK b01.` TO lt_prog.
  APPEND `SELECTION-SCREEN BEGIN OF BLOCK b02 WITH FRAME TITLE text-b02.` TO lt_prog.
  CONCATENATE `&apos;` iv_cdat `&apos;` INTO lv_str.
  CONCATENATE `  PARAMETER p_cdat TYPE DDOBJNAME DEFAULT` lv_str `MODIF ID pcd.` INTO lv_str
    SEPARATED BY space.
  APPEND lv_str TO lt_prog.
  CONCATENATE `&apos;` iv_vdat_tdat `&apos;` INTO lv_str.
  CONCATENATE `  PARAMETER p_xdat TYPE DDOBJNAME DEFAULT` lv_str `MODIF ID pxd.` INTO lv_str
    SEPARATED BY space.
  APPEND lv_str TO lt_prog.
  APPEND `SELECTION-SCREEN BEGIN OF LINE.` TO lt_prog.
  APPEND `SELECTION-SCREEN COMMENT (31) text-001 FOR FIELD p_tabu.` TO lt_prog.
  CONCATENATE `&apos;` iv_tabname `&apos;` INTO lv_str.
  CONCATENATE `  PARAMETER p_tabu TYPE DDOBJNAME DEFAULT` lv_str `MODIF ID pta.` INTO lv_str
    SEPARATED BY space.
  APPEND lv_str TO lt_prog.
  APPEND `SELECTION-SCREEN COMMENT (60) text-002.` TO lt_prog.
  APPEND `SELECTION-SCREEN END OF LINE.` TO lt_prog.
  APPEND `SELECTION-SCREEN END OF BLOCK b02.` TO lt_prog.
  APPEND `SELECTION-SCREEN BEGIN OF BLOCK b03 WITH FRAME TITLE text-b03.` TO lt_prog.
  APPEND `SELECTION-SCREEN BEGIN OF LINE.` TO lt_prog.
  APPEND `  PARAMETER p_noexp AS CHECKBOX USER-COMMAND noexp.` TO lt_prog.
  APPEND `SELECTION-SCREEN COMMENT (50) text-003 FOR FIELD p_noexp.` TO lt_prog.
  APPEND `SELECTION-SCREEN END OF LINE.` TO lt_prog.
  APPEND `SELECTION-SCREEN BEGIN OF LINE.` TO lt_prog.
  APPEND `  PARAMETER p_noshow AS CHECKBOX USER-COMMAND noshow.` TO lt_prog.
  APPEND `SELECTION-SCREEN COMMENT (50) text-004 FOR FIELD p_noshow.` TO lt_prog.
  APPEND `SELECTION-SCREEN END OF LINE.` TO lt_prog.
  APPEND `SELECTION-SCREEN BEGIN OF LINE.` TO lt_prog.
  APPEND `SELECTION-SCREEN POSITION 3.` TO lt_prog.
  APPEND `  PARAMETER p_yestab RADIOBUTTON GROUP g01 DEFAULT &apos;X&apos; MODIF ID sho.` TO lt_prog.
  APPEND `SELECTION-SCREEN COMMENT (50) text-005 FOR FIELD p_yestab MODIF ID sho.` TO lt_prog.
  APPEND `SELECTION-SCREEN END OF LINE.` TO lt_prog.
  APPEND `SELECTION-SCREEN BEGIN OF LINE.` TO lt_prog.
  APPEND `SELECTION-SCREEN POSITION 3.` TO lt_prog.
  APPEND `  PARAMETER p_notab  RADIOBUTTON GROUP g01 MODIF ID sho.` TO lt_prog.
  APPEND `SELECTION-SCREEN COMMENT (50) text-006 FOR FIELD p_notab MODIF ID sho.` TO lt_prog.
  APPEND `SELECTION-SCREEN END OF LINE.` TO lt_prog.
  APPEND `SELECTION-SCREEN END OF BLOCK b03.` TO lt_prog.
  APPEND `SELECTION-SCREEN BEGIN OF BLOCK b04 WITH FRAME TITLE text-b04.` TO lt_prog.

* Number of fixed lines for the popup window
  lv_idx = 1.
  lv_num_lines = 12.
  lv_skipped = abap_false.
  LOOP AT lt_dd03p ASSIGNING &lt;fs_dd03p&gt;.

    lv_tabix = sy-tabix.

    lv_transfer_filter = abap_true.

* For client-dependt tables, the client fields is not shown as a filter
    AT FIRST.
      IF &lt;fs_dd03p&gt;-keyflag = abap_true.
        IF &lt;fs_dd03p&gt;-datatype = &apos;CLNT&apos;.
          IF lv_num_keyfields &lt;&gt; 1.
            CONTINUE.
          ELSE.
            lv_transfer_filter = abap_false.
          ENDIF.
        ENDIF.
      ELSE.
        lv_skipped = abap_true.
      ENDIF.
    ENDAT.

* Put one blank line separating key fields from non key fileds
    IF &lt;fs_dd03p&gt;-keyflag = abap_false AND
       lv_skipped = abap_false.
      APPEND `  SELECTION-SCREEN SKIP 1.` TO lt_prog.
      lv_skipped = abap_true.
      ADD 1 TO lv_num_lines.
    ENDIF.

* Build name of each select-options
    CONCATENATE `SO_` lv_tabix INTO lv_str.

* Skip undesired data types
    CHECK &lt;fs_dd03p&gt;-datatype &lt;&gt; &apos;LCHR&apos; AND
          &lt;fs_dd03p&gt;-datatype &lt;&gt; &apos;LRAW&apos;.

* Build code to transfer each filter to the SELECTION-SCREEN of transaction SE16
    IF lv_transfer_filter = abap_true.
      CONCATENATE `    LOOP AT` lv_str `.` INTO lv_str2 SEPARATED BY space.
      APPEND lv_str2 TO lt_prog2.
      APPEND `      APPEND INITIAL LINE TO gt_seltab ASSIGNING &lt;fs_seltab&gt;.` TO lt_prog2.
      CONCATENATE `&apos;I` lv_idx `&apos;` INTO lv_str2.
      CONDENSE lv_str2 NO-GAPS.
      CONCATENATE `      &lt;fs_seltab&gt;-selname =` lv_str2 `.` INTO lv_str2 SEPARATED BY space.
      APPEND lv_str2 TO lt_prog2.
      APPEND `      &lt;fs_seltab&gt;-kind    = &apos;S&apos;.` TO lt_prog2.
      CONCATENATE lv_str `-sign` INTO lv_str2.
      CONCATENATE `      &lt;fs_seltab&gt;-sign    =` lv_str2 `.` INTO lv_str2 SEPARATED BY space.
      APPEND lv_str2 TO lt_prog2.
      CONCATENATE lv_str `-option` INTO lv_str2.
      CONCATENATE `      &lt;fs_seltab&gt;-option  =` lv_str2 `.` INTO lv_str2 SEPARATED BY space.
      APPEND lv_str2 TO lt_prog2.
      CONCATENATE lv_str `-low` INTO lv_str2.
      CONCATENATE `      &lt;fs_seltab&gt;-low     =` lv_str2 `.` INTO lv_str2 SEPARATED BY space.
      APPEND lv_str2 TO lt_prog2.
      CONCATENATE lv_str `-high` INTO lv_str2.
      CONCATENATE `      &lt;fs_seltab&gt;-high    =` lv_str2 `.` INTO lv_str2 SEPARATED BY space.
      APPEND lv_str2 TO lt_prog2.
      APPEND `    ENDLOOP.` TO lt_prog2.
      APPEND `    IF sy-subrc = 0.` TO lt_prog2.
      CONCATENATE `      READ TABLE` lv_str `INDEX 1.` INTO lv_str2 SEPARATED BY space.
      APPEND lv_str2 TO lt_prog2.
      APPEND `    ENDIF.` TO lt_prog2.
      ADD 1 TO lv_idx.
    ENDIF.

    APPEND INITIAL LINE TO lt_textpool ASSIGNING &lt;fs_textpool&gt;.
    &lt;fs_textpool&gt;-id    = &apos;S&apos;.
    &lt;fs_textpool&gt;-key   = lv_str.
    &lt;fs_textpool&gt;-entry = &apos;D&apos;.

    CONCATENATE  iv_tabname `-` &lt;fs_dd03p&gt;-fieldname INTO lv_str2.

    CONCATENATE `  SELECT-OPTIONS` lv_str `FOR` lv_str2 `MODIF ID b04.` INTO lv_str
      SEPARATED BY space.
    APPEND lv_str TO lt_prog.

    ADD 1 TO lv_num_lines.

  ENDLOOP.

  APPEND `SELECTION-SCREEN END OF BLOCK b04.` TO lt_prog.
  APPEND `SELECTION-SCREEN END OF BLOCK b01.` TO lt_prog.
  APPEND `SELECTION-SCREEN END OF SCREEN 2000.` TO lt_prog.
  APPEND `DATA: gv_button TYPE smp_dyntxt,` TO lt_prog.
  APPEND `      gt_seltab TYPE STANDARD TABLE OF rsparams.` TO lt_prog.
  APPEND `FIELD-SYMBOLS: &lt;fs_seltab&gt; LIKE LINE OF gt_seltab.` TO lt_prog.
  APPEND `INITIALIZATION.` TO lt_prog.

* Maximum line number
  IF lv_num_lines &gt; 24.
    lv_num_lines = 24.
  ENDIF.

  lv_str = lv_num_lines.
  CONCATENATE `  CALL SELECTION-SCREEN &apos;2000&apos; STARTING AT 15 1 ENDING AT 132` lv_str `.`
    INTO lv_str SEPARATED BY space.
  APPEND lv_str TO lt_prog.

  APPEND `  IF sy-subrc = 0.` TO lt_prog.
  APPEND &apos;    zsaplink_tools=&gt;export_selops( sy-repid ).&apos; TO lt_prog.
  APPEND `  ENDIF.` TO lt_prog.

  APPEND `AT SELECTION-SCREEN OUTPUT.` TO lt_prog.
  APPEND `  CHECK sy-dynnr = &apos;2000&apos;.` TO lt_prog.
  APPEND `  CLEAR gv_button.` TO lt_prog.
  APPEND `  IF p_noexp = abap_false.` TO lt_prog.
  APPEND `    gv_button-text      = &apos;SE16&apos;.` TO lt_prog.
  APPEND `    gv_button-icon_id   = icon_inspection_method.` TO lt_prog.
  APPEND `    gv_button-icon_text = &apos;Browse table&apos;.` TO lt_prog.
  APPEND `    gv_button-quickinfo = &apos;Browse table via transaction SE16 using specified filters&apos;.` TO lt_prog.
  APPEND `  ENDIF.` TO lt_prog.
  APPEND `  sscrfields-functxt_02 = gv_button.` TO lt_prog.
  APPEND `  LOOP AT SCREEN.` TO lt_prog.
  APPEND `    CASE screen-group1.` TO lt_prog.
  APPEND `      WHEN &apos;B04&apos;.` TO lt_prog.
  APPEND `        IF p_noexp = abap_true.` TO lt_prog.
  APPEND `          screen-active = &apos;0&apos;.` TO lt_prog.
  APPEND `        ELSE.` TO lt_prog.
  APPEND `          screen-active = &apos;1&apos;.` TO lt_prog.
  APPEND `        ENDIF.` TO lt_prog.
  APPEND `        MODIFY SCREEN.` TO lt_prog.
  APPEND `      WHEN &apos;PCD&apos;.` TO lt_prog.
  APPEND `        screen-input = &apos;0&apos;.` TO lt_prog.
  APPEND `        IF p_cdat IS INITIAL.` TO lt_prog.
  APPEND `          screen-active = &apos;0&apos;.` TO lt_prog.
  APPEND `        ELSE.` TO lt_prog.
  APPEND `          screen-active = &apos;1&apos;.` TO lt_prog.
  APPEND `        ENDIF.` TO lt_prog.
  APPEND `        MODIFY SCREEN.` TO lt_prog.
  APPEND `      WHEN &apos;PXD&apos;.` TO lt_prog.
  APPEND `        screen-input = &apos;0&apos;.` TO lt_prog.
  APPEND `        IF p_xdat IS INITIAL.` TO lt_prog.
  APPEND `          screen-active = &apos;0&apos;.` TO lt_prog.
  APPEND `        ELSE.` TO lt_prog.
  APPEND `          screen-active = &apos;1&apos;.` TO lt_prog.
  APPEND `        ENDIF.` TO lt_prog.
  APPEND `        MODIFY SCREEN.` TO lt_prog.
  APPEND `      WHEN &apos;PTA&apos;.` TO lt_prog.
  APPEND `        screen-input = &apos;0&apos;.` TO lt_prog.
  APPEND `        MODIFY SCREEN.` TO lt_prog.
  APPEND `      WHEN &apos;SHO&apos;.` TO lt_prog.
  APPEND `        IF p_noshow IS INITIAL.` TO lt_prog.
  APPEND `          screen-input = &apos;0&apos;.` TO lt_prog.
  APPEND `        ELSE.` TO lt_prog.
  APPEND `          screen-input = &apos;1&apos;.` TO lt_prog.
  APPEND `        ENDIF.` TO lt_prog.
  APPEND `        MODIFY SCREEN.` TO lt_prog.
  APPEND `    ENDCASE.` TO lt_prog.
  APPEND `  ENDLOOP.` TO lt_prog.
  APPEND `AT SELECTION-SCREEN.` TO lt_prog.
  APPEND `  CHECK sy-dynnr = &apos;2000&apos;.` TO lt_prog.
  APPEND `  IF sscrfields-ucomm = &apos;FC02&apos;.` TO lt_prog.
  APPEND `    REFRESH gt_seltab.` TO lt_prog.
  APPEND LINES OF lt_prog2 TO lt_prog.
  APPEND `    IF gt_seltab[] IS INITIAL.` TO lt_prog.
  APPEND `      APPEND INITIAL LINE TO gt_seltab ASSIGNING &lt;fs_seltab&gt;.` TO lt_prog.
  APPEND `      &lt;fs_seltab&gt;-selname = &apos;I1&apos;.` TO lt_prog.
  APPEND `      &lt;fs_seltab&gt;-kind    = &apos;S&apos;.` TO lt_prog.
  APPEND `      &lt;fs_seltab&gt;-sign    = &apos;I&apos;.` TO lt_prog.
  APPEND `      &lt;fs_seltab&gt;-option  = &apos;CP&apos;.` TO lt_prog.
  APPEND `      &lt;fs_seltab&gt;-low     = &apos;*&apos;.` TO lt_prog.
  APPEND `    ENDIF.` TO lt_prog.
  APPEND `    CALL FUNCTION &apos;RS_TABLE_LIST_CREATE&apos;` TO lt_prog.
  APPEND `      EXPORTING` TO lt_prog.
  CONCATENATE `&apos;` iv_tabname `&apos;` INTO lv_str.
  CONCATENATE `        TABLE_NAME =` lv_str INTO lv_str SEPARATED BY space.
  APPEND lv_str TO lt_prog.
  APPEND `      TABLES` TO lt_prog.
  APPEND `        SELTAB = gt_seltab.` TO lt_prog.
  APPEND `  ENDIF.` TO lt_prog.

* Create temporary program in database
  INSERT REPORT lv_progname
    FROM lt_prog
    PROGRAM TYPE &apos;1&apos;
    UNICODE ENABLING abap_true.
  CHECK sy-subrc = 0.

* Insert program text elements
  INSERT TEXTPOOL lv_progname
    FROM lt_textpool
    LANGUAGE sy-langu.

* Activate the dynamically generated program
  GENERATE REPORT lv_progname.

* Execute temporary program to ask user for the filters
  SUBMIT (lv_progname) AND RETURN.

* And delete the temporary program aftwards
  DELETE REPORT lv_progname.

* Get filter names
  CLEAR: lv_noexp, lv_noshow, lv_notab.
  REFRESH lt_selops.
  IMPORT noexp  TO lv_noexp
         noshow TO lv_noshow
         notab  TO lv_notab
         selops TO lt_selops[] FROM MEMORY ID c_mem_id_selops.
  CHECK sy-subrc = 0.

* Delete imported buffer
  DELETE FROM MEMORY ID c_mem_id_selops.

* Save user choice about seeing this filter dialog for next tables
  IF lv_noshow = abap_true.
    IF lv_notab = abap_false.
      gv_behavior = c_behavior_export.
    ELSE.
      gv_behavior = c_behavior_dont.
    ENDIF.
  ENDIF.

* Check if user wants to export the contents of this table
  CHECK lv_noexp = abap_false.

* Get all table records
  SELECT *
    INTO TABLE et_results
    FROM (iv_tabname).

* Check if user informed any filters
  CHECK lt_selops[] IS NOT INITIAL.

* Build the SIGN field of the RANGE
  APPEND INITIAL LINE TO lt_fields_base ASSIGNING &lt;fs_fields&gt;.
  &lt;fs_fields&gt;-name = &apos;SIGN&apos;.
  &lt;fs_fields&gt;-type = cl_abap_elemdescr=&gt;get_c( 1 ).

* Build the OPTION field of the RANGE
  APPEND INITIAL LINE TO lt_fields_base ASSIGNING &lt;fs_fields&gt;.
  &lt;fs_fields&gt;-name = &apos;OPTION&apos;.
  &lt;fs_fields&gt;-type = cl_abap_elemdescr=&gt;get_c( 2 ).

* Get all filters and do the filtering
  LOOP AT lt_selops ASSIGNING &lt;fs_selops&gt;.

* Get the SIGN and OPTION table field types of the RANGE
    lt_fields[] = lt_fields_base[].

* Name of the LOW/HIGH fields of the RANGE
    CONCATENATE iv_tabname `-` &lt;fs_selops&gt; INTO lv_str.

* Create the type for the LOW and HIGH fields of the RANGE
    lo_low_high ?= cl_abap_elemdescr=&gt;describe_by_name( lv_str ).

* Build the type for the LOW field of the RANGE
    APPEND INITIAL LINE TO lt_fields ASSIGNING &lt;fs_fields&gt;.
    &lt;fs_fields&gt;-name = &apos;LOW&apos;.
    &lt;fs_fields&gt;-type = lo_low_high.

* Build the type for the HIGH field of the RANGE
    APPEND INITIAL LINE TO lt_fields ASSIGNING &lt;fs_fields&gt;.
    &lt;fs_fields&gt;-name = &apos;HIGH&apos;.
    &lt;fs_fields&gt;-type = lo_low_high.

* Create a work area type for the RANGE table
    lo_selop_wa = cl_abap_structdescr=&gt;create( lt_fields ).

* Create the RANGE table type
    lo_selop = cl_abap_tabledescr=&gt;create( lo_selop_wa ).

* And finally create the RANGE table itself
    CREATE DATA lr_t_selop TYPE HANDLE lo_selop.
    ASSIGN lr_t_selop-&gt;* TO &lt;fs_t_selop&gt;.

* Import the filter to be used
    CONCATENATE c_mem_id_selop &lt;fs_selops&gt; INTO lv_mem_id.
    IMPORT selop TO &lt;fs_t_selop&gt; FROM MEMORY ID lv_mem_id.
    CHECK sy-subrc = 0.

* Delete imported buffer
    DELETE FROM MEMORY ID lv_mem_id.

* Delete all unwanted entries
    CONCATENATE &lt;fs_selops&gt; `NOT IN &lt;FS_T_SELOP&gt;`
      INTO lv_str SEPARATED BY space.
    DELETE et_results WHERE (lv_str).

  ENDLOOP.

* Get data from table
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_TOOLS" CMPNAME="GET_RANDOM_STRING" VERSION="1" LANGU="D" DESCRIPT="Return a string of random characters" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="GET_RANDOM_STRING" SCONAME="NUMBER_CHARS" VERSION="1" LANGU="D" DESCRIPT="String length" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="I"/>
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="GET_RANDOM_STRING" SCONAME="GENERATE_DIGITS" VERSION="1" LANGU="D" DESCRIPT="String to contain digits?" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="ABAP_TRUE"/>
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="GET_RANDOM_STRING" SCONAME="GENERATE_UPPERCASE" VERSION="1" LANGU="D" DESCRIPT="String to contain uppercase letters?" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="ABAP_TRUE"/>
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="GET_RANDOM_STRING" SCONAME="GENERATE_LOWERCASE" VERSION="1" LANGU="D" DESCRIPT="String to contain lowercase letters?" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="ABAP_TRUE"/>
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="GET_RANDOM_STRING" SCONAME="RANDOM_STRING" VERSION="1" LANGU="D" DESCRIPT="String returned" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method GET_RANDOM_STRING.

* ASCII codes
*0-9: 48-57
*A-Z: 65-90
*a-z: 97-122

  TYPE-POOLS: abap.

  DATA: lv_types   TYPE string,
        lv_seed    TYPE i,
        lo_rndtype TYPE REF TO cl_abap_random_int,
        lo_rndnumb TYPE REF TO cl_abap_random_int,
        lo_rnduppe TYPE REF TO cl_abap_random_int,
        lo_rndlowe TYPE REF TO cl_abap_random_int,
        lo_conv    TYPE REF TO cl_abap_conv_in_ce,
        lv_len     TYPE i,
        lv_type    TYPE i,
        lv_asc     TYPE x,
        lv_ascstr  TYPE xstring.

  CLEAR random_string.

* Random generator for digits
  IF generate_digits = abap_true.
    CONCATENATE lv_types &apos;1&apos; INTO lv_types.
    lv_seed = cl_abap_random=&gt;seed( ).
    lo_rndnumb = cl_abap_random_int=&gt;create( seed = lv_seed min = 48 max = 57 ).
  ENDIF.

* Random generator for uppercase letters
  IF generate_uppercase = abap_true.
    CONCATENATE lv_types &apos;2&apos; INTO lv_types.
    lv_seed = cl_abap_random=&gt;seed( ).
    lo_rnduppe = cl_abap_random_int=&gt;create( seed = lv_seed min = 65 max = 90 ).
  ENDIF.

* Random generator for lowercase letters
  IF generate_lowercase = abap_true.
    CONCATENATE lv_types &apos;3&apos; INTO lv_types.
    lv_seed = cl_abap_random=&gt;seed( ).
    lo_rndlowe = cl_abap_random_int=&gt;create( seed = lv_seed min = 97 max = 122 ).
  ENDIF.

  CHECK lv_types IS NOT INITIAL.

* Random generator for the specified character types (digit, uppercase or lowercase)
  lv_len = strlen( lv_types ) - 1.
  lv_seed = cl_abap_random=&gt;seed( ).
  lo_rndtype = cl_abap_random_int=&gt;create( seed = lv_seed min = 0 max = lv_len ).

  DO number_chars TIMES.
    lv_type = lo_rndtype-&gt;get_next( ).
    CASE lv_types+lv_type(1).
      WHEN &apos;1&apos;.
        lv_asc = lo_rndnumb-&gt;get_next( ).
      WHEN &apos;2&apos;.
        lv_asc = lo_rnduppe-&gt;get_next( ).
      WHEN &apos;3&apos;.
        lv_asc = lo_rndlowe-&gt;get_next( ).
    ENDCASE.
    CONCATENATE lv_ascstr lv_asc INTO lv_ascstr IN BYTE MODE.
  ENDDO.

  lo_conv = cl_abap_conv_in_ce=&gt;create( input = lv_ascstr ).
  lo_conv-&gt;read( IMPORTING data = random_string ).

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_TOOLS" CMPNAME="GLOBALCLASSTOLOCALCLASS" VERSION="1" LANGU="D" DESCRIPT="saplink XML of global class to local class definition" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="GLOBALCLASSTOLOCALCLASS" SCONAME="GLOBAL_CLASS_XML" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="GLOBALCLASSTOLOCALCLASS" SCONAME="LOCAL_CLASS_XML" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <source>method GLOBALCLASSTOLOCALCLASS .

  data XMLDOC	Type Ref To IF_IXML_DOCUMENT.
  data xmldocOut Type Ref To IF_IXML_DOCUMENT.
  data IXML type ref to IF_IXML.
  data OBJNAME Type STRING.
  data defnodeOut TYPE REF TO if_ixml_element.
  data impnodeOut TYPE REF TO if_ixml_element.
  data dependnodeOut TYPE REF TO if_ixml_element.
  data dependchildnodeOut TYPE REF TO if_ixml_element.
  DATA rootnodeOut TYPE REF TO if_ixml_element.
  DATA rc TYPE sysubrc.
  data strParent type string.
  data strTemp type string.

  data it_flatClass type table of string.
  data it_flatClassImp type table of string.
  data it_flatClassDef type table of string.
  data wa_flatclass type string.
  data it_attrib type table of vseoattrib.
  data it_types type table of SEOO_TYPE_R.
  data it_interfaces type table of SEOR_IMPLEMENTING_R.
  data it_methodprops type table of vseomethod.
  data it_params type table of vseoparam.
  data it_except type table of vseoexcep.

  DATA reportstring TYPE string.

  data useFL type C.
  data wa_flatClass_tmp type string.
  data off type int4.


  DATA rootnode TYPE REF TO if_ixml_element.
  DATA classheader TYPE vseoclass.
  DATA classkey TYPE seoclskey.
  DATA not_active TYPE boolean.
  DATA filter TYPE REF TO if_ixml_node_filter.
  DATA iterator TYPE REF TO if_ixml_node_iterator.
  DATA node TYPE REF TO if_ixml_element.
  DATA otrnode TYPE REF TO if_ixml_element.
  DATA filter2 TYPE REF TO if_ixml_node_filter.
  DATA iterator2 TYPE REF TO if_ixml_node_iterator.
  DATA attribproperties TYPE vseoattrib.
  DATA methodproperties TYPE vseomethod.
  DATA methodredefinition TYPE seoredef.
  DATA methodredeftable TYPE STANDARD TABLE OF seoredef WITH KEY clsname
  refclsname version mtdname.
  DATA superclass TYPE vseoextend.
  DATA superclasskey TYPE vseoextend.
  DATA includename TYPE program.
  DATA methodsourcenode TYPE REF TO if_ixml_node.
  DATA sourcenode TYPE REF TO if_ixml_node.
  DATA source TYPE string.
  DATA sourcetable TYPE TABLE OF string.
  DATA methodkey TYPE seocpdkey.
  DATA forwarddeclarationrow TYPE vseotypep.
  DATA forwarddeclarations TYPE STANDARD TABLE OF vseotypep.
  DATA node2 TYPE REF TO if_ixml_element.
  DATA paraminfo TYPE vseoparam.
  DATA exceptinfo TYPE vseoexcep.

  DATA _objtype TYPE string.
  DATA checkexists TYPE flag.

  data inheritanceNode type ref to if_ixml_element.
  data redefNode type ref to if_ixml_element.
  DATA inheritance TYPE SEOR_INHERITANCE_R.
  DATA redefinitions TYPE seor_redefinitions_r.
  data redefinition like line of redefinitions.

*  _devclass = devclass.
  _objtype = &apos;CLAS&apos;.

  xmldoc = global_class_xml.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = classheader.

  classkey-clsname = classheader-clsname.
  objname = classkey-clsname.

**//
  concatenate
    &apos;CLASS&apos; objname &apos;DEFINITION&apos;
  into wa_flatClass separated by space.
  append wa_flatClass to it_flatClass.
  clear wa_flatClass.

*is it inheriting?
* inheritance
  inheritanceNode = rootNode-&gt;find_from_name( &apos;inheritance&apos; ).
  if inheritanceNode is bound.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = inheritanceNode
      CHANGING
        structure = inheritance.
    IF inheritance is not initial.
      concatenate
        SPACE space
        &apos;INHERITING FROM&apos;
        inheritance-REFCLSNAME
      into wa_flatClass separated by space.
      append wa_flatClass to it_flatClass.
      clear wa_flatClass.
      strParent = inheritance-REFCLSNAME.
    endif.
*   redefs
*    filter = inheritanceNode-&gt;create_filter_name( &apos;redefinition&apos; ).
*    iterator = inheritanceNode-&gt;create_iterator_filtered( filter ).
*    redefNode ?= iterator-&gt;get_next( ).
*    WHILE redefNode IS NOT INITIAL.
*      CALL METHOD getstructurefromattributes
*        EXPORTING
*          node      = redefNode
*        CHANGING
*          structure = redefinition.
*      append redefinition to redefinitions.
*      redefNode ?= iterator-&gt;get_next( ).
*    ENDWHILE.

  endif.

*is it final?
  if classheader-CLSFINAL = &apos;X&apos;.
    concatenate
      SPACE space
      &apos;FINAL&apos;
    into wa_flatClass separated by space.
    append wa_flatClass to it_flatClass.
    clear wa_flatClass.
  endif.



  case classheader-EXPOSURE.
    when &apos;0&apos;.
*   private
      concatenate
        SPACE space
        &apos;CREATE PRIVATE&apos;
      into wa_flatClass separated by space.
      append wa_flatClass to it_flatClass.
      clear wa_flatClass.

    when &apos;1&apos;.
*   protected
      concatenate
        SPACE space
        &apos;CREATE PROTECTED&apos;
      into wa_flatClass separated by space.
      append wa_flatClass to it_flatClass.
      clear wa_flatClass.

    when &apos;2&apos;.
*   public
      concatenate
        SPACE space
        &apos;CREATE PUBLIC&apos;
      into wa_flatClass separated by space.
      append wa_flatClass to it_flatClass.
      clear wa_flatClass.

*    when &apos;3&apos;.
**   Abstract
*      concatenate
*        SPACE space
*        &apos;ABSTRACT&apos;
*      into wa_flatClass separated by space.
*      append wa_flatClass to it_flatClass.
*      clear wa_flatClass.

  endcase.

*is it abstract?
  if classheader-CLSABSTRCT = &apos;X&apos;.
    concatenate
      SPACE space
      &apos;ABSTRACT&apos;
    into wa_flatClass separated by space.
    append wa_flatClass to it_flatClass.
    clear wa_flatClass.
  endif.

* has friends?
  DATA: wa_friend type seofriends.

  filter = xmldoc-&gt;create_filter_name( &apos;friends&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  if node is not initial.
    concatenate
      SPACE space
      &apos;FRIENDS&apos;
    into wa_flatClass separated by space.
    append wa_flatClass to it_flatClass.
    clear wa_flatClass.
  endif.
  WHILE node IS NOT INITIAL.
    CLEAR wa_friend.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_friend.
    wa_friend-version = &apos;0&apos;.
    IF wa_friend-clsname = classheader-clsname.
      concatenate
        SPACE space space space
        wa_friend-REFCLSNAME
      into wa_flatClass separated by space.
      append wa_flatClass to it_flatClass.
      clear wa_flatClass.
    ENDIF.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.




  concatenate
    SPACE space
    &apos;.&apos;
  into wa_flatClass separated by space.
  append wa_flatClass to it_flatClass.
  clear wa_flatClass.

**\\

  classheader-version = &apos;0&apos;.
  superclass = rootnode-&gt;get_attribute( name = &apos;REFCLSNAME&apos; ).
  IF superclass IS NOT INITIAL.
* set something for inheritence
    superclasskey-clsname = classkey-clsname.
    superclasskey-refclsname = superclass.
    superclasskey-version = &apos;0&apos;.
    superclasskey-state = &apos;1&apos;.

  ENDIF.

  DATA aobjname TYPE trobj_name.


*Add attributes to new class
  filter = xmldoc-&gt;create_filter_name( &apos;attribute&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
*   create OTR texts if necessary (for exception classes)
    otrnode = node-&gt;find_from_name( &apos;sotr&apos; ).
    IF otrnode IS NOT INITIAL.
*      me-&gt;createotrfromnode( otrnode ).
    ENDIF.

*   create attribute
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = attribproperties.
    append attribproperties to it_attrib.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
*exit.

*/***TPJ - Added Logic for TYPES  -------------------*/
  DATA: types           TYPE seoo_types_r,
        type_properties LIKE LINE OF types.

  filter = xmldoc-&gt;create_filter_name( &apos;types&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR type_properties.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = type_properties.
    type_properties-version = &apos;0&apos;.
    IF type_properties-clsname = classheader-clsname.
      append type_properties to it_types.
    ENDIF.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
*/***TPJ - End of Added Logic for TYPES  -------------------*/



*// ewH: Added Logic for Implementings(interfaces)--&gt;
  DATA: it_implementings type seor_implementings_r,
        wa_implementings like line OF it_implementings.

  filter = xmldoc-&gt;create_filter_name( &apos;implementing&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR wa_implementings.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_implementings.
    append wa_implementings to it_interfaces.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
*//&lt;--ewH: End of Added Logic for Implementings(interfaces)



*Add Methods to new class
  filter = xmldoc-&gt;create_filter_name( &apos;method&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR methodproperties.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = methodproperties.

*   only create metadata if method is not a redefinition
    read table redefinitions into redefinition
    with key mtdname = methodProperties-cmpname.
    IF sy-subrc = 0.
      node ?= iterator-&gt;get_next( ).
      continue.
    endif.


    IF methodproperties-clsname &lt;&gt; classheader-clsname.
      MOVE-CORRESPONDING methodproperties TO methodredefinition.
      methodredefinition-clsname = classheader-clsname.
      methodredefinition-refclsname = methodproperties-clsname.
      methodredefinition-version = &apos;0&apos;.
      methodredefinition-mtdabstrct = &apos;&apos;.
      methodredefinition-mtdname = methodproperties-cmpname.
      APPEND methodredefinition TO methodredeftable.

      node ?= iterator-&gt;get_next( ).
      continue.
    endif.

    append methodproperties to it_methodprops.

    filter2 = node-&gt;create_filter_name( &apos;parameter&apos; ).
    iterator2 = node-&gt;create_iterator_filtered( filter2 ).
    node2 ?= iterator2-&gt;get_next( ).
    WHILE node2 IS NOT INITIAL.
      CLEAR paraminfo.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = node2
        CHANGING
          structure = paraminfo.
      if paraminfo is not initial.
        append paraminfo to it_params.
      endif.
      node2 ?= iterator2-&gt;get_next( ).
    ENDWHILE.
    filter2 = node-&gt;create_filter_name( &apos;exception&apos; ).
    iterator2 = node-&gt;create_iterator_filtered( filter2 ).
    node2 ?= iterator2-&gt;get_next( ).
    WHILE node2 IS NOT INITIAL.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = node2
        CHANGING
          structure = exceptinfo.
      if exceptinfo is not initial.
        append exceptinfo to it_except.
      endif.
      node2 ?= iterator2-&gt;get_next( ).

    ENDWHILE.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
*// &lt;--ewH: end redesign method/inheritances

*// ewh: continuation of backward compatibility hack--&gt;

  DATA classtype TYPE seoclstype.
  DATA impkeys TYPE seor_implementing_keys.
  DATA iserror TYPE boolean.

*create forward declarations

  filter = xmldoc-&gt;create_filter_name( &apos;forwardDeclaration&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  forwarddeclarationrow-clsname = classkey-clsname.
  forwarddeclarationrow-version = &apos;0&apos;.
  forwarddeclarationrow-tputype = &apos;&apos;.
  forwarddeclarationrow-explicit =  &apos;X&apos;.
  forwarddeclarationrow-implicit = &apos;&apos;.

  WHILE node IS NOT INITIAL.
    source = node-&gt;get_value( ).
    forwarddeclarationrow-typegroup = source.
    TYPE-POOLS seot.
    DATA forwarddectable TYPE seot_typepusages_w.
    DATA forwarddecrow LIKE LINE OF forwarddectable.
    CLEAR forwarddecrow.
    REFRESH forwarddectable.
    forwarddecrow-clsname = classkey-clsname.
    forwarddecrow-version = &apos;0&apos;.
    forwarddecrow-tputype = &apos;0&apos;.
    forwarddecrow-explicit =  &apos;X&apos;.
    forwarddecrow-implicit = &apos;&apos;.
    forwarddecrow-typegroup = source.
    APPEND forwarddecrow TO forwarddectable.

    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

**//
* public section
  wa_flatClass = &apos;public section.&apos;.
  append wa_flatClass to it_flatClass.
  clear wa_flatClass.

*insert code for public section
  sourcenode = xmldoc-&gt;find_from_name( &apos;publicSection&apos; ).
  IF sourcenode IS NOT INITIAL.
    source = sourcenode-&gt;get_value( ).
    sourcetable = buildtablefromstring( source ).

    clear useFL.
    loop at sourcetable into wa_flatClass.
      if useFL is initial.
        wa_flatClass_tmp = wa_flatClass.
        translate wa_flatClass_tmp to upper case.
        condense wa_flatClass_tmp no-gaps.
        shift wa_flatClass_tmp left deleting leading space.
*   This is not a great way to do this...
        find &apos;PUBLICSECTION.&apos; in wa_flatClass_tmp MATCH OFFSET off.
        if sy-subrc = 0 and off = 0.
          useFL = &apos;X&apos;.
        endif.
      else.
        append wa_flatClass to it_flatClass.
      endif.

    endloop.
    clear wa_flatClass.
    clear useFL.
  ENDIF.

** interfaces
*  loop at it_interfaces into wa_implementings
*        where exposure = &apos;2&apos;.
*    concatenate
*      space space space space
*      &apos;interfaces&apos;
*      wa_implementings-REFCLSNAME
*    into wa_flatClass separated by space.
*    append wa_flatClass to it_flatClass.
*    clear wa_flatClass.
*
*    if wa_implementings-IMPFINAL = &apos;X&apos;.
*      concatenate
*        space space space space space space
*        &apos;all methods final&apos;
*      into wa_flatClass separated by space.
*      append wa_flatClass to it_flatClass.
*      clear wa_flatClass.
*    elseif wa_implementings-IMPABSTRCT = &apos;X&apos;.
*      concatenate
*        space space space space space space
*        &apos;all methods abstract&apos;
*      into wa_flatClass separated by space.
*      append wa_flatClass to it_flatClass.
*      clear wa_flatClass.
*    endif.
*
*    concatenate
*      space space space space space space
*      &apos;.&apos;
*    into wa_flatClass separated by space.
*    append wa_flatClass to it_flatClass.
*    clear wa_flatClass.
*
*  endloop.
*
*  break uspty90.

** aliases

** data / class-data / constants

** events

** methods / class-methods



* protected section
*  wa_flatClass = &apos;protected section.&apos;.
*  append wa_flatClass to it_flatClass.
*  clear wa_flatClass.

*insert code for protected section
  sourcenode = xmldoc-&gt;find_from_name( &apos;protectedSection&apos; ).
  IF sourcenode IS NOT INITIAL.
    source = sourcenode-&gt;get_value( ).
    sourcetable = buildtablefromstring( source ).

    loop at sourcetable into wa_flatClass.
      append wa_flatClass to it_flatClass.
    endloop.
    clear wa_flatClass.

  ENDIF.


** interfaces

** aliases

** types

** data / class-data / constants

** events

** methods / class-methods



* private section
*  wa_flatClass = &apos;private section.&apos;.
*  append wa_flatClass to it_flatClass.
*  clear wa_flatClass.

*insert code for private section
  sourcenode = xmldoc-&gt;find_from_name( &apos;privateSection&apos; ).
  IF sourcenode IS NOT INITIAL.
    source = sourcenode-&gt;get_value( ).
    sourcetable = buildtablefromstring( source ).

    loop at sourcetable into wa_flatClass.
      append wa_flatClass to it_flatClass.
    endloop.
    clear wa_flatClass.

  ENDIF.



** interfaces

** aliases

** types

** data / class-data / constants

** events

** methods / class-methods

  wa_flatClass = &apos;ENDCLASS.&apos;.
  append wa_flatClass to it_flatClass.
  clear wa_flatClass.
  append wa_flatClass to it_flatClass.

  it_flatClassDef = it_flatClass.
  clear it_flatClass.

  concatenate
    &apos;CLASS&apos;
    objname
    &apos;IMPLEMENTATION.&apos;
  into wa_flatClass separated by space.
  append wa_flatClass to it_flatClass.
  clear wa_flatClass.




*Insert source code into the methods
  filter = xmldoc-&gt;create_filter_name( &apos;method&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = methodproperties.
*    methodkey-clsname = objname.
*    methodkey-cpdname = methodproperties-cmpname.
*    aobjname = methodkey.
*    if methodproperties-CLSNAME = objname.

      methodsourcenode = node-&gt;find_from_name( &apos;source&apos; ).
      IF methodsourcenode IS NOT INITIAL.
        source = methodsourcenode-&gt;get_value( ).
        sourcetable = buildtablefromstring( source ).

        loop at sourcetable into wa_flatClass.
          if wa_flatClass is not initial.
            if wa_flatClass(1) &lt;&gt; &apos;*&apos;.
              concatenate
                space space
                wa_flatClass
              into wa_flatClass separated by space.
            endif.
          endif.
          append wa_flatClass to it_flatClass.
        endloop.
        clear wa_flatClass.
      ELSEif classheader-CLSABSTRCT &lt;&gt; &apos;X&apos;.
        concatenate
          space space
          &apos;method&apos;
          methodproperties-cmpname
          &apos;.&apos;
        into wa_flatClass separated by space.
        append wa_flatClass to it_flatClass.
        clear wa_flatClass.
        concatenate
          space space
          &apos;endmethod.&apos;
        into wa_flatClass separated by space.
        append wa_flatClass to it_flatClass.
      ENDIF.
*    endif.

    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

*// ewH: create interface methods--&gt;
  filter = xmldoc-&gt;create_filter_name( &apos;interfaceMethod&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = methodKey.
*    aobjname = methodkey.

    if methodKey-clsname = objname.

      methodsourcenode = node-&gt;find_from_name( &apos;source&apos; ).
      IF methodsourcenode IS NOT INITIAL.
        source = methodsourcenode-&gt;get_value( ).
        sourcetable = buildtablefromstring( source ).

        loop at sourcetable into wa_flatClass.
          if wa_flatClass is not initial.
            if wa_flatClass(1) &lt;&gt; &apos;*&apos;.
              concatenate
                space space
                wa_flatClass
              into wa_flatClass separated by space.
            endif.
          endif.
          append wa_flatClass to it_flatClass.
        endloop.
        clear wa_flatClass.

      ENDIF.
    endif.

    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  wa_flatClass = &apos;ENDCLASS.&apos;.
  append wa_flatClass to it_flatClass.
  clear wa_flatClass.

  it_flatClassImp = it_flatClass.
  clear it_flatClass.

**insert code for local implementation
*  DATA _classname TYPE seoclsname.
*  _classname = objname.
*  sourcenode = xmldoc-&gt;find_from_name( &apos;localImplementation&apos; ).
*  IF sourcenode IS NOT INITIAL.
*    source = sourcenode-&gt;get_value( ).
*    sourcetable = buildtablefromstring( source ).
*  ENDIF.
*
**insert code for local types
*  sourcenode = xmldoc-&gt;find_from_name( &apos;localTypes&apos; ).
*  IF sourcenode IS NOT INITIAL.
*    source = sourcenode-&gt;get_value( ).
*    sourcetable = buildtablefromstring( source ).
*  ENDIF.
*
**insert code for local macros
*  sourcenode = xmldoc-&gt;find_from_name( &apos;localMacros&apos; ).
*  IF sourcenode IS NOT INITIAL.
*    source = sourcenode-&gt;get_value( ).
*    sourcetable = buildtablefromstring( source ).
*  ENDIF.

  ixml = cl_ixml=&gt;create( ).
  xmlDocOut = ixml-&gt;create_document( ).
  rootnodeOut = xmldoc-&gt;create_element( &apos;localClass&apos; ).
  rc = rootnodeOut-&gt;set_attribute( name = &apos;NAME&apos; value = objname ).

  defnodeOut = xmldocOut-&gt;create_element( &apos;definition&apos; ).
  reportstring = buildsourcestring( sourcetable = it_flatClassDef ).
  rc = defnodeOut-&gt;if_ixml_node~set_value( reportstring ).
  rc = rootnodeOut-&gt;append_child( defnodeOut ).

  impnodeOut = xmldocOut-&gt;create_element( &apos;implementation&apos; ).
  reportstring = buildsourcestring( sourcetable = it_flatClassImp ).
  rc = impnodeOut-&gt;if_ixml_node~set_value( reportstring ).
  rc = rootnodeOut-&gt;append_child( impnodeOut ).

  dependnodeOut = xmldocOut-&gt;create_element( &apos;dependencies&apos; ).
  rc = rootnodeOut-&gt;append_child( dependnodeOut ).

  if strParent is not initial.
    translate strParent to upper case.
    if strParent(1) = &apos;Z&apos; or strParent(1) = &apos;Y&apos;.
      dependchildnodeOut = xmldocOut-&gt;create_element( &apos;CLAS&apos; ).
      rc = dependchildnodeOut-&gt;if_ixml_node~set_value( strParent ).
      rc = dependnodeOut-&gt;append_child( dependchildnodeOut ).
    endif.
  endif.
  loop at it_interfaces into wa_implementings.
    strTemp = wa_implementings-REFCLSNAME.
    translate strTemp to upper case.
    if strTemp(1) = &apos;Z&apos; or strTemp(1) = &apos;Y&apos;.
      dependchildnodeOut = xmldocOut-&gt;create_element( &apos;INTF&apos; ).
      rc = dependchildnodeOut-&gt;if_ixml_node~set_value( strTemp ).
      rc = dependnodeOut-&gt;append_child( dependchildnodeOut ).
    endif.
  endloop.
  loop at it_attrib into attribproperties where typtype = &apos;3&apos;.
    strTemp = attribproperties-type.
    translate strTemp to upper case.
    if strTemp(1) = &apos;Z&apos; or strTemp(1) = &apos;Y&apos;.

    endif.
  endloop.

  rc = xmldocOut-&gt;append_child( rootnodeOut ).
  local_class_xml = xmldocOut.





endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_TOOLS" CMPNAME="INIT_PLUGIN" VERSION="1" LANGU="D" DESCRIPT="Initialize plugin mode (O=object, R=request, space=unknown)" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="INIT_PLUGIN" SCONAME="IV_PGMID" VERSION="1" LANGU="D" DESCRIPT="ID-programa em ordens e tarefas" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="E071-PGMID" PARVALUE="&apos;R3TR&apos;"/>
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="INIT_PLUGIN" SCONAME="IV_OBJECT" VERSION="1" LANGU="D" DESCRIPT="Tipo de objeto" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="E071-OBJECT" PARVALUE="&apos;TABU&apos;"/>
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="INIT_PLUGIN" SCONAME="IV_MASTERTYPE" VERSION="1" LANGU="D" DESCRIPT="Tipo de objeto" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="E071-OBJECT" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="INIT_PLUGIN" SCONAME="ET_E071" VERSION="1" LANGU="D" DESCRIPT="Task objects" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TY_T_E071"/>
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="INIT_PLUGIN" SCONAME="ET_E071K" VERSION="1" LANGU="D" DESCRIPT="Task objects keys" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TY_T_E071K"/>
   <parameter CLSNAME="ZSAPLINK_TOOLS" CMPNAME="INIT_PLUGIN" SCONAME="CV_MODE" VERSION="1" LANGU="D" DESCRIPT="O=add object. R=add request, space=not relevant" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="C"/>
   <exception CLSNAME="ZSAPLINK_TOOLS" CMPNAME="INIT_PLUGIN" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method INIT_PLUGIN.

*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  TYPES: ty_r_trkorr TYPE RANGE OF e071-trkorr.

  TYPES: BEGIN OF ty_trfunction,
           trkorr     TYPE e070-trkorr,
           trfunction TYPE e070-trfunction.
  TYPES: END OF ty_trfunction.

  DATA: lv_str        TYPE string,
        lt_trkorr     TYPE STANDARD TABLE OF e070-trkorr,
        lt_trfunction TYPE STANDARD TABLE OF ty_trfunction.

  FIELD-SYMBOLS: &lt;fs_nugr&gt;       TYPE c,
                 &lt;fs_nuga&gt;       TYPE c,
                 &lt;fs_r_reqnugg&gt;  TYPE ty_r_trkorr,
                 &lt;fs_trfunction&gt; LIKE LINE OF lt_trfunction,
                 &lt;fs_trkorr&gt;     LIKE LINE OF lt_trkorr.

* Only processes first time
  CHECK cv_mode IS INITIAL.

* Get the &quot;Add Objects to Nugget&quot; flag from the calling program&apos;s selection screen
  CONCATENATE &apos;(&apos; sy-cprog &apos;)NUGA&apos; INTO lv_str.
  ASSIGN (lv_str) TO &lt;fs_nuga&gt;.
  IF sy-subrc &lt;&gt; 0.
    lv_str = `&quot;Add Objects to Nugget&quot; flag not found`.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_str.
  ENDIF.

* Get the &quot;Add Objects from a Transport&quot; flag from the calling program&apos;s selection screen
  CONCATENATE &apos;(&apos; sy-cprog &apos;)NUGR&apos; INTO lv_str.
  ASSIGN (lv_str) TO &lt;fs_nugr&gt;.
  IF sy-subrc &lt;&gt; 0.
    lv_str = `&quot;Add Objects from a Transport&quot; flag not found`.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_str.
  ENDIF.

  CLEAR cv_mode.
  REFRESH: et_e071, et_e071k.

  IF &lt;fs_nuga&gt; = abap_true.
* Add from object mode
    cv_mode = c_mode_object.
  ELSEIF &lt;fs_nugr&gt; = abap_true.

* Add from request mode
    cv_mode = c_mode_request.

    IF iv_mastertype IS SUPPLIED AND
       iv_mastertype IS NOT INITIAL AND
       ( et_e071[] IS SUPPLIED OR et_e071k[] IS SUPPLIED ).

* Get the request number from selection screen
      CONCATENATE &apos;(&apos; sy-cprog &apos;)REQNUGG[]&apos; INTO lv_str.
      ASSIGN (lv_str) TO &lt;fs_r_reqnugg&gt;.
      IF sy-subrc &lt;&gt; 0.
        lv_str = `List of requests not found`.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = lv_str.
      ENDIF.

* At least one request must be supplied
      IF &lt;fs_r_reqnugg&gt;[] IS INITIAL.
        lv_str = `No requests supplied` .
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = lv_str.
      ENDIF.

* Get type of all requests supplied
      SELECT  trkorr trfunction
        INTO  TABLE lt_trfunction
        FROM  e070
        WHERE trkorr IN &lt;fs_r_reqnugg&gt;.

* Loop thru all requests supplied, looking for their tasks
      LOOP AT lt_trfunction ASSIGNING &lt;fs_trfunction&gt;.

* If it&apos;s a task, collect it
        IF &lt;fs_trfunction&gt;-trfunction CO &apos;SRQ&apos;. &quot;Development/correction, Repair or Customizing

          APPEND INITIAL LINE TO lt_trkorr ASSIGNING &lt;fs_trkorr&gt;.
          &lt;fs_trkorr&gt; = &lt;fs_trfunction&gt;-trkorr.

* If it&apos;s a request, search for its tasks
        ELSEIF &lt;fs_trfunction&gt;-trfunction CO &apos;KW&apos;. &quot; Workbench or Customizing

* Get all tasks of the request
          SELECT  trkorr
            APPENDING TABLE lt_trkorr
            FROM  e070
            WHERE strkorr = &lt;fs_trfunction&gt;-trkorr.

* Otherwise it&apos;s an invalid request type
        ELSE.

          lv_str = `Unknown request type`.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING
              textid = zcx_saplink=&gt;error_message
              msg    = lv_str.

        ENDIF.

      ENDLOOP.

      IF lt_trkorr[] IS NOT INITIAL.

        IF et_e071[] IS SUPPLIED.

* Load all R3TR VDAT objects and their keys for all tasks of the request
          SELECT  obj_name trkorr activity
            INTO  TABLE et_e071
            FROM  e071
            FOR ALL ENTRIES IN lt_trkorr
            WHERE trkorr = lt_trkorr-table_line AND
                  pgmid  = iv_pgmid AND
                  object = iv_mastertype.

          IF sy-subrc &lt;&gt; 0.
            lv_str = `Request is empty`.
            RAISE EXCEPTION TYPE zcx_saplink
              EXPORTING
                textid = zcx_saplink=&gt;error_message
                msg    = lv_str.
          ENDIF.

          SORT et_e071 BY obj_name used trkorr activity.

        ENDIF.

        IF et_e071k[] IS SUPPLIED.

* Get all object keys from all tasks
          SELECT  trkorr activity mastername viewname objname tabkey
            INTO  TABLE et_e071k
            FROM  e071k
            FOR ALL ENTRIES IN lt_trkorr
            WHERE trkorr = lt_trkorr-table_line AND
                  pgmid      = iv_pgmid AND
                  object     = iv_object AND
                  mastertype = iv_mastertype.

          SORT et_e071k BY table_line.
          DELETE ADJACENT DUPLICATES FROM et_e071k
            COMPARING table_line.

        ENDIF.

      ENDIF.

    ENDIF.

  ELSE.
* Add from other sources
    cv_mode = c_mode_other.
  ENDIF.

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_VDAT" VERSION="1" LANGU="D" DESCRIPT="SapLink Class Installer" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZSAPLINK_VDAT" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_VDAT" TYPEGROUP="SEOP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_VDAT" TYPEGROUP="SEOR" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_VDAT" TYPEGROUP="SEOS" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_VDAT" TYPEGROUP="SEOT" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_VDAT" TYPEGROUP="SEOX" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <forwardDeclaration>SEOP</forwardDeclaration>
  <forwardDeclaration>SEOR</forwardDeclaration>
  <forwardDeclaration>SEOS</forwardDeclaration>
  <forwardDeclaration>SEOT</forwardDeclaration>
  <forwardDeclaration>SEOX</forwardDeclaration>
  <attribute CLSNAME="ZSAPLINK_VDAT" CMPNAME="T_E071" VERSION="1" LANGU="D" DESCRIPT="Task objects" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZSAPLINK_TOOLS=&gt;TY_T_E071" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_VDAT" CMPNAME="T_E071K" VERSION="1" LANGU="D" DESCRIPT="Task objects keys" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZSAPLINK_TOOLS=&gt;TY_T_E071K" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_VDAT" CMPNAME="V_MODE" VERSION="1" LANGU="D" DESCRIPT="O=add object. R=add request" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="C" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_VDAT" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_VDAT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VDAT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VDAT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VDAT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_VDAT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  exists = abap_false.  &quot; No implementation of existence check

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_VDAT" CMPNAME="CREATEIXMLDOCFROMDATABASE" VERSION="1" LANGU="D" DESCRIPT="Creates an IF_IXML_DOCUMENT from OBJNAME Attr.  of database" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_VDAT" CMPNAME="CREATEIXMLDOCFROMDATABASE" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <exception CLSNAME="ZSAPLINK_VDAT" CMPNAME="CREATEIXMLDOCFROMDATABASE" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method CREATEIXMLDOCFROMDATABASE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  TYPES: BEGIN OF ty_vdat,
           name     TYPE dd02v-tabname,
           activity TYPE e071-activity,
         END OF ty_vdat.

  TYPES: BEGIN OF ty_tabu,
           tabname  TYPE dd02v-tabname,
         END OF ty_tabu.

  DATA: lv_str     TYPE string,
        lv_objtype TYPE string,
        lv_objname TYPE ddobjname,

        lr_t_table  TYPE REF TO data,

        lt_dd26v TYPE STANDARD TABLE OF dd26v,

        lo_vdat_node    TYPE REF TO if_ixml_element,
        lo_tabu_node    TYPE REF TO if_ixml_element,
        lo_datarow_node TYPE REF TO if_ixml_element,
        ls_vdat         TYPE ty_vdat,
        ls_tabu         TYPE ty_tabu.

  FIELD-SYMBOLS: &lt;fs_t_table&gt; TYPE STANDARD TABLE,
                 &lt;fs_s_table&gt; TYPE any,
                 &lt;fs_dd26v&gt;   LIKE LINE OF lt_dd26v.

* Get the object type and name
  lv_objtype = me-&gt;getobjecttype( ).
  lv_objname = objname.

* Get the list of tables in View
  CALL FUNCTION &apos;DDIF_VIEW_GET&apos;
    EXPORTING
      name          = lv_objname
      langu         = sy-langu
    TABLES
      dd26v_tab     = lt_dd26v
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc &lt;&gt; 0 OR lt_dd26v[] IS INITIAL.
    lv_str = `View does not exist in the active state`.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_str.
  ENDIF.

* Save data from each table only once in the XML document
  SORT lt_dd26v BY tabname.
  DELETE ADJACENT DUPLICATES FROM lt_dd26v COMPARING tabname.

  SORT lt_dd26v BY ddlanguage viewname tabname.

* Save contents of all View tables in XML document
  LOOP AT lt_dd26v ASSIGNING &lt;fs_dd26v&gt;.

    AT NEW viewname.

* Creates the VDAT root node
      lo_vdat_node = xmldoc-&gt;create_element( lv_objtype ).
      ls_vdat-name  = &lt;fs_dd26v&gt;-viewname.
      CLEAR ls_vdat-activity.
      me-&gt;setattributesfromstructure( node      = lo_vdat_node
                                      structure = ls_vdat  ).

    ENDAT.

    AT NEW tabname.

* Creates the TABU node
      lo_tabu_node = xmldoc-&gt;create_element( `TABU` ).
      ls_tabu-tabname  = &lt;fs_dd26v&gt;-tabname.
      me-&gt;setattributesfromstructure( node      = lo_tabu_node
                                      structure = ls_tabu  ).

      CREATE DATA lr_t_table TYPE STANDARD TABLE OF (ls_tabu-tabname).
      ASSIGN lr_t_table-&gt;* TO &lt;fs_t_table&gt;.

* Get data from table
      zsaplink_tools=&gt;get_filtered_table( EXPORTING
                                            iv_vdat_tdat    = ls_vdat-name
                                            iv_is_tdat      = abap_false
                                            iv_tabname      = ls_tabu-tabname
                                          IMPORTING
                                            et_results      = &lt;fs_t_table&gt; ).

* Save data to XML document
      LOOP AT &lt;fs_t_table&gt; ASSIGNING &lt;fs_s_table&gt;.

* Creates the DataRow node
        lo_datarow_node = xmldoc-&gt;create_element( `DataRow` ).
        me-&gt;setattributesfromstructure( node      = lo_datarow_node
                                        structure = &lt;fs_s_table&gt;  ).
        lo_tabu_node-&gt;append_child( lo_datarow_node ).

      ENDLOOP.

      lo_vdat_node-&gt;append_child( lo_tabu_node ).

    ENDAT.

    AT END OF viewname.

      xmldoc-&gt;append_child( lo_vdat_node ).
      EXIT.

    ENDAT.

  ENDLOOP.

  ixmldocument = xmldoc.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

* Get all tasks of the request supplied in the calling program, if that&apos;s the case
  zsaplink_tools=&gt;init_plugin( EXPORTING
                                 iv_mastertype = &apos;VDAT&apos;
                               IMPORTING
                                 et_e071  = me-&gt;t_e071
                                 et_e071k = me-&gt;t_e071k
                               CHANGING
                                 cv_mode  = me-&gt;v_mode ).

  IF me-&gt;v_mode = zsaplink_tools=&gt;c_mode_request.
    ixmldocument = me-&gt;createixmldocfromrequest( ).
  ELSEIF me-&gt;v_mode = zsaplink_tools=&gt;c_mode_object.
    ixmldocument = me-&gt;createixmldocfromdatabase( ).
  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_VDAT" CMPNAME="CREATEIXMLDOCFROMREQUEST" VERSION="1" LANGU="D" DESCRIPT="Creates an IF_IXML_DOCUMENT from OBJNAME Attr.  of a request" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_VDAT" CMPNAME="CREATEIXMLDOCFROMREQUEST" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <exception CLSNAME="ZSAPLINK_VDAT" CMPNAME="CREATEIXMLDOCFROMREQUEST" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method CREATEIXMLDOCFROMREQUEST.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  TYPES: BEGIN OF ty_vdat,
           name     TYPE dd02v-tabname,
           activity TYPE e071-activity,
         END OF ty_vdat.

  TYPES: BEGIN OF ty_tabu,
           tabname  TYPE dd02v-tabname,
         END OF ty_tabu.

  DATA: lv_str           TYPE string,
        lv_objtype       TYPE string,
        lv_from          TYPE sy-tabix,
        lv_len           TYPE i,
        lv_complete_keys TYPE abap_bool,
        lv_charfields    TYPE string,
        lv_keyfields     TYPE string,
        lv_where         TYPE string,

        lr_t_table  TYPE REF TO data,
        lr_s_table  TYPE REF TO data,
        lr_tabkeys  TYPE REF TO data,
        lr_tabkeys2 TYPE REF TO data,

        lt_dd03p       TYPE STANDARD TABLE OF dd03p,
        lt_fields      TYPE cl_abap_structdescr=&gt;component_table,
        lt_keyfields   TYPE abap_keydescr_tab,
        lt_charfields  TYPE abap_keydescr_tab,
        lt_sortfields  TYPE abap_sortorder_tab,

        lo_structdescr TYPE REF TO cl_abap_structdescr,
        lo_tabledescr  TYPE REF TO cl_abap_tabledescr,
        lo_tabkeydescr TYPE REF TO cl_abap_typedescr,

        lo_vdat_node    TYPE REF TO if_ixml_element,
        lo_tabu_node    TYPE REF TO if_ixml_element,
        lo_datarow_node TYPE REF TO if_ixml_element,
        ls_vdat         TYPE ty_vdat,
        ls_tabu         TYPE ty_tabu.

  FIELD-SYMBOLS: &lt;fs_e071&gt;       LIKE LINE OF t_e071,
                 &lt;fs_e071k&gt;      LIKE LINE OF t_e071k,
                 &lt;fs_t_table&gt;    TYPE STANDARD TABLE,
                 &lt;fs_s_table&gt;    TYPE any,
                 &lt;fs_t_tabkeys&gt;  TYPE STANDARD TABLE,
                 &lt;fs_t_tabkeys2&gt; TYPE STANDARD TABLE,
                 &lt;fs_s_tabkey&gt;   TYPE any,
                 &lt;fs_field&gt;      LIKE LINE OF lt_fields,
                 &lt;fs_dd03p&gt;      LIKE LINE OF lt_dd03p,
                 &lt;fs_sortfield&gt;  LIKE LINE OF lt_sortfields,
                 &lt;fs_keyfield&gt;   LIKE LINE OF lt_keyfields.

* Get the object type
  lv_objtype = me-&gt;getobjecttype( ).

* Look for the first task activity not yet processed
  READ TABLE t_e071 ASSIGNING &lt;fs_e071&gt;
    WITH KEY obj_name = objname
             used     = space
    BINARY SEARCH.

  IF sy-subrc &lt;&gt; 0.
    lv_str = `No more object(s) of this type found in the request(s) supplied`.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_str.
  ENDIF.

* Position on the first key of the object being processed
  READ TABLE t_e071k TRANSPORTING NO FIELDS WITH KEY trkorr     = &lt;fs_e071&gt;-trkorr
                                                     activity   = &lt;fs_e071&gt;-activity
                                                     mastername = &lt;fs_e071&gt;-obj_name.

  IF sy-subrc = 0.

    lv_from = sy-tabix.

* Process all keys belonging to current object
    LOOP AT t_e071k ASSIGNING &lt;fs_e071k&gt; FROM lv_from.

      AT NEW mastername.

* Creates the VDAT root node
        lo_vdat_node = xmldoc-&gt;create_element( lv_objtype ).
        ls_vdat-name  = objname.
        ls_vdat-activity = &lt;fs_e071&gt;-activity.
        me-&gt;setattributesfromstructure( node      = lo_vdat_node
                                        structure = ls_vdat  ).

      ENDAT.

      AT NEW objname.

* Get information about all fields of the table
        REFRESH lt_dd03p.
        CALL FUNCTION &apos;DDIF_TABL_GET&apos;
          EXPORTING
            name          = &lt;fs_e071k&gt;-objname
            langu         = sy-langu
          TABLES
            dd03p_tab     = lt_dd03p
          EXCEPTIONS
            illegal_input = 1
            OTHERS        = 2.

        IF sy-subrc &lt;&gt; 0 OR lt_dd03p[] IS INITIAL.
          lv_str = `Table does not exist in the active state`.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING
              textid = zcx_saplink=&gt;error_message
              msg    = lv_str.
        ENDIF.

* Create the type object for field E071K-TABKEY
        lo_tabkeydescr = cl_abap_typedescr=&gt;describe_by_name( `E071K-TABKEY` ).

* Loop thru all key fields of the table:
*   1) Building a list of all key fields
*   2) Building a list of all CHARLIKE key fields that fit fields E071K-TABKEY
*   3) Building the WHERE clause for the SELECT to be used for data retrieval, using FOR ALL ENTRIES
*   4) Setting up table LT_FIELDS, with all key fields
        CLEAR: lv_keyfields, lv_charfields, lv_where.
        lv_complete_keys = abap_true.
        REFRESH lt_fields.
        LOOP AT lt_dd03p ASSIGNING &lt;fs_dd03p&gt;
          WHERE keyflag = abap_true AND
                fieldname(1) &lt;&gt; &apos;.&apos;.

* Build the list of all key fields names
          CONCATENATE lv_keyfields &lt;fs_dd03p&gt;-fieldname INTO lv_keyfields
            SEPARATED BY space.

* Add key field to the key type strucuture of the object keys table
          APPEND INITIAL LINE TO lt_fields ASSIGNING &lt;fs_field&gt;.
          &lt;fs_field&gt;-name = &lt;fs_dd03p&gt;-fieldname.
          &lt;fs_field&gt;-type ?= cl_abap_structdescr=&gt;describe_by_name( &lt;fs_dd03p&gt;-rollname ).

          CHECK lv_complete_keys = abap_true.

* Check if structure containing all key fields of the View table is CHARLIKE
          IF &lt;fs_field&gt;-type-&gt;type_kind CN &apos;CNDT&apos;.
            lv_complete_keys = abap_false.
            CONTINUE.
          ENDIF.

* Build the type object for key fields found so far, to help answer the following question below
          lo_structdescr = cl_abap_structdescr=&gt;create( lt_fields ).

* If I add current CHARLIKE key field to key structure,
*   will it make the CHARLIKE key structure larger than field E071K-TABKEY ?
          IF lo_structdescr-&gt;length &gt; lo_tabkeydescr-&gt;length.
            lv_complete_keys = abap_false.
            CONTINUE.
          ENDIF.

* Build the list of CHARLIKE key fields names
          CONCATENATE lv_charfields &lt;fs_dd03p&gt;-fieldname INTO lv_charfields
            SEPARATED BY space.

* Build the &apos;FIELDNAME = &lt;FS_T_TAKEYS&gt;-FIELDNAME&apos; WHERE condition
          CONCATENATE &apos;&lt;FS_T_TABKEYS&gt;-&apos; &lt;fs_dd03p&gt;-fieldname INTO lv_str.
          CONCATENATE lv_where &apos;AND&apos; &lt;fs_dd03p&gt;-fieldname &apos;=&apos; lv_str INTO lv_where SEPARATED BY space.

        ENDLOOP.

* Table has no key fields (?!?)
        IF sy-subrc &lt;&gt; 0.
          lv_str = `Table has no key fields`.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING
              textid = zcx_saplink=&gt;error_message
              msg    = lv_str.
        ENDIF.

* Get rid of the &quot; &quot; at the beginning of key fuields list
        SHIFT lv_keyfields LEFT BY 1 PLACES.

* List of table key fields
        SPLIT lv_keyfields AT space INTO TABLE lt_keyfields.

* Get rid of the &quot; &quot; at the beginning of CHAR key fields list
        SHIFT lv_charfields LEFT BY 1 PLACES.

* List of table CHARLIKE key fields
        SPLIT lv_charfields AT space INTO TABLE lt_charfields.

* Get rid of the &quot; AND &quot; at the beginning of the WHERE clause
        SHIFT lv_where LEFT BY 5 PLACES.

* Creates the dynamic table with key fields of the data table
        lo_structdescr = cl_abap_structdescr=&gt;create( lt_fields ).
        lo_tabledescr = cl_abap_tabledescr=&gt;create( p_line_type = lo_structdescr
                                                    p_key       = lt_keyfields ).
        CREATE DATA lr_tabkeys TYPE HANDLE lo_tabledescr.
        ASSIGN lr_tabkeys-&gt;* TO &lt;fs_t_tabkeys&gt;.

      ENDAT.

* If we are not storing complete keys, get rid of the &quot;*&quot; at the end of key
      CLEAR lv_str.
      lv_len = strlen( &lt;fs_e071k&gt;-tabkey ) - 1.
      IF lv_len &gt;= 0.
        IF lv_complete_keys = abap_false AND
           &lt;fs_e071k&gt;-tabkey+lv_len(1) = &apos;*&apos;.
          lv_str = &lt;fs_e071k&gt;-tabkey(lv_len).
        ELSE.
          lv_str = &lt;fs_e071k&gt;-tabkey.
        ENDIF.
      ENDIF.

* Creates a new key in the keys table
      APPEND INITIAL LINE TO &lt;fs_t_tabkeys&gt; ASSIGNING &lt;fs_s_tabkey&gt;.
      &lt;fs_s_tabkey&gt; = lv_str.

      AT END OF objname.

* Get rid of duplicate keys in the keys table
        SORT &lt;fs_t_tabkeys&gt; BY table_line.
        IF lv_complete_keys = abap_true.
          DELETE ADJACENT DUPLICATES FROM &lt;fs_t_tabkeys&gt; COMPARING ALL FIELDS.
        ELSEIF lt_charfields[] IS NOT INITIAL.

* Create a table with same fields as LT_TABKEYS, but with CHAR key fields
          lo_tabledescr = cl_abap_tabledescr=&gt;create( p_line_type = lo_structdescr
                                                      p_key       = lt_charfields ).
          CREATE DATA lr_tabkeys2 TYPE HANDLE lo_tabledescr.
          ASSIGN lr_tabkeys2-&gt;* TO &lt;fs_t_tabkeys2&gt;.

* Get rid of all CHARLIKE key duplicates
          &lt;fs_t_tabkeys2&gt;[] = &lt;fs_t_tabkeys&gt;[].
          DELETE ADJACENT DUPLICATES FROM &lt;fs_t_tabkeys2&gt;.
          &lt;fs_t_tabkeys&gt;[] = &lt;fs_t_tabkeys2&gt;[].

        ENDIF.

* Only reuse the keys table as data table if data table fields are all key fields and
*   if data table allows storing complete keys in the request
        IF lines( lt_dd03p ) &lt;&gt; lines( lt_keyfields ) OR
           lv_complete_keys = abap_false.

* If not, then create the table that will contain the records to be written
          CREATE DATA lr_t_table TYPE STANDARD TABLE OF (&lt;fs_e071k&gt;-objname) WITH KEY (lt_keyfields).
          ASSIGN lr_t_table-&gt;* TO &lt;fs_t_table&gt;.

* And select the desired records from database using CHARLIKE keys table &lt;FS_T_TABKEYS&gt; as the key
          IF &lt;fs_t_tabkeys&gt;[] IS NOT INITIAL.
            SELECT  *
              INTO  TABLE &lt;fs_t_table&gt;
              FROM  (&lt;fs_e071k&gt;-objname)
              CLIENT SPECIFIED
              FOR ALL ENTRIES IN &lt;fs_t_tabkeys&gt;
              WHERE (lv_where).
          ENDIF.

        ELSE.

* If yes, the table &lt;fs_t_tabkeys&gt; already contains all fields that should be written
          ASSIGN &lt;fs_t_tabkeys&gt; TO &lt;fs_t_table&gt;.

        ENDIF.

        IF &lt;fs_t_table&gt;[] IS NOT INITIAL.

* Get rid of duplicate entries in the data table
          REFRESH lt_sortfields.
          LOOP AT lt_keyfields ASSIGNING &lt;fs_keyfield&gt;.
            APPEND INITIAL LINE TO lt_sortfields ASSIGNING &lt;fs_sortfield&gt;.
            &lt;fs_sortfield&gt;-name = &lt;fs_keyfield&gt;.
          ENDLOOP.
          SORT &lt;fs_t_table&gt; BY (lt_sortfields).
          DELETE ADJACENT DUPLICATES FROM &lt;fs_t_table&gt;.

* Creates the TABU node containing the table name
          lo_tabu_node = xmldoc-&gt;create_element( &apos;TABU&apos; ).
          ls_tabu-tabname = &lt;fs_e071k&gt;-objname.
          me-&gt;setattributesfromstructure( node      = lo_tabu_node
                                          structure = ls_tabu  ).

* Writes all records to the XML document
          LOOP AT &lt;fs_t_table&gt; ASSIGNING &lt;fs_s_table&gt;.

            lo_datarow_node = xmldoc-&gt;create_element( `DataRow` ).
            me-&gt;setattributesfromstructure( node = lo_datarow_node structure = &lt;fs_s_table&gt; ).
            lo_tabu_node-&gt;append_child( lo_datarow_node ).

          ENDLOOP.

* Inserts the TABU node into the XML document
          lo_vdat_node-&gt;append_child( lo_tabu_node ).

        ENDIF.

      ENDAT.

* If it&apos;s the last key for current object, exit
      AT END OF mastername.

* Inserts the VDAT node into the XML document
        xmldoc-&gt;append_child( lo_vdat_node ).
        EXIT.

      ENDAT.

    ENDLOOP.

  ENDIF.

  &lt;fs_e071&gt;-used = abap_true.

  SORT t_e071 BY obj_name used trkorr activity.

  ixmldocument = xmldoc.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  TYPES: BEGIN OF ty_vdat,
           name     TYPE dd02l-tabname,
           activity TYPE e071-activity,
         END OF ty_vdat,

         BEGIN OF ty_tabu,
           tabname TYPE dd02l-tabname,
         END OF ty_tabu,

         BEGIN OF ty_entry,
           tabname TYPE dd02l-tabname,
           table   TYPE REF TO data,
         END OF ty_entry.

  DATA: lo_vdat_node TYPE REF TO if_ixml_element,

        lo_tabu_node     TYPE REF TO if_ixml_element,
        lo_tabu_filter   TYPE REF TO if_ixml_node_filter,
        lo_tabu_iterator TYPE REF TO if_ixml_node_iterator,

        lo_datarow_node     TYPE REF TO if_ixml_element,
        lo_datarow_filter   TYPE REF TO if_ixml_node_filter,
        lo_datarow_iterator TYPE REF TO if_ixml_node_iterator,

        lt_dd03p TYPE STANDARD TABLE OF dd03p,

        ls_vdat TYPE ty_vdat,
        ls_tabu TYPE ty_tabu,

        lv_objtype TYPE string,

        lv_clidep TYPE abap_bool,

        lv_num_keyfields TYPE i,

        lr_table   TYPE REF TO data,
        lr_table_2 LIKE lr_table,
        lr_struct  TYPE REF TO data,

        ls_ko200      TYPE ko200,
        lt_e071k      TYPE tredt_keys,
        lt_fields     TYPE cl_abap_structdescr=&gt;component_table,
        lt_keyfields  TYPE STANDARD TABLE OF dd03p-fieldname,
        lt_sortfields TYPE abap_sortorder_tab,
        lt_entries    TYPE STANDARD TABLE OF ty_entry,

        lo_structdescr TYPE REF TO cl_abap_structdescr,
        lo_tabkeydescr TYPE REF TO cl_abap_typedescr,
        lo_typedescr   TYPE REF TO cl_abap_typedescr,

        lv_keyfields     TYPE string,
        lv_where         TYPE string,
        lv_complete_keys TYPE abap_bool,
        lv_tabix         TYPE sy-tabix,
        lv_str           TYPE string.

  FIELD-SYMBOLS: &lt;fs_t_table&gt;    TYPE STANDARD TABLE,
                 &lt;fs_t_table_2&gt;  LIKE &lt;fs_t_table&gt;,
                 &lt;fs_s_table&gt;    TYPE any,
                 &lt;fs_dd03p&gt;      LIKE LINE OF lt_dd03p,
                 &lt;fs_e071k&gt;      LIKE LINE OF lt_e071k,
                 &lt;fs_fields&gt;     LIKE LINE OF lt_fields,
                 &lt;fs_keyfields&gt;  LIKE LINE OF lt_keyfields,
                 &lt;fs_sortfields&gt; LIKE LINE OF lt_sortfields,
                 &lt;fs_entries&gt;    LIKE LINE OF lt_entries,
                 &lt;fs_struct&gt;     TYPE any,
                 &lt;fs_mandt&gt;      TYPE mandt.

* Get object type
  lv_objtype = getobjecttype( ).

* Save the XML document object
  xmldoc = ixmldocument.

* Get root node for VDAT object
  lo_vdat_node = xmldoc-&gt;find_from_name( lv_objtype ).

* Get View name from XML
  me-&gt;getstructurefromattributes(
          EXPORTING  node      = lo_vdat_node
          CHANGING   structure = ls_vdat ).

* Returns the name of the object
  name = ls_vdat-name.

* Create the filter to loop thru all TABU entries in document
  lo_tabu_filter = lo_vdat_node-&gt;create_filter_name( `TABU` ).

* Get an iterator to be used to cycle thru all occurrencies of TABU entries
  lo_tabu_iterator = lo_vdat_node-&gt;create_iterator_filtered( lo_tabu_filter ).

* Loop thru all tables (TABU entries) that make up the View
  lo_tabu_node ?= lo_tabu_iterator-&gt;get_next( ).
  WHILE lo_tabu_node IS BOUND.

* Get table name from XML
    me-&gt;getstructurefromattributes(
            EXPORTING  node      = lo_tabu_node
            CHANGING   structure = ls_tabu ).

* Check that table exists
    REFRESH lt_dd03p.
    CALL FUNCTION &apos;DDIF_TABL_GET&apos;
      EXPORTING
        name          = ls_tabu-tabname
        langu         = sy-langu
      TABLES
        dd03p_tab     = lt_dd03p
      EXCEPTIONS
        illegal_input = 1
        OTHERS        = 2.

    IF sy-subrc &lt;&gt; 0 OR lt_dd03p[] IS INITIAL.
      lv_str = `Table does not exist in the active state`.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = lv_str.
    ENDIF.

* Count number of key fields
    LOOP AT lt_dd03p TRANSPORTING NO FIELDS WHERE keyflag = abap_true.
      ADD  1 TO lv_num_keyfields.
    ENDLOOP.

* Create the type object for field E071K-TABKEY
    lo_tabkeydescr = cl_abap_typedescr=&gt;describe_by_name( `E071K-TABKEY` ).

* Build a structure type containing all key fields of the View table
    DELETE lt_dd03p WHERE keyflag      = abap_false OR
                          fieldname(1) = &apos;.&apos;.
    CLEAR: lv_keyfields, lv_where.
    lv_clidep = abap_false.
    lv_complete_keys = abap_true.
    REFRESH lt_fields.
    LOOP AT lt_dd03p ASSIGNING &lt;fs_dd03p&gt;.

      AT FIRST.

* Check if the View table is a client dependent table:
*   First table field must be a key field of type CLNT
        IF &lt;fs_dd03p&gt;-datatype = &apos;CLNT&apos; AND
           lv_num_keyfields &lt;&gt; 1.
          lv_clidep = abap_true.
        ENDIF.

      ENDAT.

* Build the key fields list
      CONCATENATE lv_keyfields &lt;fs_dd03p&gt;-fieldname INTO lv_keyfields
        SEPARATED BY space.

* Build the WHERE clause used to retrieve entries from database
      CONCATENATE `&lt;FS_T_TABLE&gt;-` &lt;fs_dd03p&gt;-fieldname INTO lv_str.
      CONCATENATE lv_where `AND` &lt;fs_dd03p&gt;-fieldname `=` lv_str INTO lv_where
        SEPARATED BY space.

      CHECK lv_complete_keys = abap_true.

      lo_typedescr = cl_abap_typedescr=&gt;describe_by_name( &lt;fs_dd03p&gt;-rollname ).

* Only CHARLIKE key fields are accepted
      IF lo_typedescr-&gt;type_kind CN &apos;CNDT&apos;.
        lv_complete_keys = abap_false.
        CONTINUE.
      ENDIF.

* One more CHARLIKE key field found
      APPEND INITIAL LINE TO lt_fields ASSIGNING &lt;fs_fields&gt;.
      &lt;fs_fields&gt;-name = &lt;fs_dd03p&gt;-fieldname.
      &lt;fs_fields&gt;-type ?= lo_typedescr.

* Build the type object for key fields found so far, to help answer the following question below
      lo_structdescr = cl_abap_structdescr=&gt;create( lt_fields ).

* If I add current CHARLIKE key field to key structure,
*   will it make the CHARLIKE key structure larger than field E071K-TABKEY ?
      IF lo_structdescr-&gt;length &gt; lo_tabkeydescr-&gt;length.

* CHARLIKE key field just added will make CHARLIKE key structure not fit field E071K-TABKEY, so delete it
        lv_tabix = lines( lt_fields ).
        DELETE lt_fields INDEX lv_tabix.

* Rebuild the type object for key fields, excluding current CHARLIKE key field that did not fit
        lo_structdescr = cl_abap_structdescr=&gt;create( lt_fields ).

        lv_complete_keys = abap_false.
        CONTINUE.

      ENDIF.

    ENDLOOP.

* Error if View table has no key fields (?!?)
    IF sy-subrc &lt;&gt; 0.
      lv_str = `Table has no key fields`.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = lv_str.
    ENDIF.

* Get rid of the &quot; &quot; at the beginning of the list of key fields of View table
    SHIFT lv_keyfields LEFT BY 1 PLACES.

* Build a list of all View table key fields
    SPLIT lv_keyfields AT space INTO TABLE lt_keyfields.

* Get rid of the &quot; AND &quot; at the beginning of the WHERE clause
    SHIFT lv_where LEFT BY 5 PLACES.

* Create a work area to store all CHARLIKE key fields of the View table that fit field E070K-TABKEY
    CREATE DATA lr_struct TYPE HANDLE lo_structdescr.
    ASSIGN lr_struct-&gt;* TO &lt;fs_struct&gt;.

* Create the View table using the CHARLIKE key. This will allow us to delete adjacent duplicates from it
*   using a dynamically COMPARING addition
    CREATE DATA lr_table TYPE STANDARD TABLE OF (ls_tabu-tabname) WITH KEY (lt_keyfields).
    ASSIGN lr_table-&gt;* TO &lt;fs_t_table&gt;.

* Create a table to contain existing data from database
    CREATE DATA lr_table_2 LIKE &lt;fs_t_table&gt;.
    ASSIGN lr_table_2-&gt;* TO &lt;fs_t_table_2&gt;.

* Create the filter to loop thru all DataRow entries in document for the View table
    lo_datarow_filter = lo_tabu_node-&gt;create_filter_name( `DataRow` ).

* Get an iterator to be used to cycle thru all occurrencies of DataRow entries
    lo_datarow_iterator = lo_tabu_node-&gt;create_iterator_filtered( lo_datarow_filter ).

* Collect all DataRow entries of current View table
    lo_datarow_node ?= lo_datarow_iterator-&gt;get_next( ).
    WHILE lo_datarow_node IS BOUND.

* Append contents of each DataRow entry to the View table
      APPEND INITIAL LINE TO &lt;fs_t_table&gt; ASSIGNING &lt;fs_s_table&gt;.

      me-&gt;getstructurefromattributes(
              EXPORTING   node      = lo_datarow_node
              CHANGING    structure = &lt;fs_s_table&gt; ).

* If it&apos;s a client dependent table, replace CLNT key field with logged on client
      IF lv_clidep = abap_true.
        ASSIGN COMPONENT 1 OF STRUCTURE &lt;fs_s_table&gt; TO &lt;fs_mandt&gt;.
        &lt;fs_mandt&gt; = sy-mandt.
      ENDIF.

* Build table key to be stored in the object keys table
      &lt;fs_struct&gt; = &lt;fs_s_table&gt;.

* Build the table key for each DataRow entry
      APPEND INITIAL LINE TO lt_e071k ASSIGNING &lt;fs_e071k&gt;.
      &lt;fs_e071k&gt;-pgmid      = &apos;R3TR&apos;.
      &lt;fs_e071k&gt;-object     = &apos;TABU&apos;.
      &lt;fs_e071k&gt;-objname    = ls_tabu-tabname.
      &lt;fs_e071k&gt;-mastertype = &apos;VDAT&apos;.
      &lt;fs_e071k&gt;-mastername = ls_vdat-name.
      &lt;fs_e071k&gt;-viewname   = ls_vdat-name.
      &lt;fs_e071k&gt;-tabkey     = &lt;fs_struct&gt;.
      &lt;fs_e071k&gt;-sortflag   = &apos;2&apos;.
      &lt;fs_e071k&gt;-activity   = ls_vdat-activity.

* Get next DataRow entry
      lo_datarow_node ?= lo_datarow_iterator-&gt;get_next( ).

    ENDWHILE.

    IF &lt;fs_t_table&gt;[] IS NOT INITIAL.

* Check if any of the entries to be inserted already exists in database
      SELECT  (lv_keyfields)
        FROM  (ls_tabu-tabname)
        INTO  TABLE &lt;fs_t_table_2&gt;
        FOR ALL ENTRIES IN &lt;fs_t_table&gt;
        WHERE (lv_where).

* At least one table entry already exists in datrabase
      IF sy-subrc = 0.

* Overwrite existing records or write only the records that does not exist in database
*   depending on the &quot;Overwrite Originals&quot; flag of SAPLINK selection screen
        IF overwrite = abap_true.
          DELETE (ls_tabu-tabname) FROM TABLE &lt;fs_t_table_2&gt;.
        ELSE.

* If no overwrite is desired, delete all existing entries from the
*   View table and also from the CHARLIKE key fields table
          LOOP AT &lt;fs_t_table_2&gt; ASSIGNING &lt;fs_s_table&gt;.

* Remove entry from View table
            DELETE TABLE &lt;fs_t_table&gt; FROM &lt;fs_s_table&gt;.

* Also remove entry from the object keys table
            &lt;fs_struct&gt; = &lt;fs_s_table&gt;.
            READ TABLE lt_e071k TRANSPORTING NO FIELDS
              WITH KEY objname    = ls_tabu-tabname
                       viewname   = ls_vdat-name
                       mastername = ls_vdat-name
                       tabkey     = &lt;fs_struct&gt;.
            IF sy-subrc = 0.
              DELETE lt_e071k INDEX sy-tabix.
            ENDIF.

          ENDLOOP.

        ENDIF.

      ENDIF.

    ENDIF.

* Store all entries that will be written to database later
    IF &lt;fs_t_table&gt;[] IS NOT INITIAL.

* Get rid of duplicate keys in the View table
      REFRESH lt_sortfields.
      LOOP AT lt_keyfields ASSIGNING &lt;fs_keyfields&gt;.
        APPEND INITIAL LINE TO lt_sortfields ASSIGNING &lt;fs_sortfields&gt;.
        &lt;fs_sortfields&gt;-name = &lt;fs_keyfields&gt;.
      ENDLOOP.
      SORT &lt;fs_t_table&gt; BY (lt_sortfields).
      DELETE ADJACENT DUPLICATES FROM &lt;fs_t_table&gt;.

      APPEND INITIAL LINE TO lt_entries ASSIGNING &lt;fs_entries&gt;.
      &lt;fs_entries&gt;-tabname  = ls_tabu-tabname.
      CREATE DATA &lt;fs_entries&gt;-table LIKE &lt;fs_t_table&gt;.
      ASSIGN &lt;fs_entries&gt;-table-&gt;* TO &lt;fs_t_table_2&gt;.
      &lt;fs_t_table_2&gt;[] =  &lt;fs_t_table&gt;[].

    ENDIF.

* If not storing complete keys, append an &quot;*&quot; at the end of every key entry
    IF lv_complete_keys = abap_false.
      LOOP AT lt_e071k ASSIGNING &lt;fs_e071k&gt;
        WHERE objname    = ls_tabu-tabname AND
              viewname   = ls_vdat-name AND
              mastername = ls_vdat-name.
        CONCATENATE &lt;fs_e071k&gt;-tabkey &apos;*&apos; INTO &lt;fs_e071k&gt;-tabkey.
      ENDLOOP.
    ENDIF.

* Get next TABU entry
    lo_tabu_node ?= lo_tabu_iterator-&gt;get_next( ).

  ENDWHILE.

  IF lt_entries[] IS NOT INITIAL.

* Get rid of duplicate object keys
    SORT lt_e071k BY mastername objname tabkey.
    DELETE ADJACENT DUPLICATES FROM lt_e071k COMPARING mastername objname tabkey.

* Attach inserted entries to a request
    ls_ko200-pgmid     = &apos;R3TR&apos;.
    ls_ko200-object    = lv_objtype.
    ls_ko200-obj_name  = ls_vdat-name.
    ls_ko200-objfunc   = &apos;K&apos;.
    ls_ko200-activity  = ls_vdat-activity.
    ls_ko200-operation = &apos;I&apos;.

    IF zsaplink_tools=&gt;add_to_request( is_ko200  = ls_ko200
                                       it_e071k  = lt_e071k ) &lt;&gt; 0.
      lv_str = `Error while attaching table entries to the request`.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = lv_str.
    ENDIF.

* Insert all selected records into database
    LOOP AT lt_entries ASSIGNING &lt;fs_entries&gt;.
      ASSIGN &lt;fs_entries&gt;-table-&gt;* TO &lt;fs_t_table_2&gt;.
      INSERT (&lt;fs_entries&gt;-tabname) FROM TABLE &lt;fs_t_table_2&gt;.
    ENDLOOP.

  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  DATA: v_msg TYPE string.

  v_msg = `Operation not implemented`.
  RAISE EXCEPTION TYPE zcx_saplink
    EXPORTING
      textid = zcx_saplink=&gt;error_message
      msg = v_msg.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  objecttype = &apos;VDAT&apos;.  &quot;Selected view contents

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_TEXT" VERSION="1" LANGU="D" DESCRIPT="SapLink Class Installer" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZSAPLINK_TEXT" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_TEXT" TYPEGROUP="SEOP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_TEXT" TYPEGROUP="SEOR" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_TEXT" TYPEGROUP="SEOS" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_TEXT" TYPEGROUP="SEOT" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_TEXT" TYPEGROUP="SEOX" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <forwardDeclaration>SEOP</forwardDeclaration>
  <forwardDeclaration>SEOR</forwardDeclaration>
  <forwardDeclaration>SEOS</forwardDeclaration>
  <forwardDeclaration>SEOT</forwardDeclaration>
  <forwardDeclaration>SEOX</forwardDeclaration>
  <inheritance CLSNAME="ZSAPLINK_TEXT" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_TEXT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TEXT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TEXT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TEXT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_TEXT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  exists = abap_false.  &quot; No implementation of existence check

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  TYPES: BEGIN OF ty_text,
           tdobject TYPE stxh-tdobject,
           tdname   TYPE stxh-tdname,
           tdid     TYPE stxh-tdid,
           tdspras  TYPE stxh-tdspras,
           activity TYPE e071-activity,
         END OF ty_text.

  DATA: lv_str     TYPE string,
        lv_objtype TYPE string,

        lt_lines TYPE tline_tab,

        lo_text_node    TYPE REF TO if_ixml_element,
        lo_datarow_node TYPE REF TO if_ixml_element,

        ls_text      TYPE ty_text.

  FIELD-SYMBOLS: &lt;fs_lines&gt; LIKE LINE OF lt_lines.

* Get the object type and name
  lv_objtype = me-&gt;getobjecttype( ).

* Read text from database
  SPLIT objname AT &apos;,&apos; INTO ls_text-tdobject ls_text-tdname ls_text-tdid ls_text-tdspras.
  CLEAR ls_text-activity.

  CALL FUNCTION &apos;READ_TEXT&apos;
    EXPORTING
      id                      = ls_text-tdid
      language                = ls_text-tdspras
      name                    = ls_text-tdname
      object                  = ls_text-tdobject
    TABLES
      lines                   = lt_lines
    EXCEPTIONS
      id                      = 1
      language                = 2
      name                    = 3
      not_found               = 4
      object                  = 5
      reference_check         = 6
      wrong_access_to_archive = 7
      OTHERS                  = 8.

  IF sy-subrc &lt;&gt; 0.
    lv_str = `READ_TEXT error`.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;error_message
                msg    = lv_str.
  ENDIF.

* Creates the TEXT root node
  lo_text_node = xmldoc-&gt;create_element( lv_objtype ).

  me-&gt;setattributesfromstructure( node      = lo_text_node
                                  structure = ls_text  ).

* Save text to XML document
  LOOP AT lt_lines ASSIGNING &lt;fs_lines&gt;.

* Creates the DataRow node
    lo_datarow_node = xmldoc-&gt;create_element( `DataRow` ).
    me-&gt;setattributesfromstructure( node      = lo_datarow_node
                                    structure = &lt;fs_lines&gt;  ).
    lo_text_node-&gt;append_child( lo_datarow_node ).

  ENDLOOP.

  xmldoc-&gt;append_child( lo_text_node ).

  ixmldocument = xmldoc.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  TYPES: BEGIN OF ty_text,
           tdobject TYPE stxh-tdobject,
           tdname   TYPE stxh-tdname,
           tdid     TYPE stxh-tdid,
           tdspras  TYPE stxh-tdspras,
           activity TYPE e071-activity,
         END OF ty_text.

  DATA: lo_text_node        TYPE REF TO if_ixml_element,
        lo_datarow_node     TYPE REF TO if_ixml_element,
        lo_datarow_filter   TYPE REF TO if_ixml_node_filter,
        lo_datarow_iterator TYPE REF TO if_ixml_node_iterator,

        ls_text    TYPE ty_text,
        ls_datarow TYPE tline,

        ls_header TYPE thead,

        lt_lines TYPE tline_tab,

        ls_ko200 TYPE ko200,

        lv_objtype TYPE string,

        lv_str TYPE string.

* Get object type
  lv_objtype = getobjecttype( ).

* Save the XML document object
  xmldoc = ixmldocument.

* Get root node for TEXT object
  lo_text_node = xmldoc-&gt;find_from_name( lv_objtype ).

* Get text attributes from XML
  me-&gt;getstructurefromattributes(
          EXPORTING  node      = lo_text_node
          CHANGING   structure = ls_text ).

* Returns the name of the object
  CONCATENATE ls_text-tdobject ls_text-tdname ls_text-tdid ls_text-tdspras
    INTO name SEPARATED BY &apos;,&apos;.

* Prepare for text saving
  CALL FUNCTION &apos;INIT_TEXT&apos;
    EXPORTING
      id       = ls_text-tdid
      language = ls_text-tdspras
      name     = ls_text-tdname
      object   = ls_text-tdobject
    IMPORTING
      header   = ls_header
    TABLES
      lines    = lt_lines
    EXCEPTIONS
      id       = 1
      language = 2
      name     = 3
      object   = 4
      OTHERS   = 5.

  lv_str = `INIT_TEXT error`.
  RAISE EXCEPTION TYPE zcx_saplink
    EXPORTING
      textid = zcx_saplink=&gt;error_message
      msg    = lv_str.

* Create the filter to loop thru all DataRow entries in document
  lo_datarow_filter = lo_text_node-&gt;create_filter_name( `DataRow` ).

* Get an iterator to be used to cycle thru all occurrencies of DataRow entries
  lo_datarow_iterator = lo_text_node-&gt;create_iterator_filtered( lo_datarow_filter ).

* Loop thru all entries that make up the TEXT
  lo_datarow_node ?= lo_datarow_iterator-&gt;get_next( ).
  WHILE lo_datarow_node IS BOUND.

* Get table name from XML
    me-&gt;getstructurefromattributes(
            EXPORTING  node      = lo_datarow_node
            CHANGING   structure = ls_datarow ).

* Save all text lines
    APPEND ls_datarow TO lt_lines.

* Get next DataRow entry
    lo_datarow_node ?= lo_datarow_iterator-&gt;get_next( ).

  ENDWHILE.

* Save text to database
  CALL FUNCTION &apos;SAVE_TEXT&apos;
    EXPORTING
      header   = ls_header
    TABLES
      lines    = lt_lines
    EXCEPTIONS
      id       = 1
      language = 2
      name     = 3
      object   = 4
      OTHERS   = 5.

  lv_str = `SAVE_TEXT error`.
  RAISE EXCEPTION TYPE zcx_saplink
    EXPORTING
      textid = zcx_saplink=&gt;error_message
      msg    = lv_str.

* Attach inserted entries to a request
  ls_ko200-pgmid     = &apos;R3TR&apos;.
  ls_ko200-object    = lv_objtype.
  ls_ko200-obj_name  = name.
  CLEAR ls_ko200-objfunc.
  ls_ko200-activity  = ls_text-activity.
  ls_ko200-operation = &apos;I&apos;.

  IF zsaplink_tools=&gt;add_to_request( is_ko200  = ls_ko200 ) &lt;&gt; 0.
    lv_str = `Error while attaching table entries to the request`.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_str.
  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  DATA: v_msg TYPE string.

  v_msg = `Operation not implemented`.
  RAISE EXCEPTION TYPE zcx_saplink
    EXPORTING
      textid = zcx_saplink=&gt;error_message
      msg = v_msg.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  objecttype = &apos;TEXT&apos;.  &quot;Selected tables contents

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_SOBJ" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Data Dictionary Data Elements" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_SOBJ" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_SOBJ" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SOBJ" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SOBJ" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SOBJ" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_SOBJ" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Lino Lopes
*      lino@hr.com.br

    DATA: l_name TYPE oj_name.

    exists = abap_false.

    l_name = objname.

    CALL FUNCTION &apos;SWO_OBJTYPE_EXIST&apos;
      EXPORTING
        objtype           = l_name
      EXCEPTIONS
        objtype_not_found = 1
        OTHERS            = 2.

    IF sy-subrc = 0.
      exists = abap_true.
    ENDIF.

  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Lino Lopes
*      lino@hr.com.br

    DEFINE create_child_table.
      select  *
        into  table lt_&amp;2
        from  &amp;2
        where &amp;1 = _sobjname.
      loop at lt_&amp;2 assigning &lt;fs_&amp;2&gt;.
        child_node = xmldoc-&gt;create_element( &amp;3 ).
        setattributesfromstructure( node = child_node structure = &lt;fs_&amp;2&gt; ).
        rootnode-&gt;append_child( child_node ).
      endloop.
    END-OF-DEFINITION.

    DATA: ls_basedata TYPE swotbasdat,
          lt_swotdv   TYPE STANDARD TABLE OF swotdv,
          lt_swottv   TYPE STANDARD TABLE OF swottv,
          lt_swotdq   TYPE STANDARD TABLE OF swotdq,
          lt_swottq   TYPE STANDARD TABLE OF swottq,
          lt_swotlv   TYPE STANDARD TABLE OF swotlv,
          lt_swotlq   TYPE STANDARD TABLE OF swotlq,
          lt_swotdi   TYPE STANDARD TABLE OF swotdi,
          lt_swotdo   TYPE STANDARD TABLE OF swotdo,
          lt_swotto   TYPE STANDARD TABLE OF swotto,
          lt_swotoo   TYPE STANDARD TABLE OF swotoo,
          lt_swotip   TYPE STANDARD TABLE OF swotip,
          lt_swot21   TYPE STANDARD TABLE OF swot21.

    FIELD-SYMBOLS: &lt;fs_swotdv&gt; LIKE LINE OF lt_swotdv,
                   &lt;fs_swottv&gt; LIKE LINE OF lt_swottv,
                   &lt;fs_swotdq&gt; LIKE LINE OF lt_swotdq,
                   &lt;fs_swottq&gt; LIKE LINE OF lt_swottq,
                   &lt;fs_swotlv&gt; LIKE LINE OF lt_swotlv,
                   &lt;fs_swotlq&gt; LIKE LINE OF lt_swotlq,
                   &lt;fs_swotdi&gt; LIKE LINE OF lt_swotdi,
                   &lt;fs_swotdo&gt; LIKE LINE OF lt_swotdo,
                   &lt;fs_swotto&gt; LIKE LINE OF lt_swotto,
                   &lt;fs_swotoo&gt; LIKE LINE OF lt_swotoo,
                   &lt;fs_swotip&gt; LIKE LINE OF lt_swotip,
                   &lt;fs_swot21&gt; LIKE LINE OF lt_swot21.

*xml nodes
    DATA: rootnode    TYPE REF TO if_ixml_element,
          child_node  TYPE REF TO if_ixml_element,
          _sobjname   TYPE        oj_name,
          _objtype    TYPE        string,
          checkexists TYPE        flag,
          lv_str      TYPE        string,
          lo_progdoc  TYPE REF TO zsaplink_program,
          lo_xmldoc   TYPE REF TO if_ixml_document.

    checkexists = checkexists( ).
    IF checkexists = abap_false.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;not_found.
    ENDIF.

    _sobjname = objname.

* Create parent node
    _objtype = getobjecttype( ).
    rootnode = xmldoc-&gt;create_element( _objtype ).

    CALL FUNCTION &apos;SWO_BASEDATA_IMPORT&apos;
      EXPORTING
        objtype           = _sobjname
      IMPORTING
        basedata          = ls_basedata
      EXCEPTIONS
        objtype_not_found = 1
        OTHERS            = 2.

    setattributesfromstructure( node = rootnode structure = ls_basedata ).

* Create all child nodes of all tables

    create_child_table:  objtype swotdv `SWOTDV`,
                         objtype swottv `SWOTTV`,
                         objtype swotdq `SWOTDQ`,
                         objtype swottq `SWOTTQ`,
                        lobjtype swotlv `SWOTLV`,
                        lobjtype swotlq `SWOTLQ`,
                         objtype swotdi `SWOTDI`,
                         objtype swotdo `SWOTDO`,
                         objtype swotto `SWOTTO`,
                         objtype swotoo `SWOTOO`,
                         objtype swotip `SWOTIP`,
                         objtype swot21 `SWOT21`.

    IF ls_basedata-progname IS NOT INITIAL.

      lv_str = ls_basedata-progname.
      CREATE OBJECT lo_progdoc
        EXPORTING
          name = lv_str.

      lo_xmldoc = lo_progdoc-&gt;createixmldocfromobject( ).

      child_node = lo_xmldoc-&gt;get_root_element( ).
      rootnode-&gt;append_child( child_node ).

      FREE lo_progdoc.

    ENDIF.

*\--------------------------------------------------------------------/
    xmldoc-&gt;append_child( rootnode ).
    ixmldocument = xmldoc.

  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Lino Lopes
*      lino@hr.com.br

    DEFINE create_child_entries.
      free: filter, iterator, child_node.
      refresh lt_&amp;1.
      filter = xmldoc-&gt;create_filter_name( &amp;2 ).
      iterator = xmldoc-&gt;create_iterator_filtered( filter ).
      child_node ?= iterator-&gt;get_next( ).
      while child_node is bound.
        getstructurefromattributes( exporting
                                      node = child_node
                                    changing
                                      structure = ls_&amp;1 ).
        append ls_&amp;1 to lt_&amp;1.
        child_node ?= iterator-&gt;get_next( ).
      endwhile.
    END-OF-DEFINITION.

    DEFINE update_database_table.
      delete &amp;1 from table lt_&amp;1.
      insert &amp;1 from table lt_&amp;1.
    END-OF-DEFINITION.

    DATA: ls_basedata TYPE                   swotbasdat,
          lt_swotdv   TYPE STANDARD TABLE OF swotdv,
          lt_swottv   TYPE STANDARD TABLE OF swottv,
          lt_swotdq   TYPE STANDARD TABLE OF swotdq,
          lt_swottq   TYPE STANDARD TABLE OF swottq,
          lt_swotlv   TYPE STANDARD TABLE OF swotlv,
          lt_swotlq   TYPE STANDARD TABLE OF swotlq,
          lt_swotdi   TYPE STANDARD TABLE OF swotdi,
          lt_swotdo   TYPE STANDARD TABLE OF swotdo,
          lt_swotto   TYPE STANDARD TABLE OF swotto,
          lt_swotoo   TYPE STANDARD TABLE OF swotoo,
          lt_swotip   TYPE STANDARD TABLE OF swotip,
          lt_swot21   TYPE STANDARD TABLE OF swot21.

    DATA: ls_swotdv LIKE LINE OF lt_swotdv,
          ls_swottv LIKE LINE OF lt_swottv,
          ls_swotdq LIKE LINE OF lt_swotdq,
          ls_swottq LIKE LINE OF lt_swottq,
          ls_swotlv LIKE LINE OF lt_swotlv,
          ls_swotlq LIKE LINE OF lt_swotlq,
          ls_swotdi LIKE LINE OF lt_swotdi,
          ls_swotdo LIKE LINE OF lt_swotdo,
          ls_swotto LIKE LINE OF lt_swotto,
          ls_swotoo LIKE LINE OF lt_swotoo,
          ls_swotip LIKE LINE OF lt_swotip,
          ls_swot21 LIKE LINE OF lt_swot21.

    FIELD-SYMBOLS: &lt;fs_swotdv&gt; LIKE LINE OF lt_swotdv,
                   &lt;fs_swotdq&gt; LIKE LINE OF lt_swotdq,
                   &lt;fs_swotlv&gt; LIKE LINE OF lt_swotlv,
                   &lt;fs_swotlq&gt; LIKE LINE OF lt_swotlq,
                   &lt;fs_swotdi&gt; LIKE LINE OF lt_swotdi.

*xml nodes
    DATA: rootnode   TYPE REF TO if_ixml_element,
          child_node TYPE REF TO if_ixml_element,
          filter     TYPE REF TO if_ixml_node_filter,
          iterator   TYPE REF TO if_ixml_node_iterator.

    DATA: _devclass   TYPE        devclass,
          _objtype    TYPE        string,
          _sobjname   TYPE        oj_name,
          _datum      TYPE        sy-datum,
          _uzeit      TYPE        sy-uzeit,
          _korrnum    TYPE        e070-trkorr,
          checkexists TYPE        flag,
          lv_str      TYPE        string,
          lo_progdoc  TYPE REF TO zsaplink_program,
          ls_return   TYPE        swotreturn.

    IF devclass &lt;&gt; &apos;$TMP&apos;.
      _devclass = devclass.
    ENDIF.
    _objtype = getobjecttype( ).
    _datum = sy-datum.
    _uzeit = sy-uzeit.

    xmldoc = ixmldocument.
    rootnode = xmldoc-&gt;find_from_name( _objtype ).

* load root node

    getstructurefromattributes( EXPORTING
                                  node = rootnode
                                CHANGING
                                  structure = ls_basedata ).

    ls_basedata-resp_user = ls_basedata-crea_user = ls_basedata-author = sy-uname.
    CLEAR: ls_basedata-chan_user, ls_basedata-actv_user, ls_basedata-rel_user.
    ls_basedata-crea_date = _datum.
    CLEAR: ls_basedata-chan_date, ls_basedata-actv_date, ls_basedata-rel_date.
    ls_basedata-crea_time = _uzeit.
    CLEAR: ls_basedata-chan_time, ls_basedata-actv_time.
    ls_basedata-crea_rel = ls_basedata-version = sy-saprl.
    CLEAR: ls_basedata-chan_rel, ls_basedata-rel_rel.
    ls_basedata-srcsystem = sy-sysid.

    objname = _sobjname = ls_basedata-objtype.

    checkexists = checkexists( ).
    IF checkexists IS NOT INITIAL.
      IF overwrite IS INITIAL.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;system_error.
      ELSE.
        deleteobject( ).
      ENDIF.
    ENDIF.

    CALL FUNCTION &apos;RS_CORR_INSERT&apos;
      EXPORTING
        mode               = &apos;I&apos;
        object             = _sobjname
        object_class       = &apos;SOBJ&apos;
        global_lock        = abap_true
        devclass           = _devclass
        master_language    = sy-langu
      IMPORTING
        devclass           = _devclass
        korrnum            = _korrnum
      EXCEPTIONS
        cancelled          = 01
        permission_failure = 02.

    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;not_authorized.
    ENDIF.

    IF ls_basedata-progname IS NOT INITIAL.

      CALL FUNCTION &apos;RS_CORR_INSERT&apos;
        EXPORTING
          mode                = &apos;I&apos;
          object              = ls_basedata-progname
          object_class        = &apos;PROG&apos;
          global_lock         = abap_true
          devclass            = _devclass
          korrnum             = _korrnum
          master_language     = sy-langu
        IMPORTING
          devclass            = _devclass
          korrnum             = _korrnum
        EXCEPTIONS
          cancelled           = 1
          permission_failure  = 2
          unknown_objectclass = 3
          OTHERS              = 4.

      IF sy-subrc &lt;&gt; 0.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;not_authorized.
      ENDIF.

    ENDIF.

    ls_basedata-devclass = _devclass.
    ls_basedata-korrnum  = _korrnum.

    CALL FUNCTION &apos;SWO_OBJTYPE_INSERT&apos;
      EXPORTING
        basedata              = ls_basedata
      EXCEPTIONS
        application_not_found = 1
        name_error            = 2
        objtype_exists        = 3
        objectname_exists     = 4
        parent_error          = 5
        transport_error       = 6
        objtypeclass_error    = 7
        program_exists        = 8
        parent_devclass_error = 9
        OTHERS                = 10.

    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;system_error.
    ENDIF.

    UPDATE tojtb SET active = abap_true WHERE name = _sobjname.

* load all child nodes

    create_child_entries: swotdv `SWOTDV`,
                          swottv `SWOTTV`,
                          swotdq `SWOTDQ`,
                          swottq `SWOTTQ`,
                          swotlv `SWOTLV`,
                          swotlq `SWOTLQ`,
                          swotdi `SWOTDI`,
                          swotdo `SWOTDO`,
                          swotto `SWOTTO`,
                          swotoo `SWOTOO`,
                          swotip `SWOTIP`,
                          swot21 `SWOT21`.

* fix creation release

    LOOP AT lt_swotdv ASSIGNING &lt;fs_swotdv&gt;.
      &lt;fs_swotdv&gt;-crea_rel = sy-saprl.
    ENDLOOP.

    LOOP AT lt_swotdq ASSIGNING &lt;fs_swotdq&gt;.
      &lt;fs_swotdq&gt;-crea_rel = sy-saprl.
    ENDLOOP.

    LOOP AT lt_swotlv ASSIGNING &lt;fs_swotlv&gt;.
      READ TABLE lt_swotdv TRANSPORTING NO FIELDS WITH KEY objtype = &lt;fs_swotlv&gt;-lobjtype
                                                           verb    = &lt;fs_swotlv&gt;-verb.
      IF sy-subrc = 0.
        &lt;fs_swotdv&gt;-crea_rel = sy-saprl.
      ENDIF.
    ENDLOOP.

    LOOP AT lt_swotlq ASSIGNING &lt;fs_swotlq&gt;.
      READ TABLE lt_swotdq TRANSPORTING NO FIELDS WITH KEY objtype   = &lt;fs_swotlq&gt;-lobjtype
                                                           verb      = &lt;fs_swotlq&gt;-verb
                                                           paramtype = &lt;fs_swotlq&gt;-paramtype.
      IF sy-subrc = 0.
        &lt;fs_swotdv&gt;-crea_rel = sy-saprl.
      ENDIF.
    ENDLOOP.

    LOOP AT lt_swotdi ASSIGNING &lt;fs_swotdi&gt;.
      IF &lt;fs_swotdi&gt;-crea_rel IS NOT INITIAL.
        &lt;fs_swotdi&gt;-crea_rel = sy-saprl.
      ENDIF.
    ENDLOOP.

    update_database_table: swotdv,
                           swottv,
                           swotdq,
                           swottq,
                           swotlv,
                           swotlq,
                           swotdi,
                           swotdo,
                           swotto,
                           swotoo,
                           swotip,
                           swot21.

    IF ls_basedata-progname IS NOT INITIAL.
      lv_str = ls_basedata-progname.
      CREATE OBJECT lo_progdoc
        EXPORTING
          name = lv_str.
      lo_progdoc-&gt;createobjectfromixmldoc( ixmldocument = ixmldocument
                                           devclass = _devclass
                                           overwrite = overwrite ).
      FREE lo_progdoc.
    ENDIF.

*\--------------------------------------------------------------------/

    name = objname.

  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Lino Lopes
*      lino@hr.com.br

    DATA: l_name TYPE swo_objtyp.

    l_name = objname.

    CALL FUNCTION &apos;SWO_OBJTYPE_DELETE&apos;
      EXPORTING
        objtype            = l_name
        program            = abap_true
      EXCEPTIONS
        objtype_not_found  = 1
        objtype_referenced = 2
        old_release        = 3
        parent_not_found   = 4
        root_objtype       = 5
        objtype_delegated  = 6
        OTHERS             = 7.

  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Lino Lopes
*      lino@hr.com.br

    objecttype = &apos;SOBJ&apos;.  &quot;BOR

  ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_TEXT_POOL" VERSION="1" LANGU="D" DESCRIPT="SapLink Class Installer" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZSAPLINK_TEXT_POOL" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_TEXT_POOL" TYPEGROUP="SEOP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_TEXT_POOL" TYPEGROUP="SEOR" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_TEXT_POOL" TYPEGROUP="SEOS" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_TEXT_POOL" TYPEGROUP="SEOT" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_TEXT_POOL" TYPEGROUP="SEOX" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <forwardDeclaration>SEOP</forwardDeclaration>
  <forwardDeclaration>SEOR</forwardDeclaration>
  <forwardDeclaration>SEOS</forwardDeclaration>
  <forwardDeclaration>SEOT</forwardDeclaration>
  <forwardDeclaration>SEOX</forwardDeclaration>
  <inheritance CLSNAME="ZSAPLINK_TEXT_POOL" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_TEXT_POOL" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TEXT_POOL" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TEXT_POOL" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TEXT_POOL" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_TEXT_POOL" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD checkexists.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  exists = abap_false.  &quot; No implementation of existence check

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createixmldocfromobject.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  TYPES: BEGIN OF ty_txts,
           name TYPE stxh-tdname,
         END OF ty_txts.

  TYPES: BEGIN OF ty_text,
           tdobject TYPE stxh-tdobject,
           tdname   TYPE stxh-tdname,
           tdid     TYPE stxh-tdid,
           tdspras  TYPE stxh-tdspras,
           activity TYPE e071-activity,
         END OF ty_text.

  DATA: lv_tfields TYPE string VALUE `TDOBJECT TDNAME TDID TDSPRAS`,
        lv_where   TYPE string,
        lv_str     TYPE string,
        lv_objtype TYPE string,

        lt_tfields TYPE STANDARD TABLE OF string,
        lt_text    TYPE STANDARD TABLE OF ty_text,
        lt_lines   TYPE tline_tab,
        lt_ko200   TYPE tredt_objects,

        lo_txts_node    TYPE REF TO if_ixml_element,
        lo_text_node    TYPE REF TO if_ixml_element,
        lo_datarow_node TYPE REF TO if_ixml_element,

        ls_txts      TYPE ty_txts,
        ls_text      TYPE ty_text.

  FIELD-SYMBOLS: &lt;fs_tfields&gt; LIKE LINE OF lt_tfields,
                 &lt;fs_text&gt;    LIKE LINE OF lt_text,
                 &lt;fs_lines&gt;   LIKE LINE OF lt_lines.

* Get the object type and name
  lv_objtype = me-&gt;getobjecttype( ).

* Read text from database
  SPLIT objname AT &apos;,&apos; INTO ls_text-tdobject ls_text-tdname ls_text-tdid ls_text-tdspras.

* Remove from the fields list all fields informed as &quot;*&quot;
  IF ls_text-tdobject = &apos;*&apos;.
    REPLACE FIRST OCCURRENCE OF `TDOBJECT` IN lv_tfields WITH ``.
  ENDIF.
  IF ls_text-tdname = &apos;*&apos;.
    REPLACE FIRST OCCURRENCE OF `TDNAME` IN lv_tfields WITH ``.
  ENDIF.
  IF ls_text-tdid = &apos;*&apos;.
    REPLACE FIRST OCCURRENCE OF `TDID` IN lv_tfields WITH ``.
  ENDIF.
  IF ls_text-tdspras = &apos;*&apos;.
    REPLACE FIRST OCCURRENCE OF `TDSPRAS` IN lv_tfields WITH ``.
  ENDIF.
  CONDENSE lv_tfields.

* Build the WHERE clause used to retrieve the TEXT names
  SPLIT lv_tfields AT space INTO TABLE lt_tfields.

  LOOP AT lt_tfields ASSIGNING &lt;fs_tfields&gt;.

    CONCATENATE `LS_TEXT-` &lt;fs_tfields&gt; INTO lv_str.
    CONCATENATE lv_where `AND` &lt;fs_tfields&gt; `=` lv_str INTO lv_where
      SEPARATED BY space.

  ENDLOOP.

* Get rid of the &quot; AND &quot; at the beginning of the WHERE clause
  SHIFT lv_where LEFT BY 5 PLACES.

* Get all TEXT entries from database
  SELECT  tdobject tdname tdid tdspras
    INTO  TABLE lt_text
    FROM  stxh
    WHERE (lv_where).

  IF sy-subrc &lt;&gt; 0.
    lv_str = `No TEXT objects found from TXTS supplied`.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_str.
  ENDIF.

* Create the TXTS root node
  lo_txts_node = xmldoc-&gt;create_element( lv_objtype ).
  ls_txts-name = objname.

  me-&gt;setattributesfromstructure( node      = lo_txts_node
                                  structure = ls_txts  ).

  LOOP AT lt_text ASSIGNING &lt;fs_text&gt;.

    REFRESH lt_lines.
    CALL FUNCTION &apos;READ_TEXT&apos;
      EXPORTING
        id                      = &lt;fs_text&gt;-tdid
        language                = &lt;fs_text&gt;-tdspras
        name                    = &lt;fs_text&gt;-tdname
        object                  = &lt;fs_text&gt;-tdobject
      TABLES
        lines                   = lt_lines
      EXCEPTIONS
        id                      = 1
        language                = 2
        name                    = 3
        not_found               = 4
        object                  = 5
        reference_check         = 6
        wrong_access_to_archive = 7
        OTHERS                  = 8.

    IF sy-subrc &lt;&gt; 0.
      lv_str = `READ_TEXT error`.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = lv_str.
    ENDIF.

* Creates the TEXT node
    lo_text_node = xmldoc-&gt;create_element( `TEXT` ).
    CLEAR &lt;fs_text&gt;-activity.
    me-&gt;setattributesfromstructure( node      = lo_text_node
                                    structure = &lt;fs_text&gt;  ).

* Save text to XML document
    LOOP AT lt_lines ASSIGNING &lt;fs_lines&gt;.

* Creates the DataRow node
      lo_datarow_node = xmldoc-&gt;create_element( `DataRow` ).
      me-&gt;setattributesfromstructure( node      = lo_datarow_node
                                      structure = &lt;fs_lines&gt;  ).
      lo_text_node-&gt;append_child( lo_datarow_node ).

    ENDLOOP.

    lo_txts_node-&gt;append_child( lo_text_node ).

  ENDLOOP.

  xmldoc-&gt;append_child( lo_txts_node ).

  ixmldocument = xmldoc.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createobjectfromixmldoc.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  TYPES: BEGIN OF ty_txts,
           name TYPE stxh-tdname,
         END OF ty_txts.

  TYPES: BEGIN OF ty_text,
           tdobject TYPE stxh-tdobject,
           tdname   TYPE stxh-tdname,
           tdid     TYPE stxh-tdid,
           tdspras  TYPE stxh-tdspras,
           activity TYPE e071-activity,
         END OF ty_text.

  DATA: lo_txts_node TYPE REF TO if_ixml_element,

        lo_text_node     TYPE REF TO if_ixml_element,
        lo_text_filter   TYPE REF TO if_ixml_node_filter,
        lo_text_iterator TYPE REF TO if_ixml_node_iterator,

        lo_datarow_node     TYPE REF TO if_ixml_element,
        lo_datarow_filter   TYPE REF TO if_ixml_node_filter,
        lo_datarow_iterator TYPE REF TO if_ixml_node_iterator,

        ls_txts    TYPE ty_txts,
        ls_text    TYPE ty_text,
        ls_datarow TYPE tline,

        ls_header TYPE thead,

        lt_lines TYPE tline_tab,

        ls_ko200 TYPE ko200,

        lv_objtype TYPE string,

        lv_str TYPE string.

* Get object type
  lv_objtype = getobjecttype( ).

* Save the XML document object
  xmldoc = ixmldocument.

* Get root node for TXTS object
  lo_txts_node = xmldoc-&gt;find_from_name( lv_objtype ).

* Get txts attributes from XML
  me-&gt;getstructurefromattributes(
          EXPORTING  node      = lo_txts_node
          CHANGING   structure = ls_txts ).

* Returns the name of the object
  name = ls_txts-name.

* Create the filter to loop thru all TEXT entries in document
  lo_text_filter = lo_txts_node-&gt;create_filter_name( `TEXT` ).

* Get an iterator to be used to cycle thru all occurrencies of DataRow entries
  lo_text_iterator = lo_txts_node-&gt;create_iterator_filtered( lo_text_filter ).

* Loop thru all TEXT entries
  lo_text_node ?= lo_text_iterator-&gt;get_next( ).
  WHILE lo_text_node IS BOUND.

* Get TEXT from XML
    me-&gt;getstructurefromattributes(
            EXPORTING  node      = lo_text_node
            CHANGING   structure = ls_text ).

* Prepare for text saving
    CALL FUNCTION &apos;INIT_TEXT&apos;
      EXPORTING
        id       = ls_text-tdid
        language = ls_text-tdspras
        name     = ls_text-tdname
        object   = ls_text-tdobject
      IMPORTING
        header   = ls_header
      TABLES
        lines    = lt_lines
      EXCEPTIONS
        id       = 1
        language = 2
        name     = 3
        object   = 4
        OTHERS   = 5.

    IF sy-subrc &lt;&gt; 0.
      lv_str = `INIT_TEXT error`.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = lv_str.
    ENDIF.

* Create the filter to loop thru all DataRow entries in document
    lo_datarow_filter = lo_text_node-&gt;create_filter_name( `DataRow` ).

* Get an iterator to be used to cycle thru all occurrencies of DataRow entries
    lo_datarow_iterator = lo_text_node-&gt;create_iterator_filtered( lo_datarow_filter ).

* Loop thru all tables (TABU entries) that make up the View
    lo_datarow_node ?= lo_datarow_iterator-&gt;get_next( ).
    WHILE lo_datarow_node IS BOUND.

* Get table name from XML
      me-&gt;getstructurefromattributes(
              EXPORTING  node      = lo_datarow_node
              CHANGING   structure = ls_datarow ).

* Save all text lines
      APPEND ls_datarow TO lt_lines.

* Get next DataRow entry
      lo_datarow_node ?= lo_datarow_iterator-&gt;get_next( ).

    ENDWHILE.

* Save text to database
    CALL FUNCTION &apos;SAVE_TEXT&apos;
      EXPORTING
        header   = ls_header
      TABLES
        lines    = lt_lines
      EXCEPTIONS
        id       = 1
        language = 2
        name     = 3
        object   = 4
        OTHERS   = 5.

    IF sy-subrc &lt;&gt; 0.
      lv_str = `SAVE_TEXT error`.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = lv_str.
    ENDIF.

* Attach inserted entries to a request
    ls_ko200-pgmid     = &apos;R3TR&apos;.
    ls_ko200-object    = &apos;TEXT&apos;.
    CONCATENATE ls_text-tdobject ls_text-tdname ls_text-tdid ls_text-tdspras
      INTO ls_ko200-obj_name SEPARATED BY &apos;,&apos;.
    CLEAR ls_ko200-objfunc.
    ls_ko200-activity  = ls_text-activity.
    ls_ko200-operation = &apos;I&apos;.

    IF zsaplink_tools=&gt;add_to_request( is_ko200  = ls_ko200 ) &lt;&gt; 0.
      lv_str = `Error while attaching table entries to the request`.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = lv_str.
    ENDIF.

* Get next TEXT entry
    lo_text_node ?= lo_text_iterator-&gt;get_next( ).

  ENDWHILE.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD deleteobject.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  DATA: v_msg TYPE string.

  v_msg = `Operation not implemented`.
  RAISE EXCEPTION TYPE zcx_saplink
    EXPORTING
      textid = zcx_saplink=&gt;error_message
      msg    = v_msg.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD getobjecttype.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  objecttype = &apos;TXTS&apos;.  &quot;Selected tables contents

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_DOCT" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Documentation" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_DOCT" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_DOCT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DOCT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DOCT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DOCT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_DOCT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS .
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com
  DATA xdokhl TYPE dokhl.
  DATA xdoc_object(62) TYPE c.
  DATA xdocu_id TYPE dokhl-id.
  DATA xdocu_obj TYPE dokhl-object.

  xdoc_object = objname.
*  xdocu_id  = xdoc_object(2).
*  xdocu_obj = xdoc_object+2(60).
  xdocu_id = getdocid( ).
  xdocu_obj = xdoc_object.

  CLEAR xdokhl.
  SELECT SINGLE * INTO xdokhl FROM dokhl
             WHERE id = xdocu_id
               AND object = xdocu_obj
               AND dokstate = &apos;A&apos;.
  IF sy-subrc =  0.
    exists = &apos;X&apos;.
  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT .
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com
*
*      Changed to export normal Text ID &apos;TX&apos;, OBJID &apos;DOCT&apos;.
*      + Multilanguage Support
*      Achim von Lowtzow (lowtzow@gmx.de)

  DATA root_node     TYPE REF TO if_ixml_element.
  DATA entry_node     TYPE REF TO if_ixml_element.
  DATA txtlines_node TYPE REF TO if_ixml_element.
  DATA rc            TYPE sysubrc.
  DATA _objtype      TYPE string.

  DATA: BEGIN OF xdokhl01,
        objname(62) TYPE c,
        id          TYPE dokhl-id,
        object      TYPE dokhl-object,
        END OF xdokhl01.

  DATA: BEGIN OF xdokhl02,
        langu       type sylangu,
        typ         TYPE dokhl-typ,
        dokversion  TYPE dokhl-dokversion,
        END OF xdokhl02.

  DATA ilines TYPE TABLE OF tline.
  DATA xlines LIKE LINE OF ilines.

  DATA _docuname TYPE e071-obj_name.
  DATA xdocu_id  TYPE dokhl-id.
  DATA xdocu_obj TYPE dokhl-object.

  _docuname = objname.

* Separate id and object from combined object name
*  xdocu_id  = xdoc_object(2).
*  xdocu_obj = xdoc_object+2(60).
  xdocu_id = getdocid( ).
  xdocu_obj = _docuname.

  xdokhl01-objname = _docuname.
  xdokhl01-id = getdocid( ).
  xdokhl01-object = _docuname.

* Create parent node
  _objtype  = getobjecttype( ).
  root_node = xmldoc-&gt;create_element( _objtype ).
  me-&gt;setattributesfromstructure( node = root_node structure = xdokhl01  ).

* Check against database
  CLEAR xdokhl02.
  SELECT langu typ dokversion
        INTO (xdokhl02-langu, xdokhl02-typ, xdokhl02-dokversion)
           FROM dokhl
             WHERE id = xdokhl01-id
                AND object = xdokhl01-object
                and dokstate = &apos;A&apos;.


  entry_node = xmldoc-&gt;create_element( &apos;DocEntry&apos; ).
  me-&gt;setattributesfromstructure( node = entry_node structure = xdokhl02  ).


* Read the documentation text
  CALL FUNCTION &apos;DOCU_READ&apos;
    EXPORTING
      id      = xdokhl01-id
      object  = xdokhl01-object
      langu   = xdokhl02-langu
      typ     = xdokhl02-typ
      version = xdokhl02-dokversion
    TABLES
      line    = ilines.

* Write records to XML node
  LOOP AT ilines INTO xlines.
    txtlines_node = xmldoc-&gt;create_element( `TextLines` ).
    me-&gt;setattributesfromstructure( node = txtlines_node structure = xlines ).
    rc = entry_node-&gt;append_child( txtlines_node ).
  ENDLOOP.

  rc = root_node-&gt;append_child( entry_node ).

  endselect.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
     EXPORTING textid = zcx_saplink=&gt;error_message
               msg    = `Documentation object not found, use full ` &amp;
                        `object name including ID and Object(example DTZTEST`.
  ENDIF.
* Add node
  rc = xmldoc-&gt;append_child( root_node ).
  ixmldocument = xmldoc.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC .
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

  DATA root_node        TYPE REF TO if_ixml_element.
  DATA entry_node     TYPE REF TO if_ixml_element.
  DATA entry_filter   TYPE REF TO if_ixml_node_filter.
  DATA entry_iterator TYPE REF TO if_ixml_node_iterator.
  DATA txtline_node     TYPE REF TO if_ixml_element.
  DATA txtline_filter   TYPE REF TO if_ixml_node_filter.
  DATA txtline_iterator TYPE REF TO if_ixml_node_iterator.


  DATA: BEGIN OF xdokhl01,
       objname(62) TYPE c,
       id          TYPE dokhl-id,
       object      TYPE dokhl-object,
       END OF xdokhl01.

  DATA: BEGIN OF xdokhl02,
        langu       TYPE sylangu,
        typ         TYPE dokhl-typ,
        dokversion  TYPE dokhl-dokversion,
        END OF xdokhl02.

*  DATA: BEGIN OF xdokhl,
*        objname(62) TYPE c,
*        id          TYPE dokhl-id,
*        object      TYPE dokhl-object,
*        langu       TYPE sylangu,
*        typ         TYPE dokhl-typ,
*        dokversion  TYPE dokhl-dokversion,
*        END OF xdokhl.

  DATA: ilines  TYPE TABLE OF tline.
  DATA: entrylines LIKE TABLE OF xdokhl02.
  DATA: objname TYPE e071-obj_name.
  DATA _objtype TYPE string.

  FIELD-SYMBOLS: &lt;entrylines_wa&gt; LIKE LINE OF entrylines.
  FIELD-SYMBOLS: &lt;xlines_wa&gt; LIKE LINE OF ilines.

  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  root_node = xmldoc-&gt;find_from_name( _objtype ).

* Get Root
  me-&gt;getstructurefromattributes(
          EXPORTING  node      = root_node
          CHANGING   structure = xdokhl01 ).

  objname = xdokhl01-objname.

  DATA checkexists TYPE flag.
  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* Get Entries from XML
  FREE: entry_filter, entry_iterator, entry_node.
  entry_filter = xmldoc-&gt;create_filter_name( `DocEntry` ).
  entry_iterator = xmldoc-&gt;create_iterator_filtered( entry_filter ).
  entry_node ?= entry_iterator-&gt;get_next( ).
  WHILE entry_node IS NOT INITIAL.
*    APPEND INITIAL LINE TO entrylines ASSIGNING &lt;entrylines_wa&gt;.
    me-&gt;getstructurefromattributes(
            EXPORTING   node      = entry_node
            CHANGING    structure = xdokhl02 ).


* Get TextLines from XML
    FREE: txtline_filter, txtline_iterator, txtline_node.
    REFRESH: ilines.
    txtline_filter = xmldoc-&gt;create_filter_name( `TextLines` ).
    txtline_iterator = xmldoc-&gt;create_iterator_filtered( txtline_filter ).
    txtline_node ?= txtline_iterator-&gt;get_next( ).
    WHILE txtline_node IS NOT INITIAL.
      APPEND INITIAL LINE TO ilines ASSIGNING &lt;xlines_wa&gt;.
      me-&gt;getstructurefromattributes(
              EXPORTING   node      = txtline_node
              CHANGING    structure = &lt;xlines_wa&gt; ).
      txtline_node ?= txtline_iterator-&gt;get_next( ).
    ENDWHILE.



    CALL FUNCTION &apos;RS_ACCESS_PERMISSION&apos;
      EXPORTING
        global_lock              = &apos;X&apos;
        mode                     = &apos;INSERT&apos;
        object                   = objname
        object_class             = _objtype
      EXCEPTIONS
        canceled_in_corr         = 1
        enqueued_by_user         = 3
        enqueue_system_failure   = 4
        locked_by_author         = 5
        illegal_parameter_values = 6
        no_modify_permission     = 7
        no_show_permission       = 8
        permission_failure       = 9.

    IF sy-subrc &lt;&gt; 0.
      CASE sy-subrc.
        WHEN 7 OR 8 OR 9.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING
              textid = zcx_saplink=&gt;not_authorized.
        WHEN 5.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING
              textid = zcx_saplink=&gt;error_message
              msg = &apos;object locked&apos;.
        WHEN OTHERS.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING
              textid = zcx_saplink=&gt;system_error.
      ENDCASE.
    ENDIF.

    CALL FUNCTION &apos;RS_CORR_INSERT&apos;
      EXPORTING
        object              = objname
        object_class        = _objtype
        mode                = &apos;INSERT&apos;
        global_lock         = &apos;X&apos;
*     devclass            = devclass
        author              = sy-uname
        master_language     = sy-langu
      EXCEPTIONS
        cancelled           = 1
        permission_failure  = 2
        unknown_objectclass = 3.
    IF sy-subrc &lt;&gt; 0.
      CASE sy-subrc.
        WHEN 2.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING
              textid = zcx_saplink=&gt;not_authorized.
        WHEN OTHERS.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING
              textid = zcx_saplink=&gt;system_error.
      ENDCASE.
    ENDIF.

    CALL FUNCTION &apos;DOCU_UPD&apos;
      EXPORTING
        id       = xdokhl01-id
        object   = xdokhl01-object
        langu    = xdokhl02-langu
        typ      = xdokhl02-typ
        state    = &apos;A&apos;
      TABLES
        line     = ilines
      EXCEPTIONS
        ret_code = 1
        OTHERS   = 2.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE zcx_saplink
       EXPORTING textid = zcx_saplink=&gt;error_message
                 msg    = `Documentation object import failed`.
    ENDIF.

    entry_node ?= entry_iterator-&gt;get_next( ).
  ENDWHILE.

  name = objname.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT .
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com
  DATA xdokhl TYPE dokhl.
  DATA _docuname TYPE e071-obj_name.
  DATA xdocu_id  TYPE dokhl-id.
  DATA xdocu_obj TYPE dokhl-object.

  _docuname = objname.

*  xdocu_id  = _docuname(2).
*  xdocu_obj = _docuname+2(60).
  xdocu_id = getdocid( ).
  xdocu_obj = _docuname.

  CLEAR xdokhl.
  SELECT * INTO xdokhl
           FROM dokhl
             WHERE id = xdocu_id
               AND object = xdocu_obj
               AND dokstate = &apos;A&apos;.

    CALL FUNCTION &apos;DOCU_DEL&apos;
      EXPORTING
        id       = xdokhl-id
        langu    = xdokhl-langu
        object   = xdokhl-object
        typ      = xdokhl-typ
      EXCEPTIONS
        ret_code = 1
        OTHERS   = 2.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE zcx_saplink
       EXPORTING textid = zcx_saplink=&gt;error_message
                 msg    = `Error when deleting existing documentation object`.
    ENDIF.

  ENDSELECT.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_DOCT" CMPNAME="GETDOCID" VERSION="1" LANGU="D" DESCRIPT="returns the docid" EXPOSURE="1" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_DOCT" CMPNAME="GETDOCID" SCONAME="RETURN" VERSION="1" LANGU="D" DESCRIPT="Dokumentenklasse" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="DOKU_ID"/>
   <source>method GETDOCID .

  return = &apos;TX&apos;.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE .
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

  objecttype = &apos;DOCT&apos;.  &quot;Documentation

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_REPORT_VARIANTS" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Report Variants Plug in" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature

TYPE-POOLS: ststc.</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_REPORT_VARIANTS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_REPORT_VARIANTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_REPORT_VARIANTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_REPORT_VARIANTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_REPORT_VARIANTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_REPORT_VARIANTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS .
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com

  DATA:  l_program_name TYPE rsvar-report,
         l_variant_name TYPE rsvar-variant,
          l_return_code TYPE sy-subrc.

  CALL METHOD zsaplink_report_variants=&gt;get_variant_name
    EXPORTING
      object_name  = objname
    IMPORTING
      program_name = l_program_name
      variant_name = l_variant_name.

  CALL FUNCTION &apos;RS_VARIANT_EXISTS&apos;
    EXPORTING
      report              = l_program_name
      variant             = l_variant_name
    IMPORTING
      r_c                 = l_return_code
    EXCEPTIONS
      not_authorized      = 1
      no_report           = 2
      report_not_existent = 3
      report_not_supplied = 4
      OTHERS              = 5.

  IF sy-subrc NE 0 OR
     l_return_code NE 0.
    CLEAR exists.
  ELSE.
    exists = &apos;X&apos;.
  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT .
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com

  DATA:  l_program_name TYPE          rsvar-report,
         l_variant_name TYPE          rsvar-variant,
         lt_rsparams    TYPE TABLE OF rsparams,
         ls_rsparams    TYPE          rsparams,
         ls_varid       TYPE          varid,

         lt_varit       TYPE TABLE OF varit,
         ls_varit       TYPE          varit,

         lt_varis       TYPE TABLE OF varis,
         ls_varis       TYPE          varis.


  DATA: _objtype     TYPE string,
        mtext        TYPE string,
        rc           TYPE sysubrc.

* XML nodes
  DATA:rootnode     TYPE REF TO if_ixml_element,
       rsparam_node TYPE REF TO if_ixml_element,
       varid_node   TYPE REF TO if_ixml_element,
       varit_node   TYPE REF TO if_ixml_element,
       varis_node   TYPE REF TO if_ixml_element.

  CALL METHOD zsaplink_report_variants=&gt;get_variant_name
    EXPORTING
      object_name  = objname
    IMPORTING
      program_name = l_program_name
      variant_name = l_variant_name.

  CLEAR ls_varid.
  SELECT SINGLE *
    INTO ls_varid
    FROM varid
   WHERE report  EQ l_program_name
     AND variant EQ l_variant_name.

  IF sy-subrc NE 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.


  CLEAR lt_varit[].
  SELECT *
    INTO TABLE lt_varit
    FROM varit
   WHERE report  EQ l_program_name
     AND variant EQ l_variant_name.
  IF sy-subrc NE 0.
*     Do nothing...No texts for variants !!
*     Thanks Ok...
  ENDIF.

  CLEAR lt_varis.
  SELECT *
    INTO TABLE lt_varis
    FROM varis
   WHERE report  EQ l_program_name
     AND variant EQ l_variant_name.
  IF sy-subrc NE 0.
*     Do nothing...default selection screen used
  ENDIF.

  CALL FUNCTION &apos;RS_VARIANT_CONTENTS&apos;
    EXPORTING
      report                      = l_program_name
      variant                     = l_variant_name
*   MOVE_OR_WRITE               = &apos;W&apos;
*   NO_IMPORT                   = &apos; &apos;
*   EXECUTE_DIRECT              = &apos; &apos;
* IMPORTING
*   SP                          =
    TABLES
*   L_PARAMS                    =
*   L_PARAMS_NONV               =
*   L_SELOP                     =
*   L_SELOP_NONV                =
      valutab                     = lt_rsparams
*   OBJECTS                     =
*   FREE_SELECTIONS_DESC        =
*   FREE_SELECTIONS_VALUE       =
   EXCEPTIONS
     variant_non_existent        = 1
     variant_obsolete            = 2
     OTHERS                      = 3
            .
  IF sy-subrc &lt;&gt; 0.

    CASE sy-subrc.
      WHEN 2.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_found.

      WHEN OTHERS.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                INTO mtext
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.

        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING msg = mtext.

    ENDCASE.

  ENDIF.

  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  rootNode-&gt;set_attribute( name = &apos;VARIANT_NAME&apos; value = objname  ).

    varid_node = xmldoc-&gt;create_element( &apos;varid&apos; ).
    setattributesfromstructure( node = varid_node structure = ls_varid ).
    rc = rootnode-&gt;append_child( varid_node ).

  LOOP AT lt_varit INTO ls_varit.
    varit_node = xmldoc-&gt;create_element( &apos;varit&apos; ).
    setattributesfromstructure( node = varit_node structure = ls_varit ).
    rc = rootnode-&gt;append_child( varit_node ).
  ENDLOOP.

  LOOP AT lt_varis INTO ls_varis.
    varis_node = xmldoc-&gt;create_element( &apos;varis&apos; ).
    setattributesfromstructure( node = varis_node structure = ls_varis ).
    rc = rootnode-&gt;append_child( varis_node ).
  ENDLOOP.

  LOOP AT lt_rsparams INTO ls_rsparams.
    rsparam_node = xmldoc-&gt;create_element( &apos;rsparam&apos; ).
    setattributesfromstructure( node = rsparam_node structure = ls_rsparams ).
    rc = rootnode-&gt;append_child( rsparam_node ).
  ENDLOOP.

  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC .
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com

  DATA:  l_program_name TYPE          rsvar-report,
         l_variant_name TYPE          rsvar-variant,
         lt_rsparams    TYPE TABLE OF rsparams,
         ls_rsparams    TYPE          rsparams,
         ls_varid       TYPE          varid,

         lt_varit       TYPE TABLE OF varit,
         ls_varit       TYPE          varit,

         lt_rsdynnr     TYPE TABLE OF rsdynnr,
         ls_rsdynnr     TYPE          rsdynnr,

         lt_varis       TYPE TABLE OF varis,
         ls_varis       TYPE          varis.


  DATA: _objtype     TYPE string,
        mtext        TYPE string,
        rc           TYPE sysubrc.

  DATA : node        TYPE REF TO if_ixml_element,
         filter      TYPE REF TO if_ixml_node_filter,
         iterator    TYPE REF TO if_ixml_node_iterator.

* XML nodes
  DATA:rootnode     TYPE REF TO if_ixml_element,
       rsparam_node TYPE REF TO if_ixml_element,
       varid_node   TYPE REF TO if_ixml_element,
       varit_node   TYPE REF TO if_ixml_element,
       varis_node   TYPE REF TO if_ixml_element.

  DATA  l_checkexists TYPE flag.

  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  varid_node = xmldoc-&gt;find_from_name( &apos;varid&apos; ).
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = varid_node
    CHANGING
      structure = ls_varid.

  CONCATENATE ls_varid-report ls_varid-variant
         INTO objname.
  name = objname.

  l_checkexists = checkexists( ).
  IF l_checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  ls_varid-mandt = sy-mandt.

* Parameter Values
  FREE: filter, iterator, rsparam_node.
  filter = xmldoc-&gt;create_filter_name( &apos;rsparam&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  rsparam_node ?= iterator-&gt;get_next( ).
  WHILE rsparam_node IS NOT INITIAL.
    CLEAR ls_rsparams.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = rsparam_node
      CHANGING
        structure = ls_rsparams.
    APPEND ls_rsparams TO lt_rsparams.
    rsparam_node ?= iterator-&gt;get_next( ).
  ENDWHILE.


* Get Variant texts in different languages
  FREE: filter, iterator, varit_node.
  filter = xmldoc-&gt;create_filter_name( &apos;varit&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  varit_node ?= iterator-&gt;get_next( ).
  WHILE varit_node IS NOT INITIAL.
    CLEAR ls_varit.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = varit_node
      CHANGING
        structure = ls_varit.

    ls_varit-mandt = sy-mandt.
    APPEND ls_varit TO lt_varit.
    varit_node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* Get variants per screen
  FREE: filter, iterator, varis_node.
  filter = xmldoc-&gt;create_filter_name( &apos;varis&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  varis_node ?= iterator-&gt;get_next( ).
  WHILE varis_node IS NOT INITIAL.
    CLEAR ls_varit.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = varis_node
      CHANGING
        structure = ls_varis.

    CLEAR ls_rsdynnr.
    ls_rsdynnr-dynnr = ls_varis-dynnr.
    APPEND ls_rsdynnr TO lt_rsdynnr.
    varis_node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  CLEAR mtext.
  CALL FUNCTION &apos;RS_CREATE_VARIANT&apos;
    EXPORTING
      curr_report               = ls_varid-report
      curr_variant              = ls_varid-variant
      vari_desc                 = ls_varid
    TABLES
      vari_contents             = lt_rsparams
      vari_text                 = lt_varit
      vscreens                  = lt_rsdynnr
    EXCEPTIONS
      illegal_report_or_variant = 1
      illegal_variantname       = 2
      not_authorized            = 3
      not_executed              = 4
      report_not_existent       = 5
      report_not_supplied       = 6
      variant_exists            = 7
      variant_locked            = 8
      OTHERS                    = 9.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            INTO mtext
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.

    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING msg = mtext.
  ENDIF.


endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT .
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com

  DATA:  l_program_name TYPE rsvar-report,
         l_variant_name TYPE rsvar-variant,
         mtext          TYPE string.

  CALL METHOD zsaplink_report_variants=&gt;get_variant_name
    EXPORTING
      object_name  = objname
    IMPORTING
      program_name = l_program_name
      variant_name = l_variant_name.

  CALL FUNCTION &apos;RS_VARIANT_DELETE&apos;
    EXPORTING
      report                     = l_program_name
      variant                    = l_variant_name
*   FLAG_CONFIRMSCREEN         =
*   FLAG_DELALLCLIENT          =
* IMPORTING
*   VARIANT                    =
   EXCEPTIONS
     not_authorized             = 1
     not_executed               = 2
     no_report                  = 3
     report_not_existent        = 4
     report_not_supplied        = 5
     variant_locked             = 6
     variant_not_existent       = 7
     no_corr_insert             = 8
     variant_protected          = 9
     OTHERS                     = 10
            .
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            INTO mtext
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.

    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING msg = mtext.

  ENDIF.


endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE .
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com

  objecttype = &apos;VARI&apos;.  &quot;Variants
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_REPORT_VARIANTS" CMPNAME="GET_VARIANT_NAME" VERSION="1" LANGU="D" DESCRIPT="Splits the Object name into Report name and Variant name" EXPOSURE="1" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_REPORT_VARIANTS" CMPNAME="GET_VARIANT_NAME" SCONAME="OBJECT_NAME" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK_REPORT_VARIANTS" CMPNAME="GET_VARIANT_NAME" SCONAME="PROGRAM_NAME" VERSION="1" LANGU="D" DESCRIPT="Report Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="RSVAR-REPORT"/>
   <parameter CLSNAME="ZSAPLINK_REPORT_VARIANTS" CMPNAME="GET_VARIANT_NAME" SCONAME="VARIANT_NAME" VERSION="1" LANGU="D" DESCRIPT="Variant Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="RSVAR-VARIANT"/>
   <source>method GET_VARIANT_NAME .
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com

* Purpose: Splits the Object name into
*          Report and Variant name assuming  object name is
*          stored as SAP std in transports

  DATA: ls_dd03l     TYPE dd03l,
        l_objname    TYPE string,
        l_offset(2)  TYPE n.

  l_objname = object_name.

  CLEAR ls_dd03l.
  SELECT SINGLE *
    INTO ls_dd03l
    FROM dd03l
   WHERE tabname   EQ &apos;RSVAR&apos;
     AND fieldname EQ &apos;REPORT&apos;.

  IF sy-subrc EQ 0.
    l_offset = ls_dd03l-leng.
  ELSE.
    l_offset = &apos;40&apos;.
  ENDIF.
  program_name = l_objname+0(l_offset).
  SHIFT l_objname BY l_offset PLACES LEFT.

*  CLEAR ls_dd03l.
*  SELECT SINGLE *
*    INTO ls_dd03l
*    FROM dd03l
*   WHERE tabname   EQ &apos;RSVAR&apos;
*     AND fieldname EQ &apos;VARIANT&apos;.
*
*  IF sy-subrc EQ 0.
*    l_offset = ls_dd03l-leng.
*  ELSE.
*    l_offset = &apos;12&apos;.
*  ENDIF.

  variant_name = l_objname.

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_TYPE_GROUP" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Type Group Plugin" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZSAPLINK_TYPE_GROUP" CMPNAME="TP_STATE" VERSION="1" LANGU="D" DESCRIPT="Read status of an ABAP/4 Dictionary object" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="DDOBJSTATE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_TYPE_GROUP" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_TYPE_GROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TYPE_GROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TYPE_GROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TYPE_GROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_TYPE_GROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS .
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
* Plugin created by:
*   Dusan Davidovic
*   DusanDavidovic@gmail.com


  DATA: w_typepool TYPE typegroup.

  w_typepool = me-&gt;objname.

  TRY .
      CALL FUNCTION &apos;TYPD_GET_STATE_FOR_SE11&apos;
        EXPORTING
          typdname       = w_typepool
        IMPORTING
          state          = me-&gt;tp_state
        EXCEPTIONS
          reps_not_exist = 1
          OTHERS         = 2.
      IF sy-subrc &lt;&gt; 0.
        CLEAR exists.
      ELSE.
        exists = &apos;X&apos;.
      ENDIF.
    CATCH cx_sy_dyn_call_illegal_func .
      DATA: w_prog TYPE syrepid.
      CONCATENATE &apos;%_C&apos; me-&gt;objname INTO w_prog.
      SELECT SINGLE state INTO me-&gt;tp_state
        FROM progdir
       WHERE name = w_prog
         AND state = &apos;A&apos;.
      IF sy-subrc &lt;&gt; 0.
        CLEAR exists.
      ELSE.
        exists = &apos;X&apos;.
      ENDIF.


  ENDTRY.


endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT .
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
* Plugin created by:
*   Dusan Davidovic
*   DusanDavidovic@gmail.com

  DATA:
         wt_smodisrc TYPE  standard table of  smodisrc with default key,
         wt_smodilog TYPE  standard table of  smodilog with default key,
         wt_source   TYPE  standard table of  abaptxt255 with default key,
         wt_trdir    TYPE  standard table of    trdir with default key,
         w_typepool  TYPE typegroup.

  IF me-&gt;checkexists( ) IS NOT INITIAL. &quot; this will set type pool state
* get type pool information
    w_typepool = me-&gt;objname.
    CALL FUNCTION &apos;TYPD_GET_OBJECT&apos;
      EXPORTING
        typdname          = w_typepool
        r3state           = me-&gt;tp_state
      TABLES
        psmodisrc         = wt_smodisrc
        psmodilog         = wt_smodilog
        psource           = wt_source
        ptrdir            = wt_trdir
      EXCEPTIONS
        version_not_found = 1
        reps_not_exist    = 2
        OTHERS            = 3.
    IF sy-subrc = 0.
* Create XML
      DATA: rootnode   TYPE REF TO if_ixml_element,
            textnode   TYPE REF TO if_ixml_element,
            sourcenode TYPE REF TO if_ixml_element.
      DATA: ws_objtype TYPE string,
            ws_ddtypet type ddtypet,
            tp_attr    TYPE tadir,
            ws_trdir   TYPE trdir,
            sourcestring TYPE string.
      DATA rc TYPE sysubrc.


      ws_objtype = getobjecttype( ).
      rootnode = xmldoc-&gt;create_element( ws_objtype ). &quot; TYPE
      SELECT SINGLE * FROM tadir INTO tp_attr
       WHERE pgmid   = &apos;R3TR&apos;
         AND object  = ws_objtype
         AND obj_name = objname.
      me-&gt;setattributesfromstructure( node      = rootnode
                                      structure =  tp_attr ).
* set text node
      textnode = xmldoc-&gt;create_element( &apos;text&apos; ).
      SELECT SINGLE * FROM ddtypet INTO ws_ddtypet WHERE typegroup = w_typepool.
      me-&gt;setattributesfromstructure( node      = textnode
                                      structure = ws_ddtypet ).
      rc = rootnode-&gt;append_child( textnode ).
* source node
      sourcenode = xmldoc-&gt;create_element( &apos;source&apos; ).
      READ TABLE wt_trdir INTO ws_trdir INDEX 1.
      me-&gt;setattributesfromstructure( node      = sourcenode
                                      structure =  ws_trdir ).
      DATA: wt_src TYPE rswsourcet.
      FIELD-SYMBOLS: &lt;at&gt; TYPE  abaptxt255.
      LOOP AT wt_source ASSIGNING &lt;at&gt; .
        APPEND &lt;at&gt; TO wt_src.
      ENDLOOP.
      sourcestring = me-&gt;buildsourcestring( sourcetable = wt_src ).
      rc = sourcenode-&gt;if_ixml_node~set_value( sourcestring ).

      rc = rootnode-&gt;append_child( sourcenode ).
      rc = xmldoc-&gt;append_child( rootnode ).
      ixmldocument = xmldoc.
    ENDIF.
  ELSE.
    CLEAR ixmldocument.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC .
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
* Plugin created by:
*   Dusan Davidovic
*   DusanDavidovic@gmail.com

  DATA: w_devclass TYPE devclass,
        w_typepool TYPE typegroup,
        w_objtype  TYPE string,
        rc TYPE sysubrc.
* xml nodes
  DATA: rootnode   TYPE REF TO if_ixml_element,
        textnode   TYPE REF TO if_ixml_element,
        sourcenode TYPE REF TO if_ixml_element.
* structures
  DATA:  ws_ddtypet TYPE ddtypet,
         ws_tadir   TYPE tadir,
         ws_trdir   TYPE trdir.

  w_objtype = me-&gt;getobjecttype( ).
  me-&gt;xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( w_objtype ).
  me-&gt;getstructurefromattributes( EXPORTING node = rootnode
                                  CHANGING  structure = ws_tadir ).
* check if object exist
  me-&gt;objname = ws_tadir-obj_name.
  IF me-&gt;checkexists( ) IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* get text
  textnode = rootnode-&gt;find_from_name( &apos;text&apos; ).
  me-&gt;getstructurefromattributes( EXPORTING node = textnode
                                  CHANGING  structure = ws_ddtypet ).
* get source
  DATA: wt_abapsource TYPE STANDARD TABLE OF abapsource,
        ws_abapsource TYPE abapsource,
        wt_sourcestring TYPE STANDARD TABLE OF string,
        w_sourcestring TYPE string.
  sourcenode = rootnode-&gt;find_from_name( &apos;source&apos; ).
  me-&gt;getstructurefromattributes( EXPORTING node = sourcenode
                                  CHANGING  structure = ws_trdir ).
  w_sourcestring = sourcenode-&gt;get_value( ).
  wt_sourcestring = me-&gt;buildtablefromstring( w_sourcestring ).
  LOOP AT wt_sourcestring INTO w_sourcestring .
    ws_abapsource-line = w_sourcestring.
    APPEND ws_abapsource TO wt_abapsource.
  ENDLOOP.


* create Type-Pool
  DATA: w_corrnum TYPE trkorr.
  w_typepool = me-&gt;objname.
  CALL FUNCTION &apos;RS_DD_TYGR_INSERT_SOURCES&apos;
    EXPORTING
      typegroupname        = w_typepool
      ddtext               = ws_ddtypet-ddtext
      corrnum              = w_corrnum
      devclass             = w_devclass
    TABLES
      SOURCE               = wt_abapsource
    EXCEPTIONS
      already_exists       = 1
      not_executed         = 2
      permission_failure   = 3
      object_not_specified = 4
      illegal_name         = 5
      OTHERS               = 6.
  IF sy-subrc &lt;&gt; 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    CASE sy-subrc .
      WHEN 1.
        RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING textid = zcx_saplink=&gt;existing.
      WHEN 3.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ELSE.
* update unicode flag if required....TRDIR
* Use FM&apos;s RS_TRDIR_SELECT and RS_TRDIR_UPDATE
    IF ws_trdir-uccheck IS NOT INITIAL.
* this is required to update UNICODE flag - UCCHECK
* Behavior is like this...
* Two records are created in PROGDIR, one for (A)ctive and one for (I)nactive version,
* active ones has unicode set ptoperly while inacative one is blank. When type group is activated,
* active record is deleted and for inactive one status is changed, therefore UCCHECK is not corect.
* I suspect this behavior is caused by FM RS_DD_TYGR_INSERT_SOURCES where unicode can not be set
* Note: TRDIR is also updated
      DATA: wt_progdir_tab TYPE STANDARD TABLE OF progdir.
      CALL FUNCTION &apos;READ_PROGDIR&apos;
        EXPORTING
          i_progname    = ws_trdir-name
          i_state       = &apos; &apos;
        IMPORTING
          e_progdir_tab = wt_progdir_tab
        EXCEPTIONS
          not_exists    = 1
          OTHERS        = 2.
      IF sy-subrc &lt;&gt; 0.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
      ELSE.
        FIELD-SYMBOLS: &lt;pdir&gt; TYPE progdir.
        LOOP AT wt_progdir_tab ASSIGNING  &lt;pdir&gt; WHERE uccheck IS INITIAL.
          &lt;pdir&gt;-uccheck = ws_trdir-uccheck.
          CALL FUNCTION &apos;UPDATE_PROGDIR&apos;
            EXPORTING
              i_progdir    = &lt;pdir&gt;
              i_progname   = ws_trdir-name
              i_state      = &lt;pdir&gt;-state
            EXCEPTIONS
              not_executed = 1
              OTHERS       = 2.
          IF sy-subrc &lt;&gt; 0.
            RAISE EXCEPTION TYPE zcx_saplink
              EXPORTING textid = zcx_saplink=&gt;error_message
                msg = &apos;PROGDIR not updated&apos;.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDIF.
    name = w_typepool.
  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT .
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
* Plugin created by:
*   Dusan Davidovic
*   DusanDavidovic@gmail.com

  DATA: w_typepool TYPE typegroup,
        w_stringobjtype TYPE string,
        w_fmobjtype TYPE trobjtype,
        w_eutype TYPE ddeutype.

  w_typepool = me-&gt;objname.
  w_stringobjtype  = me-&gt;getobjecttype( ).
  w_fmobjtype = w_stringobjtype.


  CALL FUNCTION &apos;INTERN_TRANSL_TADIR_TYPE&apos;
    EXPORTING
      tadir_type   = w_fmobjtype
    IMPORTING
      eutype       = w_eutype
    EXCEPTIONS
      invalid_type = 1
      OTHERS       = 2.
  IF sy-subrc = 0.

    CALL FUNCTION &apos;RS_DD_DELETE_OBJ&apos;
      EXPORTING
        no_ask               = &apos;X&apos;
        objname              = w_typepool
        objtype              = w_eutype
      EXCEPTIONS
        not_executed         = 1
        object_not_found     = 2
        object_not_specified = 3
        permission_failure   = 4
        dialog_needed        = 5
        OTHERS               = 6.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE zcx_saplink
   EXPORTING
     textid = zcx_saplink=&gt;error_message
     msg = &apos;type-pool not deleted&apos;.
    ENDIF.

  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE .
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

* Plugin created by:
*   Dusan Davidovic
*   DusanDavidovic@gmail.com

 objecttype = &apos;TYPE&apos;.  &quot;Type pool


endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_WF" VERSION="1" LANGU="D" DESCRIPT="Generic SAPLING plugin for Workflow objects" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSABSTRCT="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZSAPLINK_WF" CMPNAME="C_SWF_PERS_CLASS" VERSION="1" LANGU="D" DESCRIPT="Reference type" EXPOSURE="2" STATE="1" EDITORDER="0 " ATTDECLTYP="2" ATTVALUE="&apos;CL_SWF_CNT_HRS_PERSISTENCE&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CLASSNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_WF" CMPNAME="GO_CONTAINER" VERSION="1" LANGU="D" DESCRIPT="Container - Implementation of a &apos;Collection&apos;" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="IF_SWF_CNT_CONTAINER" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_WF" CMPNAME="GS_OBJECT" VERSION="1" LANGU="D" DESCRIPT="Index for Standard Objects" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="HRSOBJECT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_WF" CMPNAME="G_MSG" VERSION="1" LANGU="D" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_WF" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_WF" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WF" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WF" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WF" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_WF" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK_WF" CMPNAME="AFTER_SAVE" VERSION="1" LANGU="D" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WF" CMPNAME="AFTER_SAVE" SCONAME="I_XMLDOC" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <parameter CLSNAME="ZSAPLINK_WF" CMPNAME="AFTER_SAVE" SCONAME="I_DEVCLASS" VERSION="1" LANGU="D" DESCRIPT="Package" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS" PARVALUE="&apos;$TMP&apos;"/>
   <exception CLSNAME="ZSAPLINK_WF" CMPNAME="AFTER_SAVE" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method AFTER_SAVE.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WF" CMPNAME="APPEND_STRUCTURE_NODE" VERSION="1" LANGU="D" EXPOSURE="1" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WF" CMPNAME="APPEND_STRUCTURE_NODE" SCONAME="I_NODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK_WF" CMPNAME="APPEND_STRUCTURE_NODE" SCONAME="I_NAME" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK_WF" CMPNAME="APPEND_STRUCTURE_NODE" SCONAME="IS_STRUCT" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
   <parameter CLSNAME="ZSAPLINK_WF" CMPNAME="APPEND_STRUCTURE_NODE" SCONAME="R_NODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>METHOD APPEND_STRUCTURE_NODE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Sergey Korolev
*      slkorolev@gmail.com

  CHECK i_node IS BOUND.

  r_node = xmldoc-&gt;create_element( i_name ).
  i_node-&gt;append_child( r_node ).

  setattributesfromstructure( node = r_node
                              structure = is_struct ).
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WF" CMPNAME="APPEND_TABLE_NODE" VERSION="1" LANGU="D" EXPOSURE="1" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WF" CMPNAME="APPEND_TABLE_NODE" SCONAME="I_NODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK_WF" CMPNAME="APPEND_TABLE_NODE" SCONAME="I_NAME" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK_WF" CMPNAME="APPEND_TABLE_NODE" SCONAME="IT" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY TABLE"/>
   <parameter CLSNAME="ZSAPLINK_WF" CMPNAME="APPEND_TABLE_NODE" SCONAME="R_NODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>METHOD APPEND_TABLE_NODE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Sergey Korolev
*      slkorolev@gmail.com

  FIELD-SYMBOLS: &lt;wa&gt; TYPE any.

  DATA: item TYPE REF TO if_ixml_element,
        attr TYPE REF TO if_ixml_attribute.

  CHECK i_node IS BOUND AND lines( it ) &gt; 0.

  r_node = xmldoc-&gt;create_element( i_name ).
  i_node-&gt;append_child( r_node ).

  LOOP AT it ASSIGNING &lt;wa&gt;.
    r_node-&gt;append_child( append_structure_node( i_node    = r_node
                                                 i_name    = &apos;item&apos;
                                                 is_struct = &lt;wa&gt; ) ).
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WF" CMPNAME="BEFORE_SAVE" VERSION="1" LANGU="D" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WF" CMPNAME="BEFORE_SAVE" SCONAME="I_XMLDOC" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <parameter CLSNAME="ZSAPLINK_WF" CMPNAME="BEFORE_SAVE" SCONAME="I_DEVCLASS" VERSION="1" LANGU="D" DESCRIPT="Package" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS" PARVALUE="&apos;$TMP&apos;"/>
   <source>method BEFORE_SAVE.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Sergey Korolev
*      slkorolev@gmail.com

  DATA: ls_object TYPE hrsobject.

  ls_object-otype = get_otype( ).
  ls_object-objid = get_objid( ).

  CALL FUNCTION &apos;RH_CHECK_HRS_OBJECT_EXISTS&apos;
    EXPORTING
      act_otype        = ls_object-otype
      act_objid        = ls_object-objid
    EXCEPTIONS
      object_not_found = 1
      OTHERS           = 2.

  IF sy-subrc &lt;&gt; 0.
    CLEAR exists.
  ELSE.
    exists = abap_true.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createixmldocfromobject.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Sergey Korolev
*      slkorolev@gmail.com

  DATA: ls_object TYPE hrsobject,
        ls_objec TYPE objec,
        l_tabname TYPE tabname,
        l_tabname_str TYPE string,
        lt_infty TYPE TABLE OF t787i-infty,

        ls_hrs1203 TYPE hrs1203,
        ls_hrs1216 TYPE hrscompdev,

        lo_container TYPE REF TO if_swf_cnt_container,
        lo_cnt_xml TYPE REF TO if_ixml_document,

        l_root_node TYPE REF TO if_ixml_element,

        lrt_infty_data TYPE REF TO data.

  DATA: task_por TYPE sibflpor.

  FIELD-SYMBOLS: &lt;lt_infty&gt; TYPE STANDARD TABLE,
                 &lt;infty&gt; TYPE t787i-infty.

  ls_objec-otype = ls_object-otype = get_otype( ).
  ls_objec-objid = ls_object-objid = get_objid( ).

  l_root_node = xmldoc-&gt;create_element( getobjecttype( ) ).

  SELECT DISTINCT infty FROM  t787i INTO TABLE lt_infty
         WHERE  otype  = ls_object-otype.

  DELETE lt_infty WHERE table_line = &apos;1210&apos; OR
                        table_line = &apos;1211&apos; OR
                        table_line = &apos;1216&apos; OR
                        table_line = &apos;1001&apos;.

  l_tabname(3) = &apos;HRS&apos;.
  LOOP AT lt_infty ASSIGNING &lt;infty&gt;.

    l_tabname+3 = &lt;infty&gt;.

    UNASSIGN &lt;lt_infty&gt;.

    CREATE DATA lrt_infty_data TYPE STANDARD TABLE OF (l_tabname).
    ASSIGN lrt_infty_data-&gt;* TO &lt;lt_infty&gt;.

    CASE &lt;infty&gt;.
      WHEN &apos;1000&apos;.
        CALL FUNCTION &apos;RH_READ_HRS1000&apos;
          EXPORTING
            act_otype     = ls_object-otype
            act_objid     = ls_object-objid
          TABLES
            act_hrs1000   = &lt;lt_infty&gt;
          EXCEPTIONS
            no_data_found = 1
            OTHERS        = 2.

        IF sy-subrc &lt;&gt; 0.
        ENDIF.

      WHEN &apos;1002&apos;.
        CALL FUNCTION &apos;RH_READ_HRS1002&apos;
          EXPORTING
            act_otype     = ls_object-otype
            act_objid     = ls_object-objid
          TABLES
            act_hrs1002   = &lt;lt_infty&gt;
          EXCEPTIONS
            no_data_found = 1
            OTHERS        = 2.

        IF sy-subrc &lt;&gt; 0.
        ENDIF.

      WHEN &apos;1200&apos;.
        CALL FUNCTION &apos;RH_READ_HRS1200&apos;
          EXPORTING
            act_otype        = ls_object-otype
            act_objid        = ls_object-objid
            rel_object_check = space
          TABLES
            act_hrs1200      = &lt;lt_infty&gt;
          EXCEPTIONS
            no_data_found    = 1
            OTHERS           = 2.

        IF sy-subrc &lt;&gt; 0.
* Implement suitable error handling here
        ENDIF.

      WHEN &apos;1201&apos;.
        DATA: ls_hrs1201 TYPE hrs1201.
        CALL FUNCTION &apos;RH_READ_HRS1201&apos;
          EXPORTING
            act_otype     = ls_object-otype
            act_objid     = ls_object-objid
          IMPORTING
            act_hrs1201   = ls_hrs1201
          EXCEPTIONS
            no_data_found = 1
            OTHERS        = 2.

        IF sy-subrc = 0.
          APPEND ls_hrs1201 TO &lt;lt_infty&gt;.
        ENDIF.

      WHEN &apos;1202&apos;.
        CALL FUNCTION &apos;RH_READ_HRS1202&apos;
          EXPORTING
            act_otype     = ls_object-otype
            act_objid     = ls_object-objid
          TABLES
            act_hrs1202   = &lt;lt_infty&gt;
          EXCEPTIONS
            no_data_found = 1
            OTHERS        = 2.

        IF sy-subrc &lt;&gt; 0.
        ENDIF.

      WHEN &apos;1203&apos;.
        CALL FUNCTION &apos;RH_READ_HRS1203&apos;
          EXPORTING
            act_otype   = ls_object-otype
            act_objid   = ls_object-objid
          IMPORTING
            act_hrs1203 = ls_hrs1203
          EXCEPTIONS
            OTHERS      = 2.

        IF sy-subrc = 0.
          APPEND ls_hrs1203 TO &lt;lt_infty&gt;.
        ENDIF.

      WHEN &apos;1205&apos;.
        CALL FUNCTION &apos;RH_READ_HRS1205&apos;
          EXPORTING
            act_otype     = ls_object-otype
            act_objid     = ls_object-objid
          TABLES
            act_hrs1205   = &lt;lt_infty&gt;
          EXCEPTIONS
            no_data_found = 1
            OTHERS        = 2.

        IF sy-subrc &lt;&gt; 0.
        ENDIF.

      WHEN &apos;1206&apos;.
        CALL FUNCTION &apos;RH_READ_HRS1206&apos;
          EXPORTING
            act_otype     = ls_object-otype
            act_objid     = ls_object-objid
          TABLES
            act_hrs1206   = &lt;lt_infty&gt;
          EXCEPTIONS
            no_data_found = 1
            OTHERS        = 2.

        IF sy-subrc &lt;&gt; 0.
          &quot; Implement suitable error handling here
        ENDIF.

      WHEN &apos;1212&apos;.
        CALL FUNCTION &apos;RH_READ_HRS1212&apos;
          EXPORTING
            act_otype     = ls_object-otype
            act_objid     = ls_object-objid
          TABLES
            act_hrs1212   = &lt;lt_infty&gt;
          EXCEPTIONS
            no_data_found = 1
            OTHERS        = 2.

        IF sy-subrc &lt;&gt; 0.
          &quot; Implement suitable error handling here
        ENDIF.

      WHEN &apos;1213&apos;.
        CALL FUNCTION &apos;RH_READ_HRS1213&apos;
          EXPORTING
            act_otype     = ls_object-otype
            act_objid     = ls_object-objid
          TABLES
            act_hrs1213   = &lt;lt_infty&gt;
          EXCEPTIONS
            no_data_found = 1
            OTHERS        = 2.

        IF sy-subrc &lt;&gt; 0.
          &quot;* Implement suitable error handling here
        ENDIF.

      WHEN &apos;1214&apos;.
        CALL FUNCTION &apos;RH_READ_HRS1214&apos;
          EXPORTING
            act_otype     = ls_object-otype
            act_objid     = ls_object-objid
          TABLES
            act_hrs1214   = &lt;lt_infty&gt;
          EXCEPTIONS
            no_data_found = 1
            OTHERS        = 2.

        IF sy-subrc &lt;&gt; 0.
          &quot;* Implement suitable error handling here
        ENDIF.

      WHEN OTHERS.
        CONTINUE.
    ENDCASE.

    l_tabname_str = l_tabname.
    me-&gt;append_table_node( i_node = l_root_node
                           i_name = l_tabname_str
                           it     = &lt;lt_infty&gt; ).

  ENDLOOP.

  lo_container = me-&gt;get_wf_cnt_instance( ).
  lo_container-&gt;to_xml( EXPORTING include_texts = &apos;X&apos;
                                  include_extension_elements = &apos;X&apos;
                                  include_initial_values = &apos;X&apos;
                                  include_null_values = &apos;X&apos;
                                  include_typenames = &apos;X&apos;
                        IMPORTING xml_dom = lo_cnt_xml ).

  l_root_node-&gt;append_child( lo_cnt_xml-&gt;get_root_element( ) ).

  xmldoc-&gt;append_child( fill_root_node( i_node = l_root_node
                                        is_object = ls_object ) ).

  ixmldocument  = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createobjectfromixmldoc.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Sergey Korolev
*      slkorolev@gmail.com

  DATA: ls_object TYPE hrsobject,
        ls_objec TYPE objec,
        l_tabname TYPE tabname,
        l_hrs_tabname TYPE tabname,
        l_tabname_str TYPE string,
        lt_infty TYPE TABLE OF t787i-infty,

        l_subroutine TYPE tabname,
        init_subrc TYPE sy-subrc,
        data_stored TYPE flag,
        l_fcode TYPE t77fc-fcode,

        l_object_guid32 TYPE guid_32,

        can_save TYPE abap_bool,

        l_langu TYPE sy-langu,

        l_root_node TYPE REF TO if_ixml_element,

        lrt_hrs_infty_data TYPE REF TO data,
        lrt_infty_data TYPE REF TO data.

  DATA: l_cnt_node TYPE REF TO if_ixml_element,
        lo_container TYPE REF TO if_swf_cnt_container,
        lo_cnt_xml TYPE REF TO if_ixml_document,
        l_subdoc TYPE REF TO if_ixml_document,
        l_ref_ixml TYPE REF TO if_ixml,
        ex TYPE REF TO cx_root.

  DATA: lt_i1000  TYPE TABLE OF hrs1000,
        ls_hrs1000 TYPE hrs1000,

        lt_i1002  TYPE TABLE OF hrs1002,
        lt_i1200  TYPE TABLE OF hrs1200,
        lt_i1201  TYPE TABLE OF hrs1201,

        lt_i1202  TYPE TABLE OF hrs1202,
        ls_i1202  TYPE hrs1202,

        lt_i1203  TYPE TABLE OF hrs1203,
        ls_i1203  TYPE hrs1203,

        lt_i1205  TYPE TABLE OF hrs1205,
        lt_i1206  TYPE TABLE OF hrs1206,
        lt_i1212  TYPE TABLE OF hrs1212,
        lt_i1213  TYPE TABLE OF hrs1213,
        lt_i1214  TYPE TABLE OF hrs1214,

        l_loc_tab_name TYPE tabname.

  DATA: task_por TYPE sibflpor.

  FIELD-SYMBOLS: &lt;lt_hrs_infty&gt; TYPE STANDARD TABLE,
                 &lt;infty&gt; TYPE t787i-infty.

  ls_objec-otype = ls_object-otype = get_otype( ).
  ls_objec-objid = ls_object-objid = get_objid( ).

  xmldoc = ixmldocument.

  SELECT DISTINCT infty FROM  t787i INTO TABLE lt_infty
         WHERE  otype  = ls_object-otype.

  DELETE lt_infty WHERE table_line = &apos;1210&apos; OR &quot;old container
                        table_line = &apos;1211&apos; OR &quot;old container
                        table_line = &apos;1205&apos; OR &quot;WF definition version
                        table_line = &apos;1216&apos; OR
                        table_line = &apos;1001&apos;.

  l_tabname(3) = &apos;HRS&apos;.
  l_hrs_tabname(4) = &apos;LT_I&apos;.
  LOOP AT lt_infty ASSIGNING &lt;infty&gt;.

    l_tabname+3 = &lt;infty&gt;.
    l_hrs_tabname+4 = &lt;infty&gt;.

    UNASSIGN: &lt;lt_hrs_infty&gt;.
    ASSIGN (l_hrs_tabname) TO &lt;lt_hrs_infty&gt;.
    CHECK &lt;lt_hrs_infty&gt; IS ASSIGNED.

    l_tabname_str = l_tabname.
    me-&gt;get_table_from_node( EXPORTING i_name = l_tabname_str
                             CHANGING  ct     = &lt;lt_hrs_infty&gt; ).

  ENDLOOP.

  IF checkexists( ) = abap_false.
    CALL FUNCTION &apos;RH_HRSOBJECT_CORR_INSERT&apos;
      EXPORTING
        act_otype    = ls_object-otype
        act_objid    = ls_object-objid
        act_mode     = &apos; &apos;
        act_devclass = devclass
      IMPORTING
        act_maint    = can_save
      EXCEPTIONS
        OTHERS       = 4.

    IF sy-subrc NE 0.

      MESSAGE ID sy-msgid TYPE &apos;E&apos; NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 INTO g_msg.

      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          msg = g_msg.

    ENDIF.

  ENDIF.

  READ TABLE lt_i1000 INTO ls_hrs1000 WITH KEY langu = sy-langu.
  IF sy-subrc = 0.
    DELETE lt_i1000 INDEX sy-tabix.
    INSERT ls_hrs1000 INTO lt_i1000 INDEX 1.
  ENDIF.

  CALL FUNCTION &apos;RH_HRSOBJECT_SAVE_FROM_EXPORT&apos;
    EXPORTING
      act_hrs_otype           = ls_object-otype
      act_hrs_objid           = ls_object-objid
      act_langu               = sy-langu
      update_database         = abap_false
    TABLES
      i1000                   = lt_i1000
      i1002                   = lt_i1002
      i1200                   = lt_i1200
      i1201                   = lt_i1201
      i1205                   = lt_i1205
      i1206                   = lt_i1206
      i1212                   = lt_i1212
      i1213                   = lt_i1213
      i1214                   = lt_i1214
    EXCEPTIONS
      maintenance_not_allowed = 1
      no_corr_number          = 2
      error                   = 3
      OTHERS                  = 4.

  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE &apos;E&apos; NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 INTO g_msg.

    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        msg = g_msg.

* Implement suitable error handling here
  ENDIF.

  IF lines( lt_i1202 ) &gt; 0.
    UNASSIGN: &lt;lt_hrs_infty&gt;.
    ASSIGN (&apos;(SAPLRHWS)USE_HRS1202[]&apos;) TO &lt;lt_hrs_infty&gt;.
    IF &lt;lt_hrs_infty&gt; IS ASSIGNED.
      PERFORM upd_buf_hrs1202 IN PROGRAM saplrhws
                  USING
                      ls_object-otype
                      ls_object-objid
                      sy-langu
                      ls_i1202
                      &apos;I&apos;.
    ENDIF.
  ENDIF.

  IF lines( lt_i1203 ) &gt; 0.
    READ TABLE lt_i1203 INTO ls_i1203 INDEX 1.
    PERFORM upd_buf_hrs1203 IN PROGRAM saplrhws
                USING
                    ls_object-otype
                    ls_object-objid
                    sy-langu
                    ls_i1203
                    &apos;I&apos;.
  ENDIF.

  me-&gt;before_save( i_xmldoc = ixmldocument
                   i_devclass = devclass ).

  l_cnt_node = xmldoc-&gt;find_from_name( name = &apos;CONTAINER&apos; ).
  IF l_cnt_node IS BOUND.
    TRY .

        lo_container = me-&gt;get_wf_cnt_instance( ).

        l_ref_ixml = cl_ixml=&gt;create( ).
        l_subdoc = l_ref_ixml-&gt;create_document( ).
        l_subdoc-&gt;append_child( l_cnt_node ).

        lo_container-&gt;import_from_xml( xml_dom = l_subdoc ).

        l_object_guid32 = ls_object.
        lo_container-&gt;set_guid( guid_32 = l_object_guid32 ).

        lo_container-&gt;save_to_database( ).

      CATCH cx_swf_cnt_invalid_por INTO ex.
        g_msg = &apos;Error when saving container&apos; &amp;&amp; ex-&gt;get_text( ).

        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            msg = g_msg.

    ENDTRY.
  ENDIF.

  CALL FUNCTION &apos;RH_STORE_HRS_DATA&apos;. &quot;It calls COMMIT

  me-&gt;after_save( i_xmldoc = ixmldocument
                  i_devclass = devclass ).

  name = get_object_description( ).

  CONCATENATE name ls_object INTO name SEPARATED BY space.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WF" CMPNAME="CREATE_WF_CNT_INSTANCE" VERSION="1" LANGU="D" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WF" CMPNAME="CREATE_WF_CNT_INSTANCE" SCONAME="R_INSTANCE" VERSION="1" LANGU="D" DESCRIPT="Container - Implementation of a &apos;Collection&apos;" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_SWF_CNT_CONTAINER"/>
   <source>METHOD CREATE_WF_CNT_INSTANCE.
  DATA: task_por TYPE sibflpor,
        l_hr_task TYPE swd_step_t,
        ls_object TYPE hrsobject.


  ls_object-otype = get_otype( ).
  ls_object-objid = get_objid( ).
  l_hr_task = ls_object.

  TRY.

      CALL METHOD cl_swf_cnt_factory=&gt;create_rh_task_container
        EXPORTING
          im_task_id               = l_hr_task
          im_persistence_classname = c_swf_pers_class
        IMPORTING
          ex_task_container        = r_instance.

    CATCH cx_swf_utl_obj_create_failed.
    CATCH cx_swf_utl_no_plan_variant.
    CATCH cx_swf_utl_task_not_found.
    CATCH cx_swf_utl_obj_invalid_ref.

  ENDTRY.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD DELETEOBJECT.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WF" CMPNAME="FILL_ROOT_NODE" VERSION="1" LANGU="D" EXPOSURE="1" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WF" CMPNAME="FILL_ROOT_NODE" SCONAME="I_NODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK_WF" CMPNAME="FILL_ROOT_NODE" SCONAME="IS_OBJECT" VERSION="1" LANGU="D" DESCRIPT="Index for Standard Objects" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="HRSOBJECT"/>
   <parameter CLSNAME="ZSAPLINK_WF" CMPNAME="FILL_ROOT_NODE" SCONAME="R_NODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>METHOD FILL_ROOT_NODE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Sergey Korolev
*      slkorolev@gmail.com

  DATA: ls_taskid TYPE rhobjects.

  ls_taskid = is_object.
  setattributesfromstructure( node = i_node structure = ls_taskid ).

  r_node = i_node.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Sergey Korolev
*      slkorolev@gmail.com

  objecttype = &apos;PD&apos; &amp;&amp; get_otype( ).
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WF" CMPNAME="GET_OBJECT_DESCRIPTION" VERSION="1" LANGU="D" DESCRIPT="Object description" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDABSTRCT="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WF" CMPNAME="GET_OBJECT_DESCRIPTION" SCONAME="R_VALUE" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
  </method>
  <method CLSNAME="ZSAPLINK_WF" CMPNAME="GET_OBJID" VERSION="1" LANGU="D" EXPOSURE="1" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WF" CMPNAME="GET_OBJID" SCONAME="R_OBJID" VERSION="1" LANGU="D" DESCRIPT="Object ID of Standard Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="HRSOBJECT-OBJID"/>
   <source>METHOD GET_OBJID.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Sergey Korolev
*      slkorolev@gmail.com

  IF objname(2) = get_otype( ).
    r_objid = objname+2.
  ELSE.
    r_objid = objname.
  ENDIF.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WF" CMPNAME="GET_OTYPE" VERSION="1" LANGU="D" DESCRIPT="get OTYPE for particular HRS object" EXPOSURE="1" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDABSTRCT="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WF" CMPNAME="GET_OTYPE" SCONAME="R_OTYPE" VERSION="1" LANGU="D" DESCRIPT="Standard Object Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="HRSOBJECT-OTYPE"/>
  </method>
  <method CLSNAME="ZSAPLINK_WF" CMPNAME="GET_STRUCTURE_FROM_NODE" VERSION="1" LANGU="D" EXPOSURE="1" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WF" CMPNAME="GET_STRUCTURE_FROM_NODE" SCONAME="I_NODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_WF" CMPNAME="GET_STRUCTURE_FROM_NODE" SCONAME="I_NAME" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK_WF" CMPNAME="GET_STRUCTURE_FROM_NODE" SCONAME="CS_STRUCT" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
   <source>METHOD GET_STRUCTURE_FROM_NODE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Sergey Korolev
*      slkorolev@gmail.com

  DATA: lo_node	TYPE REF TO if_ixml_element.

  IF i_node IS BOUND.
    lo_node = i_node.
  ELSE.
    lo_node = xmldoc-&gt;get_root_element( ).
  ENDIF.

  lo_node = lo_node-&gt;find_from_name( name = i_name ).

  CHECK lo_node IS BOUND.

  getstructurefromattributes( EXPORTING node            = lo_node
                              CHANGING  structure       = cs_struct ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WF" CMPNAME="GET_TABLE_FROM_NODE" VERSION="1" LANGU="D" EXPOSURE="1" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WF" CMPNAME="GET_TABLE_FROM_NODE" SCONAME="I_NODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_WF" CMPNAME="GET_TABLE_FROM_NODE" SCONAME="I_NAME" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK_WF" CMPNAME="GET_TABLE_FROM_NODE" SCONAME="CT" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="STANDARD TABLE"/>
   <source>METHOD GET_TABLE_FROM_NODE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Sergey Korolev
*      slkorolev@gmail.com

  DATA: lo_node	TYPE REF TO if_ixml_element,
        lo_item TYPE REF TO if_ixml_node,
        l_name TYPE string,
        l_value TYPE string,
        lo_attrs TYPE REF TO if_ixml_named_node_map,
        lo_attr TYPE REF TO if_ixml_node,
        lo_iterator TYPE REF TO if_ixml_node_iterator,
        lo_attr_iterator TYPE REF TO if_ixml_node_iterator,
        lo_filter TYPE REF TO if_ixml_node_filter.

  FIELD-SYMBOLS: &lt;wa&gt; TYPE any,
                 &lt;f&gt; TYPE any.

  IF i_node IS BOUND.
    lo_node = i_node.
  ELSE.
    lo_node = xmldoc-&gt;get_root_element( ).
  ENDIF.

  CHECK lo_node IS BOUND.
  lo_node = lo_node-&gt;find_from_name( name = i_name ).

  CHECK lo_node IS BOUND.
  lo_iterator = lo_node-&gt;create_iterator_filtered( lo_node-&gt;create_filter_name( &apos;item&apos; ) ).

  DO.
    lo_item = lo_iterator-&gt;get_next( ).
    IF lo_item IS NOT BOUND.
      EXIT.
    ENDIF.

    l_name = lo_item-&gt;get_name( ).
    CHECK l_name = &apos;item&apos;.

    lo_attrs = lo_item-&gt;get_attributes( ).
    CHECK lo_attrs IS BOUND.

    lo_attr_iterator = lo_attrs-&gt;create_iterator( ).
    UNASSIGN &lt;wa&gt;.

    DO.
      lo_attr = lo_attr_iterator-&gt;get_next( ).
      IF lo_attr IS NOT BOUND.
        EXIT.
      ENDIF.

      IF &lt;wa&gt; IS NOT ASSIGNED.
        APPEND INITIAL LINE TO ct ASSIGNING &lt;wa&gt;.
      ENDIF.

      l_name = lo_attr-&gt;get_name( ).
      l_value = lo_attr-&gt;get_value( ).

      UNASSIGN &lt;f&gt;.
      ASSIGN COMPONENT l_name OF STRUCTURE &lt;wa&gt; TO &lt;f&gt;.

      CHECK &lt;f&gt; IS ASSIGNED.
      &lt;f&gt; = l_value.
    ENDDO.

  ENDDO.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WF" CMPNAME="GET_WF_CNT_INSTANCE" VERSION="1" LANGU="D" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WF" CMPNAME="GET_WF_CNT_INSTANCE" SCONAME="R_INSTANCE" VERSION="1" LANGU="D" DESCRIPT="Container - Implementation of a &apos;Collection&apos;" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_SWF_CNT_CONTAINER"/>
   <source>METHOD GET_WF_CNT_INSTANCE.
  DATA: task_por TYPE sibflpor,
        l_hr_task TYPE swd_step_t,
        ls_object TYPE hrsobject.


  IF go_container IS NOT BOUND.
    ls_object-otype = get_otype( ).
    ls_object-objid = get_objid( ).
    l_hr_task = ls_object.

* try to read the container from OO persistence
    TRY.

      task_por-typeid = c_swf_pers_class.
      task_por-instid = ls_object.

      CALL METHOD cl_swf_cnt_factory=&gt;find_by_lpor
        EXPORTING
          lpor     = task_por
        RECEIVING
          instance = go_container.

    ENDTRY.

    IF go_container IS NOT BOUND.
* object has no persistent container yet

      go_container = me-&gt;create_wf_cnt_instance( ).

* get the texts of the container elements
      CALL METHOD go_container-&gt;refresh_element_texts.

    ENDIF.
  ENDIF.

  r_instance = go_container.
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_WF_ACTOR_RULE" VERSION="1" LANGU="D" DESCRIPT="SAPLINK Agent determination rule plugin" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK_WF">
  <types CLSNAME="ZSAPLINK_WF_ACTOR_RULE" CMPNAME="TS_RULE_ATTR" VERSION="1" LANGU="D" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="11 " SRCCOLUMN1="4 " SRCROW2="24 " SRCCOLUMN2="29 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF ts_rule_attr,
             act_short  TYPE  hrs1000-short,
             act_stext  TYPE  hrs1000-stext,
             execute_function TYPE  hrs1203-fname,
             execute_wegid  TYPE  hrs1203-wegid,
             execute_scenario TYPE  hrs1203-attrscn,
             execute_enforce  TYPE  hrs1203-enforce,
             sap_org_obj_based  TYPE  hrs1203-org_flag,
             sap_org_objtype  TYPE  hrs1203-objtype,
             responsible_flag TYPE  flag,
             personal_flag  TYPE  hrs1203-personal,
             prioseq_flag TYPE  hrs1203-prioseqn,
             roletype TYPE  hrroletype,
           END OF ts_rule_attr
"/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool>
   <language SPRAS="E">
    <textElement ID="I" KEY="001" ENTRY="rule_attributes" LENGTH="15 "/>
    <textElement ID="I" KEY="002" ENTRY="rule_container" LENGTH="14 "/>
   </language>
  </textPool>
  <inheritance CLSNAME="ZSAPLINK_WF_ACTOR_RULE" REFCLSNAME="ZSAPLINK_WF" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_WF_ACTOR_RULE" REFCLSNAME="ZSAPLINK_WF" VERSION="1" MTDNAME="CREATE_WF_CNT_INSTANCE" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_WF_ACTOR_RULE" REFCLSNAME="ZSAPLINK_WF" VERSION="1" MTDNAME="FILL_ROOT_NODE" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_WF_ACTOR_RULE" REFCLSNAME="ZSAPLINK_WF" VERSION="1" MTDNAME="GET_OBJECT_DESCRIPTION" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_WF_ACTOR_RULE" REFCLSNAME="ZSAPLINK_WF" VERSION="1" MTDNAME="GET_OTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK_WF" CMPNAME="CREATE_WF_CNT_INSTANCE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD create_wf_cnt_instance.
*CALL METHOD SUPER-&gt;CREATE_WF_CNT_INSTANCE
*  RECEIVING
*    R_INSTANCE =
*    .
  DATA: task_por TYPE sibflpor,
        l_hr_task TYPE swd_step_t,
        ls_object TYPE hrsobject.


  ls_object-otype = get_otype( ).
  ls_object-objid = get_objid( ).
  l_hr_task = ls_object.

  TRY.

      CALL METHOD cl_swf_cnt_factory=&gt;create_role_container
        EXPORTING
          im_role_id               = l_hr_task
          im_persistence_classname = c_swf_pers_class
        IMPORTING
          ex_role_container        = r_instance.

    CATCH cx_swf_utl_obj_create_failed.
    CATCH cx_swf_utl_no_plan_variant.
    CATCH cx_swf_utl_task_not_found.
    CATCH cx_swf_utl_obj_invalid_ref.

  ENDTRY.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WF" CMPNAME="FILL_ROOT_NODE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD FILL_ROOT_NODE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Sergey Korolev
*      slkorolev@gmail.com

  DATA: ls_attr TYPE ts_rule_attr,
        lt_cont	TYPE TABLE OF swcontdef.

  DATA: node TYPE REF TO if_ixml_element.

  r_node = super-&gt;fill_root_node( i_node    = i_node
                                  is_object = is_object ).

  CALL FUNCTION &apos;RH_GET_ACTOR_ATTRIBUTES&apos;
    EXPORTING
      act_otype         = is_object-otype
      act_objid         = is_object-objid
      read_container    = abap_true
      authority_check   = abap_false
    IMPORTING
      act_short         = ls_attr-act_short
      act_stext         = ls_attr-act_stext
      execute_function  = ls_attr-execute_function
      execute_wegid     = ls_attr-execute_wegid
      execute_scenario  = ls_attr-execute_scenario
      execute_enforce   = ls_attr-execute_enforce
      sap_org_obj_based = ls_attr-sap_org_obj_based
      sap_org_objtype   = ls_attr-sap_org_objtype
      responsible_flag  = ls_attr-responsible_flag
      personal_flag     = ls_attr-personal_flag
      prioseq_flag      = ls_attr-prioseq_flag
      roletype          = ls_attr-roletype
    TABLES
      act_cont_def      = lt_cont
    EXCEPTIONS
      OTHERS            = 2.

  IF sy-subrc &lt;&gt; 0.
* Implement suitable error handling here
  ENDIF.

  append_structure_node( i_node    = i_node
                         i_name    = &apos;rule_attributes&apos;
                         is_struct = ls_attr ).

  append_table_node( i_node = i_node
                     i_name = &apos;rule_container&apos;
                     it     = lt_cont ).
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WF" CMPNAME="GET_OBJECT_DESCRIPTION" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD get_object_description.
  r_value = &apos;Agent determination rule&apos;.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WF" CMPNAME="GET_OTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD GET_OTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Sergey Korolev
*      slkorolev@gmail.com

  r_otype = &apos;AC&apos;.
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_WF_STASK" VERSION="1" LANGU="D" DESCRIPT="SAPLINK Standard task plugin" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK_WF">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_WF_STASK" REFCLSNAME="ZSAPLINK_WF" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_WF_STASK" REFCLSNAME="ZSAPLINK_WF" VERSION="1" MTDNAME="FILL_ROOT_NODE" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_WF_STASK" REFCLSNAME="ZSAPLINK_WF" VERSION="1" MTDNAME="GET_OBJECT_DESCRIPTION" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_WF_STASK" REFCLSNAME="ZSAPLINK_WF" VERSION="1" MTDNAME="GET_OTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK_WF" CMPNAME="FILL_ROOT_NODE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD FILL_ROOT_NODE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Sergey Korolev
*      slkorolev@gmail.com

  DATA: l_object TYPE rhobjects,

        ls_task_attributes  TYPE rhwftskatt,
        lt_init_bind  TYPE  swfbndptab,
        lt_om_bind  TYPE  swfbndptab,
        lt_def_role_bind  TYPE  swfbndptab,
        lt_not_role_bind  TYPE  swfbndptab,
        lt_dea_role_bind  TYPE  swfbndptab,
        lt_end_role_bind  TYPE  swfbndptab,
        lt_lat_role_bind  TYPE  swfbndptab,

        lt_act_cont_def	TYPE TABLE OF	swcontdef,
        lt_act_methods  TYPE TABLE OF	rhwf_meth,
        lt_start_events TYPE TABLE OF	hri1212,
        lt_term_events  TYPE TABLE OF	hri1212,
        lt_event_binding TYPE TABLE OF  hrs1212.

  super-&gt;fill_root_node( i_node    = i_node
                         is_object = is_object ).
  r_node = i_node.

  l_object = is_object.

  CALL FUNCTION &apos;RH_TASK_ATTRIBUTES_RUNTIME&apos;
    EXPORTING
      act_object_ext     = l_object-object
    IMPORTING
      task_attributes    = ls_task_attributes
      task_init_bind     = lt_init_bind
      task_om_bind       = lt_om_bind
      task_def_role_bind = lt_def_role_bind
      task_not_role_bind = lt_not_role_bind
      task_dea_role_bind = lt_dea_role_bind
      task_end_role_bind = lt_end_role_bind
      task_lat_role_bind = lt_lat_role_bind
    TABLES
      act_cont_def       = lt_act_cont_def
      act_methods        = lt_act_methods
      start_events       = lt_start_events
      term_events        = lt_term_events
      event_binding      = lt_event_binding
    EXCEPTIONS
      OTHERS             = 3.

  append_structure_node( i_node    = i_node
                         i_name    = &apos;task_attributes&apos;
                         is_struct = ls_task_attributes ).

  append_table_node( i_node = i_node i_name = &apos;task_init_bind&apos; it = lt_init_bind ).
  append_table_node( i_node = i_node i_name = &apos;task_om_bind&apos; it = lt_om_bind ).
  append_table_node( i_node = i_node i_name = &apos;task_def_role_bind&apos; it = lt_def_role_bind ).
  append_table_node( i_node = i_node i_name = &apos;task_not_role_bind&apos; it = lt_not_role_bind ).
  append_table_node( i_node = i_node i_name = &apos;task_dea_role_bind&apos; it = lt_dea_role_bind ).
  append_table_node( i_node = i_node i_name = &apos;task_end_role_bind&apos; it = lt_end_role_bind ).
  append_table_node( i_node = i_node i_name = &apos;task_lat_role_bind&apos; it = lt_lat_role_bind ).
  append_table_node( i_node = i_node i_name = &apos;act_cont_def&apos; it = lt_act_cont_def ).
  append_table_node( i_node = i_node i_name = &apos;act_methods&apos; it = lt_act_methods ).
  append_table_node( i_node = i_node i_name = &apos;start_events&apos; it = lt_start_events ).
  append_table_node( i_node = i_node i_name = &apos;term_events&apos; it = lt_term_events ).
  append_table_node( i_node = i_node i_name = &apos;event_binding&apos; it = lt_event_binding ).

  r_node = i_node.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WF" CMPNAME="GET_OBJECT_DESCRIPTION" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD get_object_description.
  r_value = &apos;Standard task&apos;.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WF" CMPNAME="GET_OTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD GET_OTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Sergey Korolev
*      slkorolev@gmail.com

  r_otype = &apos;TS&apos;.
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_WF_TEMPLATE" VERSION="1" LANGU="D" DESCRIPT="SAPLINK Workflow template plugin" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK_WF">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZSAPLINK_WF_TEMPLATE" CMPNAME="C_DEF_NODE_NAME" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="0 " ATTDECLTYP="2" ATTVALUE="&apos;wf_definition&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_WF_TEMPLATE" REFCLSNAME="ZSAPLINK_WF" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_WF_TEMPLATE" REFCLSNAME="ZSAPLINK_WF" VERSION="1" MTDNAME="AFTER_SAVE" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_WF_TEMPLATE" REFCLSNAME="ZSAPLINK_WF" VERSION="1" MTDNAME="FILL_ROOT_NODE" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_WF_TEMPLATE" REFCLSNAME="ZSAPLINK_WF" VERSION="1" MTDNAME="GET_OBJECT_DESCRIPTION" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_WF_TEMPLATE" REFCLSNAME="ZSAPLINK_WF" VERSION="1" MTDNAME="GET_OTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK_WF" CMPNAME="AFTER_SAVE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD after_save.

  DATA: ls_wfdkey TYPE swd_wfdkey,
        ls_object TYPE hrsobject,

        msg TYPE string,
        name TYPE string,
        len TYPE i,
        ind TYPE i,

        l_okcode TYPE swd_data-okcode,
        l_return TYPE swd_return,

        lt_hrs1000 TYPE TABLE OF hrs1000,

        l_task TYPE  swd_step_t,
        ls_head TYPE swd_ahead,

        lo_wfd_xml TYPE REF TO cl_xml_document_base,
        lo_wfd_import TYPE REF TO if_swf_pdef_import,
        lo_node TYPE REF TO if_ixml_node,
        lo_node_next TYPE REF TO if_ixml_node,
        lo_subdoc TYPE REF TO if_ixml_document,
        lo_ixml TYPE REF TO if_ixml.

  FIELD-SYMBOLS: &lt;hrs1000&gt; TYPE hrs1000.
  ls_object-otype = get_otype( ).
  ls_object-objid = get_objid( ).

  l_task = ls_object.
  CALL FUNCTION &apos;SWD_WORKFLOW_CREATE&apos;
    EXPORTING
      im_task = l_task
    EXCEPTIONS
      OTHERS  = 0.

  lo_node = i_xmldoc-&gt;find_from_name( c_def_node_name ).
  WHILE lo_node IS BOUND.
    name = lo_node-&gt;get_name( ).
    lo_node_next = lo_node-&gt;get_next( ).

    IF name = c_def_node_name.
      IF lo_ixml IS NOT BOUND.
        lo_ixml = cl_ixml=&gt;create( ).
      ENDIF.

      lo_subdoc = lo_ixml-&gt;create_document( ).
      lo_subdoc-&gt;append_child( lo_node ).

      CREATE OBJECT lo_wfd_xml
        EXPORTING
          document = lo_subdoc.

      l_okcode = &apos;NVRS&apos;. &quot;new viewrion
      PERFORM ssc_wd_store IN PROGRAM saplswdd
                  CHANGING
                     l_okcode
                     l_return.

      IF lo_wfd_import IS NOT BOUND.
        CREATE OBJECT lo_wfd_import TYPE cl_wfd_convert_ixml_to_def.
      ENDIF.

      lo_wfd_import-&gt;convert( xml_document  = lo_wfd_xml language = sy-langu ).
    ENDIF.

    lo_node = lo_node_next.
  ENDWHILE.

  CALL FUNCTION &apos;SWD_WORKFLOW_STORE&apos;
    EXPORTING
      im_force_gen = abap_true
    IMPORTING
      ex_wfdkey    = ls_wfdkey
    EXCEPTIONS
      OTHERS       = 4.

  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = &apos;Error when saving Workflow definition &apos; &amp;&amp; l_task.
  ENDIF.

  COMMIT WORK.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WF" CMPNAME="FILL_ROOT_NODE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD fill_root_node.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Sergey Korolev
*      slkorolev@gmail.com

  DATA: ls_wfdkey TYPE swd_wfdkey,

        lo_wfd_xml TYPE REF TO cl_xml_document_base,
        lo_wfd_export TYPE REF TO if_swf_pdef_export,
        lt_versions TYPE TABLE OF swd_versns,

        lo_node TYPE REF TO if_ixml_element.

  FIELD-SYMBOLS: &lt;version&gt; TYPE swd_versns.

  super-&gt;fill_root_node( i_node = i_node
                         is_object = is_object ).

  CALL FUNCTION &apos;SWD_GET_VERSIONS_OF_WORKFLOW&apos;
    EXPORTING
      im_task          = is_object
      im_exetyp        = &apos;S&apos;
    IMPORTING
      ex_active_wfdkey = ls_wfdkey
    TABLES
      ex_versions      = lt_versions.

  CREATE OBJECT lo_wfd_export TYPE cl_wfd_convert_def_to_ixml.

  SORT lt_versions BY version.
  LOOP AT lt_versions ASSIGNING &lt;version&gt;.

    ls_wfdkey-version = &lt;version&gt;-version.
    lo_wfd_xml = lo_wfd_export-&gt;convert( load_from_db = abap_true
                                         language = sy-langu
                                         wfd_key = ls_wfdkey ).
    lo_node = me-&gt;append_structure_node( i_node = i_node
                                         i_name    = c_def_node_name
                                         is_struct = ls_wfdkey ).

    lo_node-&gt;append_child( lo_wfd_xml-&gt;get_first_node( ) ).
    i_node-&gt;append_child( lo_node ).
  ENDLOOP.

  r_node = i_node.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WF" CMPNAME="GET_OBJECT_DESCRIPTION" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD get_object_description.
  r_value = &apos;Workflow template&apos;.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WF" CMPNAME="GET_OTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD GET_OTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Sergey Korolev
*      slkorolev@gmail.com

  r_otype = &apos;WS&apos;.
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" VERSION="1" LANGU="D" DESCRIPT="Badi Implementations" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" TYPEGROUP="SEEX" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" TYPEGROUP="SEOK" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>SEEX</forwardDeclaration>
  <forwardDeclaration>SEOK</forwardDeclaration>
  <inheritance CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

 DATA: imp_name TYPE exit_imp.

 imp_name = objname.

  CALL FUNCTION &apos;SXV_IMP_EXISTS&apos;
    EXPORTING
      imp_name                 = imp_name
    EXCEPTIONS
      NOT_EXISTING             = 1
      DATA_INCONSISTENCY       = 2
      OTHERS                   = 3
          .
  IF sy-subrc &lt;&gt; 0.
*   MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ELSE.
    exists = &apos;X&apos;.
  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createixmldocfromobject.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA childnode  TYPE REF TO if_ixml_element.

  DATA: exit_name         TYPE exit_def,
        lv_filter_obj     TYPE REF TO cl_badi_flt_struct,
        badi_data         TYPE badi_data,
        impl_data         TYPE impl_data,
        it_methods        TYPE seex_mtd_table,
        it_filters        TYPE seex_filter_table.


  DATA: comp_method_h    TYPE seex_mtd_table,
        comp_screen_h    TYPE seex_screen_table,
        comp_fcode_h     TYPE seex_fcode_table,
        comp_coco_h      TYPE seex_coco_table,
        comp_table_h     TYPE seex_table_table,
        sxc_attrt        TYPE sxc_attrt.


  DATA rc TYPE sysubrc.
  DATA _objname(30) TYPE c.

  DATA _objtype TYPE string.
  DATA imp_name TYPE exit_imp.
  DATA impattr  TYPE sxc_attr.


  FIELD-SYMBOLS: &lt;fs_fcode&gt; LIKE LINE OF comp_fcode_h,
                 &lt;fs_coco&gt;  LIKE LINE OF comp_coco_h,
                 &lt;fs_table&gt; LIKE LINE OF comp_table_h,
                 &lt;fs_screen&gt; LIKE LINE OF comp_screen_h,
                 &lt;fs_filter&gt; LIKE LINE OF it_filters.

  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  imp_name = objname.
* Check for implementation existance
  SELECT SINGLE * FROM sxc_attr INTO impattr WHERE imp_name EQ imp_name.
  IF sy-subrc EQ 0.
*   Retrieve the badi name for the implementation
    CALL FUNCTION &apos;SXV_EXIT_FOR_IMP&apos;
      EXPORTING
        imp_name           = imp_name
      IMPORTING
        exit_name          = exit_name
      TABLES
        filters            = it_filters
      EXCEPTIONS
        data_inconsistency = 1
        OTHERS             = 2.
    IF sy-subrc EQ 0.
*     Read the badi definition attributes
      CALL FUNCTION &apos;SXO_BADI_READ&apos;
        EXPORTING
          exit_name    = exit_name
          maint_langu  = sy-langu
        IMPORTING
          badi         = badi_data
          filter_obj   = lv_filter_obj
        TABLES
          fcodes       = comp_fcode_h
          cocos        = comp_coco_h
          intas        = comp_table_h
          scrns        = comp_screen_h
          methods      = it_methods
        EXCEPTIONS
          read_failure = 1
          OTHERS       = 2.
      IF sy-subrc &lt;&gt; 0.
        RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING textid = zcx_saplink=&gt;system_error.
*          RAISE dump_due_to_badi_error.
      ENDIF.
*     Read the implementation attributes
      CALL FUNCTION &apos;SXO_IMPL_FOR_BADI_READ&apos;
        EXPORTING
          imp_name                    = imp_name
          exit_name                   = exit_name
          maint_langu                 = sy-langu
          inter_name                  = badi_data-inter_name
          filter_obj                  = lv_filter_obj
          no_create_filter_values_obj = &apos;X&apos;
        IMPORTING
          impl                        = impl_data
          mast_langu                  = sxc_attrt-sprsl
        TABLES
          fcodes                      = comp_fcode_h
          cocos                       = comp_coco_h
          intas                       = comp_table_h
          scrns                       = comp_screen_h
        CHANGING
          methods                     = it_methods
        EXCEPTIONS
          read_failure                = 1
          OTHERS                      = 2.
      IF sy-subrc &lt;&gt; 0.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
      ELSE.
        setattributesfromstructure( node = rootnode structure =  impl_data ).

*       Master Language
        childnode = xmldoc-&gt;create_element( &apos;text&apos; ).
        setattributesfromstructure( node = childnode structure = sxc_attrt ).
        rc = rootnode-&gt;append_child( childnode ).


*       Function Codes
        LOOP AT comp_fcode_h ASSIGNING &lt;fs_fcode&gt;.
          childnode = xmldoc-&gt;create_element( &apos;fcodes&apos; ).
          setattributesfromstructure( node = childnode structure = &lt;fs_fcode&gt; ).
          rc = rootnode-&gt;append_child( childnode ).
        ENDLOOP.
        UNASSIGN &lt;fs_fcode&gt;.

*       Control Composites
        LOOP AT comp_coco_h ASSIGNING &lt;fs_coco&gt;.
          childnode = xmldoc-&gt;create_element( &apos;cocos&apos; ).
          setattributesfromstructure( node = childnode structure = &lt;fs_coco&gt; ).
          rc = rootnode-&gt;append_child( childnode ).
        ENDLOOP.
        UNASSIGN &lt;fs_coco&gt;.

*       Tables
        LOOP AT comp_table_h ASSIGNING &lt;fs_table&gt;.
          childnode = xmldoc-&gt;create_element( &apos;intas&apos; ).
          setattributesfromstructure( node = childnode structure = &lt;fs_table&gt; ).
          rc = rootnode-&gt;append_child( childnode ).
        ENDLOOP.
        UNASSIGN &lt;fs_table&gt;.

*       Subscreens
        LOOP AT comp_screen_h ASSIGNING &lt;fs_screen&gt;.
          childnode = xmldoc-&gt;create_element( &apos;scrns&apos; ).
          setattributesfromstructure( node = childnode structure = &lt;fs_screen&gt; ).
          rc = rootnode-&gt;append_child( childnode ).
        ENDLOOP.
        UNASSIGN &lt;fs_screen&gt;.

*       Populate Filter Internal table
        IF NOT lv_filter_obj-&gt;flt_type IS INITIAL.
          LOOP AT  it_filters ASSIGNING &lt;fs_filter&gt;.
            childnode = xmldoc-&gt;create_element( &apos;fltrs&apos; ).
            setattributesfromstructure( node = childnode structure = &lt;fs_filter&gt; ).
            rc = rootnode-&gt;append_child( childnode ).
          ENDLOOP.
          UNASSIGN &lt;fs_filter&gt;.
        ENDIF.
      ENDIF.
    ENDIF.
  ELSE.
    CLEAR ixmldocument.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createobjectfromixmldoc.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA rc          TYPE sysubrc.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.
  DATA imp_data    TYPE impl_data.
  DATA filter TYPE REF TO if_ixml_node_filter.
  DATA iterator TYPE REF TO if_ixml_node_iterator.
  DATA: it_fcodes TYPE seex_fcode_table,
        it_cocos  TYPE seex_coco_table,
        it_intas  TYPE seex_table_table,
        it_sscrs  TYPE seex_screen_table,
        it_filters TYPE seex_filter_table,
        it_methods TYPE seex_class_implementation,
        ls_fcode  LIKE LINE OF it_fcodes,
        ls_cocos  LIKE LINE OF it_cocos,
        ls_intas  LIKE LINE OF it_intas,
        ls_sscrs  LIKE LINE OF it_sscrs,
        ls_filter LIKE LINE OF it_filters,
        ls_attrt  TYPE sxc_attrt,
        l_korrnum TYPE trkorr,
        lv_langu  TYPE sylangu.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = imp_data.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* For Master Language
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;text&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  CLEAR ls_fcode.
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = node
    CHANGING
      structure = ls_attrt.

* For Function Codes
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;fcodes&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CLEAR ls_fcode.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ls_fcode.
    APPEND ls_fcode TO  it_fcodes.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* For Control Composites
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;cocos&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CLEAR ls_cocos.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ls_cocos.
    APPEND ls_cocos TO it_cocos.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* For Tables
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;intas&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CLEAR ls_intas.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ls_intas.
    APPEND ls_intas TO it_intas.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* For Subscreens
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;scrns&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CLEAR ls_sscrs.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ls_sscrs.
    APPEND ls_sscrs TO it_sscrs.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* For Filters
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;fltrs&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CLEAR ls_filter.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ls_filter.
    APPEND ls_filter TO it_filters.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* Create a Badi Implementation
   CALL METHOD me-&gt;create_implementation
    EXPORTING
      impl                                 = imp_data
*     ACTIVE                               = SEEX_FALSE
    CHANGING
      mast_langu                           = ls_attrt-sprsl
      filters                              = it_filters
      fcodes_to_insert                     = it_fcodes
      cocos_to_insert                      = it_cocos
      intas_to_insert                      = it_intas
      sscrs_to_insert                      = it_sscrs
      korrnum                              = l_korrnum
      devclass                             = _devclass
      method_implements                    = it_methods
    EXCEPTIONS
      badi_not_existing_or_wrong           = 1
      wrong_imp_name                       = 2
      wrong_imp_class_name                 = 3
      wrong_filter_type                    = 4
      wrong_filter_value                   = 5
      save_failure                         = 6
      action_canceled                      = 7
      method_include_generating_fail       = 8
      activation_failed                    = 9
      access_failure                       = 10
      OTHERS                               = 11.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error
                msg    = &apos;badi implementation create failure&apos;.
  ENDIF.

* successful install
  name = objname.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" VERSION="1" LANGU="D" DESCRIPT="Create Implementation" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="IMPL" VERSION="1" LANGU="D" DESCRIPT="Generated Table for View IMPL_DATA" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="IMPL_DATA"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="ACTIVE" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="SEEX_BOOLEAN" PARVALUE="SEEX_FALSE"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="MAST_LANGU" VERSION="1" LANGU="D" DESCRIPT="Language Key of Current Text Environment" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="SY-LANGU" PARVALUE="SY-LANGU"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="FILTERS" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="SEEX_FILTER_TABLE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="FCODES_TO_INSERT" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="SEEX_FCODE_TABLE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="COCOS_TO_INSERT" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="SEEX_COCO_TABLE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="INTAS_TO_INSERT" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="SEEX_TABLE_TABLE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="SSCRS_TO_INSERT" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="8 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="SEEX_SCREEN_TABLE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="KORRNUM" VERSION="1" LANGU="D" DESCRIPT="Request/Task" CMPTYPE="1" MTDTYPE="0" EDITORDER="9 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TRKORR"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="DEVCLASS" VERSION="1" LANGU="D" DESCRIPT="Package" CMPTYPE="1" MTDTYPE="0" EDITORDER="10 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="METHOD_IMPLEMENTS" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="11 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEEX_CLASS_IMPLEMENTATION"/>
   <exception CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="BADI_NOT_EXISTING_OR_WRONG" VERSION="1" LANGU="D" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="WRONG_IMP_NAME" VERSION="1" LANGU="D" MTDTYPE="0" EDITORDER="2 "/>
   <exception CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="WRONG_IMP_CLASS_NAME" VERSION="1" LANGU="D" MTDTYPE="0" EDITORDER="3 "/>
   <exception CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="WRONG_FILTER_TYPE" VERSION="1" LANGU="D" MTDTYPE="0" EDITORDER="4 "/>
   <exception CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="WRONG_FILTER_VALUE" VERSION="1" LANGU="D" MTDTYPE="0" EDITORDER="5 "/>
   <exception CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="SAVE_FAILURE" VERSION="1" LANGU="D" MTDTYPE="0" EDITORDER="6 "/>
   <exception CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="ACTION_CANCELED" VERSION="1" LANGU="D" MTDTYPE="0" EDITORDER="7 "/>
   <exception CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="METHOD_INCLUDE_GENERATING_FAIL" VERSION="1" LANGU="D" MTDTYPE="0" EDITORDER="8 "/>
   <exception CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="ACTIVATION_FAILED" VERSION="1" LANGU="D" MTDTYPE="0" EDITORDER="9 "/>
   <exception CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="ACCESS_FAILURE" VERSION="1" LANGU="D" MTDTYPE="0" EDITORDER="10 "/>
   <source>method CREATE_IMPLEMENTATION.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

  DATA: status TYPE seex_status,
        flt_ext TYPE sxs_attr-flt_ext,
        flt_type TYPE sxs_attr-flt_type,
        filter_obj TYPE REF TO cl_badi_flt_struct,
        ref TYPE REF TO cl_badi_flt_data_trans_and_db,
        filter_val_obj TYPE REF TO cl_badi_flt_values_alv,
        prot TYPE sprot_u_tab,
        prot_line TYPE sprot_u,
        method_implem TYPE seex_method_implementation,
        gen TYPE genflag.

* At first set the genflag
  IF devclass(1) = &apos;$&apos;.  &quot; local dev. class
    gen = seex_true.
  ELSE.
    gen = seex_false.
  ENDIF.

  CALL FUNCTION &apos;SXV_EXIT_EXISTS&apos;
    EXPORTING
      exit_name                   = impl-exit_name
    EXCEPTIONS
      not_existing                = 1
      exit_interface_not_existing = 2
      category_conflict           = 3
      no_sxs_inter_entry          = 4
      OTHERS                      = 5.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
            RAISING badi_not_existing_or_wrong.
  ENDIF.

  SELECT SINGLE flt_type flt_ext
           INTO (flt_type, flt_ext)
           FROM sxs_attr
           WHERE exit_name = impl-exit_name.
  CHECK sy-subrc = 0.

  CALL FUNCTION &apos;SXV_IMP_NAME_AVAILABLE&apos;
    EXPORTING
      imp_name            = impl-imp_name
      exit_name           = impl-exit_name
    EXCEPTIONS
      not_available       = 1
      invalid_name        = 2
      class_not_available = 3
      already_existing    = 4
      OTHERS              = 5.
  IF sy-subrc &lt;&gt; 0 and sy-subrc &lt;&gt; 3.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
            RAISING wrong_imp_name.
  ENDIF.
  CALL FUNCTION &apos;SXV_IMP_CLASS_NAME_AVAILABLE&apos;
    EXPORTING
      imp_class            = impl-imp_class
      exit_name            = impl-exit_name
    EXCEPTIONS
      not_available        = 1
      class_already_exists = 2
      OTHERS               = 3.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
            RAISING wrong_imp_class_name.
  ENDIF.

  CREATE OBJECT filter_obj
      EXPORTING filter_structure = flt_type
                extend           = flt_ext
      EXCEPTIONS others = 1.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
            RAISING wrong_filter_type.
  ELSE.
    CREATE OBJECT filter_val_obj
           EXPORTING
              filter_object = filter_obj
              filter_values = filters.
    CREATE OBJECT ref
           EXPORTING
              filter_obj    = filter_obj
              filter_values = filters.
    IF not flt_type is initial.
      CALL METHOD ref-&gt;flt_val_check
        IMPORTING
          prot = prot.
      READ TABLE prot INTO prot_line INDEX 1.
      IF sy-subrc = 0.
        IF prot_line-msgnr = 468.
          prot_line-var1 = impl-imp_name.
        ENDIF.
        MESSAGE ID &apos;ENHANCEMENT&apos;
                TYPE prot_line-severity
                NUMBER prot_line-msgnr
                WITH prot_line-var1
                     prot_line-var2
                     prot_line-var3
                     prot_line-var4
                RAISING wrong_filter_value.
      ENDIF.
    ENDIF.
  ENDIF.

  CALL FUNCTION &apos;SXO_IMPL_ACCESS_PERMISSION&apos;
    EXPORTING
      imp_name            = impl-imp_name
      mode                = seex_access_insert
      master_language     = mast_langu
      modify_necessary    = seex_true
      no_dialog           = seex_true
    IMPORTING
      new_master_language = mast_langu
    CHANGING
      status              = status
    EXCEPTIONS
      access_failure      = 1
      action_canceled     = 2
      OTHERS              = 3.
  IF sy-subrc = 2.
    RAISE action_canceled.
  ELSEIF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
            RAISING access_failure.
  ENDIF.


   CALL METHOD me-&gt;save_implementation
    EXPORTING
      impl             = impl
      flt_ext          = flt_ext
      flt_type         = flt_type
      maint_langu      = mast_langu
      filter_val_obj   = filter_val_obj
      genflag          = gen
      no_dialog        = seex_true
      fcodes_to_insert = fcodes_to_insert
      cocos_to_insert  = cocos_to_insert
      sscrs_to_insert  = sscrs_to_insert
      intas_to_insert  = intas_to_insert
    IMPORTING
      mast_langu       = mast_langu
    CHANGING
      korrnum          = korrnum
      devclass         = devclass
    EXCEPTIONS
      save_failure     = 1
      action_canceled  = 2
      OTHERS           = 3.
  IF sy-subrc = 2.
    RAISE action_canceled.
  ELSEIF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
            RAISING save_failure.
  ENDIF.

  CALL FUNCTION &apos;SXO_IMPL_ACCESS_PERMISSION&apos;
    EXPORTING
      imp_name        = impl-imp_name
      mode            = seex_access_free
      no_dialog       = seex_true
    CHANGING
      status          = status
    EXCEPTIONS
      access_failure  = 1
      action_canceled = 2
      OTHERS          = 3.
  IF sy-subrc = 2.
    RAISE action_canceled.
  ELSEIF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
            RAISING access_failure.
  ENDIF.

* Generate the method includes
  DATA: mtdkey TYPE seocpdkey,
        lines TYPE i.
  DESCRIBE TABLE method_implements LINES lines.
  IF lines &gt; 0.
    mtdkey-clsname = impl-imp_class.

    IF devclass(1) ne &apos;$&apos;.
      CALL FUNCTION &apos;RS_CORR_INSERT&apos;
        EXPORTING
          object              = impl-imp_class
          object_class        = seok_r3tr_class
          mode                = seex_access_modify
          genflag             = gen
          global_lock         = seex_true
          devclass            = devclass
          korrnum             = korrnum
        IMPORTING
          devclass            = devclass
          korrnum             = korrnum
        EXCEPTIONS
          cancelled           = 1
          permission_failure  = 2
          unknown_objectclass = 3
          OTHERS              = 4.
      IF sy-subrc &lt;&gt; 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
                RAISING method_include_generating_fail.
      ENDIF.
    ENDIF.
    LOOP AT method_implements INTO method_implem.
      CONCATENATE impl-inter_name &apos;~&apos; method_implem-methodname
          INTO mtdkey-cpdname.
      CALL FUNCTION &apos;SEO_METHOD_GENERATE_INCLUDE&apos;
        EXPORTING
          mtdkey                       = mtdkey
          version                      = seoc_version_inactive
          force                        = seox_true
          redefine                     = seox_false
          suppress_corr                = seox_false
          implementation_expanded      = method_implem-source
          suppress_mtdkey_check        = seox_false
          generated                    = gen
        EXCEPTIONS
          not_existing                 = 1
          model_only                   = 2
          include_existing             = 3
          method_imp_not_generated     = 4
          method_imp_not_initialised   = 5
          _internal_class_not_existing = 6
          _internal_method_overflow    = 7
          cancelled                    = 8
          OTHERS                       = 9.
      IF sy-subrc &lt;&gt; 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
                RAISING method_include_generating_fail.
      ENDIF.
    ENDLOOP.
  ENDIF.

* Active creation  ?
  IF active = seex_true.
    CALL FUNCTION &apos;SXO_IMPL_ACTIVE&apos;
      EXPORTING
        imp_name                  = impl-imp_name
      EXCEPTIONS
        badi_not_existing         = 1
        imp_not_existing          = 2
        already_active            = 3
        data_inconsistency        = 4
        activation_not_admissable = 5
        action_canceled           = 6
        access_failure            = 7
        OTHERS                    = 8.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
              RAISING activation_failed.
    ENDIF.
  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD deleteobject.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

  DATA: l_suppress_dialog TYPE char1,
        imp_name          TYPE exit_imp.

  imp_name = objname.
  l_suppress_dialog = &apos;X&apos;.

  CALL FUNCTION &apos;SXO_IMPL_DELETE&apos;
    EXPORTING
      imp_name           = imp_name
      no_dialog          = l_suppress_dialog
    EXCEPTIONS
      imp_not_existing   = 1
      action_canceled    = 2
      access_failure     = 3
      data_inconsistency = 4
      OTHERS             = 5.
  IF sy-subrc &lt;&gt; 0.

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD getobjecttype.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

  objecttype = &apos;SXCI&apos;. &quot;BADI Implementation
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" VERSION="1" LANGU="D" DESCRIPT="Save Implementation" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="IMPL" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="IMPL_DATA"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="FLT_EXT" VERSION="1" LANGU="D" DESCRIPT="Alternative" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="RSEXSCRN-FLT_EXT"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="FLT_TYPE" VERSION="1" LANGU="D" DESCRIPT="Data Element (Semantic Domain)" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="RSEXSCRN-FLT_TYPE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="MAINT_LANGU" VERSION="1" LANGU="D" DESCRIPT="SAP R/3 System, Current Language" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="SY-LANGU" PARVALUE="SY-LANGU"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="FILTER_VAL_OBJ" VERSION="1" LANGU="D" DESCRIPT="Manage Filter Values in ALV Grid for Business Add-Ins" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="CL_BADI_FLT_VALUES_ALV"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="GENFLAG" VERSION="1" LANGU="D" DESCRIPT="Generation Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="GENFLAG" PARVALUE="SEEX_FALSE"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="NO_DIALOG" VERSION="1" LANGU="D" DESCRIPT="No dialogs" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="SEEX_BOOLEAN" PARVALUE="SEEX_FALSE"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="FCODES_TO_INSERT" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="8 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEEX_FCODE_TABLE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="COCOS_TO_INSERT" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="9 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEEX_COCO_TABLE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="INTAS_TO_INSERT" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="10 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEEX_TABLE_TABLE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="SSCRS_TO_INSERT" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="11 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEEX_SCREEN_TABLE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="MAST_LANGU" VERSION="1" LANGU="D" DESCRIPT="SAP R/3 System, Current Language" CMPTYPE="1" MTDTYPE="0" EDITORDER="12 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="SY-LANGU"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="KORRNUM" VERSION="1" LANGU="D" DESCRIPT="Request/Task" CMPTYPE="1" MTDTYPE="0" EDITORDER="13 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TRKORR"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="DEVCLASS" VERSION="1" LANGU="D" DESCRIPT="Development class for Change and Transport Organizer" CMPTYPE="1" MTDTYPE="0" EDITORDER="14 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS"/>
   <exception CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="SAVE_FAILURE" VERSION="1" LANGU="D" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="ACTION_CANCELED" VERSION="1" LANGU="D" MTDTYPE="0" EDITORDER="2 "/>
   <source>METHOD save_implementation.
*&quot;----------------------------------------------------------------------
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

  DATA: mode            TYPE seex_access_mode,
        imp_class       TYPE seoclsname,
        ref             TYPE REF TO cl_badi_flt_data_trans_and_db,
        temp_korrnum    TYPE trkorr,
        mig_enhspotname TYPE enhspotname,
        err             TYPE REF TO cx_enh_root,
        filter_values_obj TYPE REF TO cl_badi_flt_values_alv,
        l_sxc_class       TYPE sxc_class,
        sxc_attr          TYPE sxc_attr,
        sxc_attrt         TYPE sxc_attrt.

  DATA: comp_method_h    TYPE seex_mtd_table.
  FIELD-SYMBOLS: &lt;fs_method&gt; TYPE seex_mtd_struct.

***** BAdIs und VSR *****
  DATA: imp_kind_struct TYPE sxc_impswh,
        imp_kind_table TYPE STANDARD TABLE OF sxc_impswh.


  CALL FUNCTION &apos;SXI_EXIT_INTF_READ&apos;
    EXPORTING
      inter_name   = impl-inter_name
    TABLES
      method_table = comp_method_h[]
    EXCEPTIONS
      not_existing = 1
      OTHERS       = 2.

  IF NOT filter_val_obj IS INITIAL.
    filter_values_obj = filter_val_obj.
  ENDIF.

  IF impl-imp_name IS INITIAL OR
     impl-imp_class IS INITIAL OR
     impl-inter_name IS INITIAL OR
     impl-exit_name IS INITIAL.
    MESSAGE e351(enhancement) RAISING save_failure.
  ENDIF.

* Existenz-Check
  CALL FUNCTION &apos;SXV_IMP_EXISTS&apos;
    EXPORTING
      imp_name     = impl-imp_name
    EXCEPTIONS
      not_existing = 1
      OTHERS       = 2.
  IF sy-subrc = 1.
    mode = seex_access_insert.
  ELSE.
    mode = seex_access_modify.
  ENDIF.

* get instance for saving the implementation
  ref = filter_values_obj-&gt;create_inst_for_save_and_trans( ).

  IF ref-&gt;filter_count = 0 AND NOT flt_type IS INITIAL.
    MESSAGE w213(enhancement) RAISING save_failure.
  ENDIF.

  IF devclass(1) NE &apos;$&apos; OR genflag = seex_true.
* Korrektureintrag für die Implementierung
    CALL FUNCTION &apos;RS_CORR_INSERT&apos;
      EXPORTING
        object              = impl-imp_name
        object_class        = seex_imp_ob_class
        mode                = mode
        global_lock         = seex_true
        master_language     = mast_langu
        genflag             = genflag
        devclass            = devclass
        korrnum             = korrnum
        suppress_dialog     = no_dialog
      IMPORTING
        devclass            = devclass
        korrnum             = korrnum
      EXCEPTIONS
        cancelled           = 1
        permission_failure  = 2
        unknown_objectclass = 3
        OTHERS              = 4.
    IF sy-subrc = 1.
      IF no_dialog = seex_false.
        MESSAGE s112(enhancement).
      ENDIF.
      RAISE action_canceled.
    ELSEIF sy-subrc NE 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
               RAISING save_failure.
    ENDIF.                               &quot; if sy-subrc &lt;&gt; 0
  ENDIF.

* Possibly the implementation class has changed
  SELECT SINGLE imp_class INTO imp_class FROM sxc_class
         WHERE imp_name   = impl-imp_name
           AND inter_name = impl-inter_name
           AND imp_class NE impl-imp_class.
  IF sy-subrc = 0.                     &quot; It has changed
*   Is the implementation class used in another implementation?
    SELECT COUNT(*) FROM sxc_class
            WHERE imp_class  = imp_class
              AND inter_name = impl-inter_name
              AND imp_name  NE impl-imp_name.
    IF sy-subrc = 4. &quot; The class isn&apos;t used in another implementation
      CALL FUNCTION &apos;SXV_IMP_CLASS_DELETE&apos;
        EXPORTING
          imp_name        = impl-imp_name
          inter_name      = impl-inter_name
          no_dialog       = seex_false
          class_name      = imp_class
          preserve        = seex_true
          cls_type        = seex_cls_type_normal
        CHANGING
          korrnum         = korrnum
          devclass        = devclass
        EXCEPTIONS
          failure         = 1
          action_canceled = 2
          OTHERS          = 3.
      IF sy-subrc = 2.
        IF no_dialog = seex_false.
          MESSAGE s112(enhancement).
        ENDIF.
        RAISE action_canceled.
      ELSEIF sy-subrc &lt;&gt; 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
               RAISING save_failure.

      ENDIF.
    ENDIF.
  ENDIF.

***** BAdIs und VSR **********
** save implementation kinds
******************************
  REFRESH imp_kind_table.
  imp_kind_struct-imp_name = impl-imp_name.
  LOOP AT comp_method_h ASSIGNING &lt;fs_method&gt;.
    MOVE-CORRESPONDING &lt;fs_method&gt; TO imp_kind_struct.
    imp_kind_struct-inter_name = impl-inter_name.
    APPEND imp_kind_struct TO imp_kind_table.
  ENDLOOP.
  DELETE FROM sxc_impswh WHERE imp_name = impl-imp_name.
  INSERT sxc_impswh FROM TABLE imp_kind_table.

* Aktuelle Implementierungsklassen erzeugen
  imp_class = impl-imp_class.


* save filter values for extendable filter types
* consider the correktion request not to be initial at this moment
*  IF devclass NE &apos;$TMP&apos;.
  IF devclass(1) NE &apos;$&apos;.
    temp_korrnum = korrnum.
  ELSE.
    CLEAR temp_korrnum.
  ENDIF.
  CALL METHOD ref-&gt;save
    EXPORTING
      maint_langu     = maint_langu
      imp_name        = impl-imp_name
      devclass        = devclass
    CHANGING
      korrnum         = temp_korrnum
    EXCEPTIONS
      action_canceled = 1
      OTHERS          = 2.
  IF sy-subrc = 1.
    IF no_dialog = seex_false.
      MESSAGE s112(enhancement).
    ENDIF.
    RAISE action_canceled.
  ELSEIF sy-subrc NE 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
           WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
           RAISING save_failure.

  ENDIF.

******************DATENBANKZUGRIFFE***************
  CALL METHOD cl_badi_components=&gt;save
    EXPORTING
      role           = seex_role_imp
      fcodes         = fcodes_to_insert[]
      cocos          = cocos_to_insert[]
      intas          = intas_to_insert[]
      scrns          = sscrs_to_insert[]
    EXCEPTIONS
      write_conflict = 1
      db_error       = 2
      OTHERS         = 3.
  IF sy-subrc = 1.
    IF no_dialog = seex_false.
      MESSAGE i351(enhancement).
    ENDIF.
    RAISE save_failure.
  ELSEIF sy-subrc = 2.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
           WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
           RAISING save_failure.
  ENDIF.

* Tabelle SMODILOG
  DATA: smodilog_object TYPE REF TO if_clm_tool_log,
        smodi_struct TYPE smodi_tool_log_struct,
        smodi_table TYPE smodi_tool_log_tab,
        trkey TYPE trkey,
        eu_lname TYPE eu_lname, eu_aname TYPE eu_aname,
        lines TYPE i.

  eu_aname = eu_lname = impl-imp_name.

  trkey-obj_type = seex_imp_ob_class.
  trkey-obj_name = eu_aname.
  trkey-sub_type = seex_imp_ob_class.
  trkey-sub_name = eu_lname.
  CALL FUNCTION &apos;CLM_CREATE_TOOL_LOG_OBJECT&apos;
    EXPORTING
      p_trkey      = trkey
      p_state      = smodi_c_state_active
    CHANGING
      p_log_object = smodilog_object.

  CALL METHOD smodilog_object-&gt;get_entries
    IMPORTING
      p_entries_tab = smodi_table.

  DESCRIBE TABLE smodi_table LINES lines.
  IF lines = 0.
    smodi_struct-operation = smodi_c_op_badi_imp.
    APPEND smodi_struct TO smodi_table.
  ELSE.
    LOOP AT smodi_table INTO smodi_struct.
      smodi_struct-operation = smodi_c_op_badi_imp.
      MODIFY smodi_table FROM smodi_struct.
    ENDLOOP.
  ENDIF.

  CALL METHOD smodilog_object-&gt;modify_entries
    EXPORTING
      p_entries_tab = smodi_table.
  smodilog_object-&gt;main_prog = impl-exit_name.
  smodilog_object-&gt;mod_langu = mast_langu.
  CALL METHOD smodilog_object-&gt;save
    EXPORTING
      p_state  = smodi_c_state_active
      p_trkorr = korrnum.

* Tabelle SXC_CLASS
* There can be only one(!) interface
  DELETE FROM sxc_class WHERE imp_name   = impl-imp_name.
  MOVE-CORRESPONDING impl TO l_sxc_class.
  INSERT sxc_class FROM l_sxc_class.

* Tabelle SXC_EXIT
  CALL METHOD ref-&gt;save_sxc_exit
    EXPORTING
      exit_name = impl-exit_name
      imp_name  = impl-imp_name.

* Tabelle SXC_ATTR
  SELECT SINGLE * FROM sxc_attr
                  INTO sxc_attr WHERE imp_name = impl-imp_name.
  IF sy-subrc NE 0.
    CLEAR sxc_attr.
*  ELSEIF sxc_attr-active  = seex_false.
*    CLEAR: sxc_attr-aname, sxc_attr-adate, sxc_attr-atime.
  ENDIF.

  SELECT SINGLE masterlang
    INTO mast_langu
    FROM tadir WHERE pgmid = seex_pgmid AND
                     object = seex_imp_ob_class AND
                     obj_name = impl-imp_name.

  MOVE: impl-imp_name TO sxc_attr-imp_name,
        impl-uname TO sxc_attr-uname,
        impl-udate TO sxc_attr-udate,
        impl-utime TO sxc_attr-utime.

  IF sxc_attr-uname IS INITIAL. sxc_attr-uname = sy-uname. ENDIF.
  IF sxc_attr-udate IS INITIAL. sxc_attr-udate = sy-datum. ENDIF.
  IF sxc_attr-utime IS INITIAL. sxc_attr-utime = sy-uzeit. ENDIF.

  sxc_attr-layer = impl-layer.

  sxc_attr-mst_lang = mast_langu.
  MODIFY sxc_attr FROM sxc_attr.

* Tabelle SXC_ATTRT
  MOVE-CORRESPONDING impl TO sxc_attrt.
  sxc_attrt-sprsl = maint_langu.
  MODIFY sxc_attrt FROM sxc_attrt.

  CLEAR mig_enhspotname.
  SELECT SINGLE mig_enhspotname FROM sxs_attr INTO mig_enhspotname
    WHERE exit_name = impl-exit_name.

  IF mig_enhspotname IS NOT INITIAL OR sxc_attr-mig_enhname IS NOT INITIAL.
    TRY.
        CALL METHOD cl_enh_classic_badi_migration=&gt;update_badi_implementation
          EXPORTING
            imp_name = impl-imp_name.
      CATCH cx_enh_root INTO err.
        MESSAGE err TYPE &apos;E&apos;.
    ENDTRY.
  ENDIF.

  CALL FUNCTION &apos;DB_COMMIT&apos;.
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_BW_HIERARCHY" VERSION="1" LANGU="D" DESCRIPT="Mike Schernbeck: SAPLink Plugin for BW Hierarchies" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="CO_NODENAME_DESCRIPTION" VERSION="1" LANGU="D" EXPOSURE="1" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="&apos;Description&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="CO_NODENAME_DESCRIPTIONS" VERSION="1" LANGU="D" EXPOSURE="1" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;Descriptions&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="CO_NODENAME_ELEMENT" VERSION="1" LANGU="D" EXPOSURE="1" STATE="1" EDITORDER="11 " ATTDECLTYP="2" ATTVALUE="&apos;HierarchyElement&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="CO_NODENAME_ELEMENTS" VERSION="1" LANGU="D" EXPOSURE="1" STATE="1" EDITORDER="10 " ATTDECLTYP="2" ATTVALUE="&apos;HierarchyElements&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="CO_NODENAME_INTERVAL" VERSION="1" LANGU="D" EXPOSURE="1" STATE="1" EDITORDER="9 " ATTDECLTYP="2" ATTVALUE="&apos;Interval&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="CO_NODENAME_INTERVALS" VERSION="1" LANGU="D" EXPOSURE="1" STATE="1" EDITORDER="8 " ATTDECLTYP="2" ATTVALUE="&apos;Intervals&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="CO_NODENAME_LEVEL" VERSION="1" LANGU="D" EXPOSURE="1" STATE="1" EDITORDER="7 " ATTDECLTYP="2" ATTVALUE="&apos;Level&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="CO_NODENAME_LEVELS" VERSION="1" LANGU="D" EXPOSURE="1" STATE="1" EDITORDER="6 " ATTDECLTYP="2" ATTVALUE="&apos;Levels&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="CO_NODENAME_NODE" VERSION="1" LANGU="D" EXPOSURE="1" STATE="1" EDITORDER="15 " ATTDECLTYP="2" ATTVALUE="&apos;Node&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="CO_NODENAME_NODES" VERSION="1" LANGU="D" EXPOSURE="1" STATE="1" EDITORDER="14 " ATTDECLTYP="2" ATTVALUE="&apos;Nodes&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="CO_NODENAME_NODE_TEXT" VERSION="1" LANGU="D" EXPOSURE="1" STATE="1" EDITORDER="13 " ATTDECLTYP="2" ATTVALUE="&apos;NodeText&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="CO_NODENAME_NODE_TEXTS" VERSION="1" LANGU="D" EXPOSURE="1" STATE="1" EDITORDER="12 " ATTDECLTYP="2" ATTVALUE="&apos;NodeTexts&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="CO_OBJECTTYPE" VERSION="1" LANGU="D" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;HIER&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="HIERARCHY_ID" VERSION="1" LANGU="D" DESCRIPT="Internal hierarchy ID (unique ID)" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="RSHIEID" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="HIERARCHY_VERSION" VERSION="1" LANGU="D" DESCRIPT="Hierarchy version" EXPOSURE="1" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="RSVERSION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="INFOOBJECT" VERSION="1" LANGU="D" DESCRIPT="InfoObject" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="RSIOBJNM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_BW_HIERARCHY" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_BW_HIERARCHY" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BW_HIERARCHY" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BW_HIERARCHY" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BW_HIERARCHY" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_BW_HIERARCHY" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_BW_HIERARCHY" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="VALUEHELP" EXPOSURE="2"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD checkexists.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*/---------------------------------------------------------------------\
*|                                                                     |
*|   Author:    Mike Schernbeck                                        |
*|              mike.schernbeck@googlemail.com                         |
*|                                                                     |
*\---------------------------------------------------------------------/


  SELECT COUNT( * )
    FROM rshiedir
    WHERE hieid   EQ me-&gt;objname AND
          objvers EQ &apos;A&apos;.

  IF sy-subrc EQ 0 AND
     sy-dbcnt GT 0.
    exists = abap_true.
  ELSE. &quot;IF sy-subrc EQ 0 AND...
    exists = abap_false.
  ENDIF. &quot;IF sy-subrc EQ 0 AND...

ENDMETHOD. &quot;METHOD checkexists</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createixmldocfromobject.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*/---------------------------------------------------------------------\
*|                                                                     |
*|   Author:    Mike Schernbeck                                        |
*|              mike.schernbeck@googlemail.com                         |
*|                                                                     |
*\---------------------------------------------------------------------/


  DATA:
    hierarchy_catalog_entry   TYPE rshiedir,
    hierarchy_descriptions    TYPE rssh_t_rshiedirt,
    hierarchy_tab_ref         TYPE REF TO data,
    hierarchy_intervals       TYPE rssh_t_jtab,
    hierarchy_nodes           TYPE rssh_t_rsmhiernode,
    hierarchy_node_texts      TYPE rssh_t_rsthiernode,
    hierarchy_levels          TYPE rssh_t_level,

    objecttype                TYPE string,
    ixml_rootnode             TYPE REF TO if_ixml_element.


  FIELD-SYMBOLS:
    &lt;hierarchy_tab&gt;           TYPE STANDARD TABLE.


  me-&gt;get_saplink_data( IMPORTING hierarchy_catalog_entry = hierarchy_catalog_entry
                                  hierarchy_descriptions  = hierarchy_descriptions
                                  hierarchy_tab_ref       = hierarchy_tab_ref
                                  hierarchy_intervals     = hierarchy_intervals
                                  hierarchy_nodes         = hierarchy_nodes
                                  hierarchy_node_texts    = hierarchy_node_texts
                                  hierarchy_levels        = hierarchy_levels ).


  me-&gt;infoobject = hierarchy_catalog_entry-iobjnm.
  me-&gt;hierarchy_version = hierarchy_catalog_entry-version.
  me-&gt;hierarchy_id = hierarchy_catalog_entry-hieid.


  objecttype = me-&gt;getobjecttype( ).
  ixml_rootnode = xmldoc-&gt;create_element( objecttype ).


* store hierarchy catatlog entry in iXML
  me-&gt;setattributesfromstructure( node      = ixml_rootnode
                                  structure = hierarchy_catalog_entry ).



* store hierarchy descriptions entry in iXML
  push_table_to_ixml_elem( table_elem_name  = co_nodename_descriptions
                           record_elem_name = co_nodename_description
                           table_content    = hierarchy_descriptions
                           ixml_parentnode  = ixml_rootnode
                           xmldoc           = xmldoc ).



* store nodes and leafs of hierarchy entry in iXML
  ASSIGN hierarchy_tab_ref-&gt;* TO &lt;hierarchy_tab&gt;.
  push_table_to_ixml_elem( table_elem_name  = co_nodename_elements
                           record_elem_name = co_nodename_element
                           table_content    = &lt;hierarchy_tab&gt;
                           ixml_parentnode  = ixml_rootnode
                           xmldoc           = xmldoc ).



* store hierarchy intervals entry in iXML
  push_table_to_ixml_elem( table_elem_name  = co_nodename_intervals
                           record_elem_name = co_nodename_interval
                           table_content    = hierarchy_intervals
                           ixml_parentnode  = ixml_rootnode
                           xmldoc           = xmldoc ).



* store hierarchy nodes entry in iXML
  push_table_to_ixml_elem( table_elem_name  = co_nodename_nodes
                           record_elem_name = co_nodename_node
                           table_content    = hierarchy_nodes
                           ixml_parentnode  = ixml_rootnode
                           xmldoc           = xmldoc ).



* store texts of hierarchy nodes entry in iXML
  push_table_to_ixml_elem( table_elem_name  = co_nodename_node_texts
                           record_elem_name = co_nodename_node_text
                           table_content    = hierarchy_node_texts
                           ixml_parentnode  = ixml_rootnode
                           xmldoc           = xmldoc ).



* store hierarchy levels entry in iXML
  push_table_to_ixml_elem( table_elem_name  = co_nodename_levels
                           record_elem_name = co_nodename_level
                           table_content    = hierarchy_levels
                           ixml_parentnode  = ixml_rootnode
                           xmldoc           = xmldoc ).



  xmldoc-&gt;append_child( ixml_rootnode ).
  ixmldocument = xmldoc.

ENDMETHOD. &quot;METHOD createixmldocfromobject</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createobjectfromixmldoc.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*/---------------------------------------------------------------------\
*|                                                                     |
*|   Author:    Mike Schernbeck                                        |
*|              mike.schernbeck@googlemail.com                         |
*|                                                                     |
*\---------------------------------------------------------------------/


  DATA:
    hierarchy_catalog_entry   TYPE rshiedir,
    hierarchy_descriptions    TYPE rssh_t_rshiedirt,
    hierarchy_tab_ref         TYPE REF TO data,
    hierarchy_intervals       TYPE rssh_t_jtab,
    hierarchy_nodes           TYPE rssh_t_rsmhiernode,
    hierarchy_node_texts      TYPE rssh_t_rsthiernode,
    hierarchy_levels          TYPE rssh_t_level,

    hierarchy_tab_name        TYPE string,

    objecttype                TYPE string,
    ixml_rootnode             TYPE REF TO if_ixml_element.

  FIELD-SYMBOLS:
    &lt;hierarchy_tab&gt;           TYPE STANDARD TABLE.


  objecttype = me-&gt;getobjecttype( ).
  me-&gt;xmldoc = ixmldocument.
  ixml_rootnode = xmldoc-&gt;find_from_name( objecttype ).


* extract hierarchy catalog entry from iXML
  hierarchy_catalog_entry = me-&gt;extr_hierarchy_cat_from_ixml( ixml_rootnode ).


  me-&gt;infoobject = hierarchy_catalog_entry-iobjnm.
  me-&gt;hierarchy_version = hierarchy_catalog_entry-version.
  me-&gt;hierarchy_id = hierarchy_catalog_entry-hieid.


* extract hierarchy descriptions from iXML
  extract_table_elem_from_ixml( EXPORTING ixml_parentnode  = ixml_rootnode
                                          table_elem_name  = co_nodename_descriptions
                                          record_elem_name = co_nodename_description
                                CHANGING  data             = hierarchy_descriptions ).



* extract hierarchy intervals from iXML
  extract_table_elem_from_ixml( EXPORTING ixml_parentnode  = ixml_rootnode
                                          table_elem_name  = co_nodename_intervals
                                          record_elem_name = co_nodename_interval
                                CHANGING  data             = hierarchy_intervals ).



* extract hierarchy nodes from iXML
  extract_table_elem_from_ixml( EXPORTING ixml_parentnode  = ixml_rootnode
                                          table_elem_name  = co_nodename_nodes
                                          record_elem_name = co_nodename_node
                                CHANGING  data             = hierarchy_nodes ).



* extract texts of hierarchy nodes from iXML
  extract_table_elem_from_ixml( EXPORTING ixml_parentnode  = ixml_rootnode
                                          table_elem_name  = co_nodename_node_texts
                                          record_elem_name = co_nodename_node_text
                                CHANGING  data             = hierarchy_node_texts ).



* extract hierarchy levels from iXML
  extract_table_elem_from_ixml( EXPORTING ixml_parentnode  = ixml_rootnode
                                          table_elem_name  = co_nodename_levels
                                          record_elem_name = co_nodename_level
                                CHANGING  data             = hierarchy_levels ).



* extract hierarchy elements (nodes &amp; leafs) from iXML
  hierarchy_tab_name = me-&gt;get_hierarchy_tab_name( hierarchy_catalog_entry-iobjnm ).
  CREATE DATA hierarchy_tab_ref TYPE STANDARD TABLE OF (hierarchy_tab_name).
  ASSIGN hierarchy_tab_ref-&gt;* TO &lt;hierarchy_tab&gt;.

  extract_table_elem_from_ixml( EXPORTING ixml_parentnode  = ixml_rootnode
                                          table_elem_name  = co_nodename_elements
                                          record_elem_name = co_nodename_element
                                CHANGING  data             = &lt;hierarchy_tab&gt; ).



* create hierarchy
  CALL METHOD me-&gt;import_hierarchy
    EXPORTING
      hierarchy_catalog_entry = hierarchy_catalog_entry
      hierarchy_descriptions  = hierarchy_descriptions
      hierarchy_tab_ref       = hierarchy_tab_ref
      hierarchy_intervals     = hierarchy_intervals
      hierarchy_nodes         = hierarchy_nodes
      hierarchy_node_texts    = hierarchy_node_texts
      hierarchy_levels        = hierarchy_levels
      overwrite               = overwrite.



  CONCATENATE &apos;Hierarchy&apos;(003)
              hierarchy_catalog_entry-hienm
              &apos;on InfoObject&apos;(004)
              hierarchy_catalog_entry-iobjnm
    INTO name
    SEPARATED BY space.

ENDMETHOD. &quot;METHOD createobjectfromixmldoc</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD deleteobject.                                         &quot;#EC NEEDED
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*/---------------------------------------------------------------------\
*|                                                                     |
*|   Author:    Mike Schernbeck                                        |
*|              mike.schernbeck@googlemail.com                         |
*|                                                                     |
*\---------------------------------------------------------------------/


* intentionally no code implemented

ENDMETHOD. &quot;METHOD deleteobject</source>
  </method>
  <method CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="EXTRACT_TABLE_ELEM_FROM_IXML" VERSION="1" LANGU="D" DESCRIPT="extract table-type data from iXML" EXPOSURE="1" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="EXTRACT_TABLE_ELEM_FROM_IXML" SCONAME="IXML_PARENTNODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="EXTRACT_TABLE_ELEM_FROM_IXML" SCONAME="TABLE_ELEM_NAME" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="EXTRACT_TABLE_ELEM_FROM_IXML" SCONAME="RECORD_ELEM_NAME" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="EXTRACT_TABLE_ELEM_FROM_IXML" SCONAME="DATA" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="STANDARD TABLE"/>
   <source>METHOD extract_table_elem_from_ixml.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*/---------------------------------------------------------------------\
*|                                                                     |
*|   Author:    Mike Schernbeck                                        |
*|              mike.schernbeck@googlemail.com                         |
*|                                                                     |
*\---------------------------------------------------------------------/

  DATA:
    ixml_tablenode            TYPE REF TO if_ixml_element,

    ixml_nodelist             TYPE REF TO if_ixml_node_list,
    ixml_filter               TYPE REF TO if_ixml_node_filter,
    ixml_node_iterator        TYPE REF TO if_ixml_node_iterator,
    ixml_record_element       TYPE REF TO if_ixml_element,

    new_table_record          TYPE REF TO data,

    tabledescr                TYPE REF TO cl_abap_tabledescr,
    structdescr               TYPE REF TO cl_abap_structdescr.

  FIELD-SYMBOLS:
    &lt;new_table_record&gt;        TYPE ANY.


  tabledescr ?= cl_abap_tabledescr=&gt;describe_by_data( data ).
  structdescr ?= tabledescr-&gt;get_table_line_type( ).
  CREATE DATA new_table_record TYPE HANDLE structdescr.
  ASSIGN new_table_record-&gt;* TO &lt;new_table_record&gt;.


  ixml_tablenode = ixml_parentnode-&gt;find_from_name( table_elem_name ).
  ixml_filter = ixml_tablenode-&gt;create_filter_name( record_elem_name ).
  ixml_nodelist = ixml_tablenode-&gt;get_children( ).
  ixml_node_iterator = ixml_nodelist-&gt;create_iterator_filtered( ixml_filter ).
  ixml_record_element ?= ixml_node_iterator-&gt;get_next( ).
  WHILE NOT ixml_record_element IS INITIAL.
    getstructurefromattributes( EXPORTING node      = ixml_record_element
                                CHANGING  structure = &lt;new_table_record&gt; ).
    INSERT &lt;new_table_record&gt; INTO TABLE data.

    ixml_record_element ?= ixml_node_iterator-&gt;get_next( ).
  ENDWHILE. &quot;WHILE NOT ixml_record_element IS INITIAL

ENDMETHOD. &quot;METHOD extract_table_elem_from_ixml</source>
  </method>
  <method CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="EXTR_HIERARCHY_CAT_FROM_IXML" VERSION="1" LANGU="D" DESCRIPT="extract hierarchy catatog entry from iXML (nugget/slinkee)" EXPOSURE="1" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="EXTR_HIERARCHY_CAT_FROM_IXML" SCONAME="IXML_ROOTNODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="EXTR_HIERARCHY_CAT_FROM_IXML" SCONAME="RETURN" VERSION="1" LANGU="D" DESCRIPT="Hierarchy Catalog" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="RSHIEDIR"/>
   <source>METHOD extr_hierarchy_cat_from_ixml.

  getstructurefromattributes( EXPORTING node      = ixml_rootnode
                              CHANGING  structure = return ).

ENDMETHOD. &quot;METHOD extr_hierarchy_cat_from_ixml</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD getobjecttype.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*/---------------------------------------------------------------------\
*|                                                                     |
*|   Author:    Mike Schernbeck                                        |
*|              mike.schernbeck@googlemail.com                         |
*|                                                                     |
*\---------------------------------------------------------------------/

  objecttype = co_objecttype.

ENDMETHOD. &quot;METHOD getobjecttype</source>
  </method>
  <method CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="GET_HIERARCHY_TAB_NAME" VERSION="1" LANGU="D" DESCRIPT="determine name of hierarchy table" EXPOSURE="1" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="GET_HIERARCHY_TAB_NAME" SCONAME="INFOOBJECT" VERSION="1" LANGU="D" DESCRIPT="InfoObject" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RSIOBJNM"/>
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="GET_HIERARCHY_TAB_NAME" SCONAME="RETURN" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>METHOD get_hierarchy_tab_name.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*/---------------------------------------------------------------------\
*|                                                                     |
*|   Author:    Mike Schernbeck                                        |
*|              mike.schernbeck@googlemail.com                         |
*|                                                                     |
*\---------------------------------------------------------------------/

  CASE infoobject+0(1).
    WHEN &apos;0&apos;.
      CONCATENATE &apos;/BI0/H&apos; infoobject+1 INTO return.

    WHEN OTHERS.
      CONCATENATE &apos;/BIC/H&apos; infoobject INTO return.

  ENDCASE. &quot;CASE infoobject+0(1)

ENDMETHOD. &quot;METHOD get_hierarchy_tab_name</source>
  </method>
  <method CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="GET_IOBJ_OF_HIERARCHY" VERSION="1" LANGU="D" DESCRIPT="determine InfoObject, where hierarchy is based on" EXPOSURE="1" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="GET_IOBJ_OF_HIERARCHY" SCONAME="RETURN" VERSION="1" LANGU="D" DESCRIPT="InfoObject" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="RSIOBJNM"/>
   <source>METHOD get_iobj_of_hierarchy.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*/---------------------------------------------------------------------\
*|                                                                     |
*|   Author:    Mike Schernbeck                                        |
*|              mike.schernbeck@googlemail.com                         |
*|                                                                     |
*\---------------------------------------------------------------------/

  SELECT SINGLE iobjnm
    FROM rshiedir
    INTO return
    WHERE hieid   EQ me-&gt;objname AND
          objvers EQ &apos;A&apos;.

ENDMETHOD. &quot;METHOD get_iobj_of_hierarchy</source>
  </method>
  <method CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="GET_SAPLINK_DATA" VERSION="1" LANGU="D" DESCRIPT="provide hierarchy information to be stored in nugget/slinkee" EXPOSURE="1" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="GET_SAPLINK_DATA" SCONAME="HIERARCHY_CATALOG_ENTRY" VERSION="1" LANGU="D" DESCRIPT="Hierarchy Catalog" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="RSHIEDIR"/>
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="GET_SAPLINK_DATA" SCONAME="HIERARCHY_DESCRIPTIONS" VERSION="1" LANGU="D" DESCRIPT="Description of a Hierarchy" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="RSSH_T_RSHIEDIRT"/>
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="GET_SAPLINK_DATA" SCONAME="HIERARCHY_TAB_REF" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="3" TYPE="DATA"/>
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="GET_SAPLINK_DATA" SCONAME="HIERARCHY_INTERVALS" VERSION="1" LANGU="D" DESCRIPT="Interval Table for Hierarchies" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="RSSH_T_JTAB"/>
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="GET_SAPLINK_DATA" SCONAME="HIERARCHY_NODES" VERSION="1" LANGU="D" DESCRIPT="Text Node Table" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="RSSH_T_RSMHIERNODE"/>
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="GET_SAPLINK_DATA" SCONAME="HIERARCHY_NODE_TEXTS" VERSION="1" LANGU="D" DESCRIPT="Text Node Text Table" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="RSSH_T_RSTHIERNODE"/>
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="GET_SAPLINK_DATA" SCONAME="HIERARCHY_LEVELS" VERSION="1" LANGU="D" DESCRIPT="Table Hierarchy Level" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="RSSH_T_LEVEL"/>
   <source>METHOD get_saplink_data.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*/---------------------------------------------------------------------\
*|                                                                     |
*|   Author:    Mike Schernbeck                                        |
*|              mike.schernbeck@googlemail.com                         |
*|                                                                     |
*\---------------------------------------------------------------------/


  DATA:
    hierarchy                 TYPE REF TO cl_rssh_hierarchy_base,
    hierarchy_id              TYPE rshieid,
    infoobject                TYPE rsiobjnm.


  infoobject = me-&gt;get_iobj_of_hierarchy( ).
  hierarchy_id = me-&gt;objname.


  CREATE OBJECT hierarchy
    EXPORTING
      i_iobjnm            = infoobject
*      i_no_htab           = rs_c_false
      i_hieid             = hierarchy_id
      i_objvers           = &apos;A&apos;
*      i_s_hiesel          =
*      i_loadotherver      =
    EXCEPTIONS
      canceled            = 01
      hierarchy_not_found = 02
      OTHERS              = 99.

  IF sy-subrc NE 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF. &quot;IF sy-subrc NE 0


  hierarchy-&gt;load_hierarchy( ).



  CALL METHOD hierarchy-&gt;get_hierarchy
    IMPORTING
      e_s_hiedir    = hierarchy_catalog_entry
      e_t_hiedirt   = hierarchy_descriptions
      e_r_htab      = hierarchy_tab_ref
*      e_t_htab      =
      e_t_jtab      = hierarchy_intervals
      e_t_hiernode  = hierarchy_nodes
      e_t_hiernodet = hierarchy_node_texts
      e_t_level     = hierarchy_levels.

ENDMETHOD. &quot;METHOD get_saplink_data</source>
  </method>
  <method CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="HIERARCHY_AUTH_CHECK" VERSION="1" LANGU="D" DESCRIPT="authority check for BI hierarchy activity" EXPOSURE="1" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="HIERARCHY_AUTH_CHECK" SCONAME="INFOOBJECT" VERSION="1" LANGU="D" DESCRIPT="InfoObject" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RSIOBJNM"/>
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="HIERARCHY_AUTH_CHECK" SCONAME="HIERARCHY_NAME" VERSION="1" LANGU="D" DESCRIPT="Hierarchy name" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RSHIENM"/>
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="HIERARCHY_AUTH_CHECK" SCONAME="VERSION" VERSION="1" LANGU="D" DESCRIPT="Hierarchy version" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RSVERSION"/>
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="HIERARCHY_AUTH_CHECK" SCONAME="ACTIVITY" VERSION="1" LANGU="D" DESCRIPT="Activity" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ACTIV_AUTH"/>
   <exception CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="HIERARCHY_AUTH_CHECK" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD hierarchy_auth_check.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*/---------------------------------------------------------------------\
*|                                                                     |
*|   Author:    Mike Schernbeck                                        |
*|              mike.schernbeck@googlemail.com                         |
*|                                                                     |
*\---------------------------------------------------------------------/

  DATA:
    error_message   TYPE string.


  CALL FUNCTION &apos;RSSB_AUTHORITY_ADMWB_HIERARCHY&apos;
    EXPORTING
      i_iobjnm            = infoobject
      i_hienm             = hierarchy_name
      i_version           = version
      i_actvt             = activity
      i_try_display       = abap_false
*    IMPORTING
*      E_DISPLAY_ONLY      =
    EXCEPTIONS
      user_not_authorized = 01
      OTHERS              = 99.

  IF sy-subrc EQ 0.
*   user is athorized to create hierarchy
  ELSEIF sy-subrc EQ 01.
*   user ist not authorized to create hierarchy
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;not_authorized.
  ELSE.
*   another error ocurred while executng RSSB_AUTHORITY_ADMWB_HIERARCHY
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
      INTO error_message.

    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = error_message.
  ENDIF.

ENDMETHOD. &quot;METHOD hierarchy_auth_check</source>
  </method>
  <method CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="IMPORT_HIERARCHY" VERSION="1" LANGU="D" DESCRIPT="create / update hierarchy" EXPOSURE="1" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="IMPORT_HIERARCHY" SCONAME="HIERARCHY_CATALOG_ENTRY" VERSION="1" LANGU="D" DESCRIPT="Hierarchy Catalog" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RSHIEDIR"/>
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="IMPORT_HIERARCHY" SCONAME="HIERARCHY_DESCRIPTIONS" VERSION="1" LANGU="D" DESCRIPT="Description of a Hierarchy" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RSSH_T_RSHIEDIRT"/>
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="IMPORT_HIERARCHY" SCONAME="HIERARCHY_TAB_REF" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="DATA"/>
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="IMPORT_HIERARCHY" SCONAME="HIERARCHY_INTERVALS" VERSION="1" LANGU="D" DESCRIPT="Interval Table for Hierarchies" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RSSH_T_JTAB"/>
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="IMPORT_HIERARCHY" SCONAME="HIERARCHY_NODES" VERSION="1" LANGU="D" DESCRIPT="Text Node Table" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RSSH_T_RSMHIERNODE"/>
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="IMPORT_HIERARCHY" SCONAME="HIERARCHY_NODE_TEXTS" VERSION="1" LANGU="D" DESCRIPT="Text Node Text Table" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RSSH_T_RSTHIERNODE"/>
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="IMPORT_HIERARCHY" SCONAME="HIERARCHY_LEVELS" VERSION="1" LANGU="D" DESCRIPT="Table Hierarchy Level" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RSSH_T_LEVEL"/>
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="IMPORT_HIERARCHY" SCONAME="OVERWRITE" VERSION="1" LANGU="D" DESCRIPT="Boolean Variable (X=True, -=False, Space=Unknown)" CMPTYPE="1" MTDTYPE="0" EDITORDER="8 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BOOLEAN"/>
   <exception CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="IMPORT_HIERARCHY" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD import_hierarchy.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*/---------------------------------------------------------------------\
*|                                                                     |
*|   Author:    Mike Schernbeck                                        |
*|              mike.schernbeck@googlemail.com                         |
*|                                                                     |
*\---------------------------------------------------------------------/

  TYPE-POOLS:
    rssb.

  DATA:
    hierarchy                 TYPE REF TO cl_rssh_hierarchy_base,
    hierarchy_selection       TYPE rssh_s_dfiobjhiesel,
    new_hierarchy_catalog     TYPE rshiedir,
    error_message             TYPE string,
    already_exists            TYPE boolean.

  FIELD-SYMBOLS:
    &lt;hierarchy_tab&gt;           TYPE STANDARD TABLE.


  MOVE-CORRESPONDING hierarchy_catalog_entry TO hierarchy_selection.

  CREATE OBJECT hierarchy
    EXPORTING
      i_iobjnm = hierarchy_catalog_entry-iobjnm.


  IF me-&gt;checkexists( ) EQ abap_true.
    IF overwrite EQ abap_true.
*     delete existing hierarchy
      already_exists = abap_true.
    ELSE. &quot;IF overwrite EQ abap_true
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
    ENDIF. &quot;IF overwrite EQ abap_true
  ELSE. &quot;IF me-&gt;checkexists( ) EQ abap_true AND...
    already_exists = abap_false.
  ENDIF. &quot;IF me-&gt;checkexists( ) EQ abap_true AND...


* create hierarchy
  CASE already_exists.
    WHEN abap_true.
*     check, whether user is authorized to change the hierarchy
      hierarchy_auth_check( infoobject     = hierarchy_catalog_entry-iobjnm
                            hierarchy_name = hierarchy_catalog_entry-hienm
                            version        = hierarchy_catalog_entry-version
                            activity       = rssb_c_auth_actvt-change ).

      hierarchy-&gt;create_hierarchy( i_s_hiesel = hierarchy_selection
                                   i_newone   = abap_false ).

    WHEN abap_false.
*     check, whether user is authorized to create the hierarchy
      hierarchy_auth_check( infoobject     = hierarchy_catalog_entry-iobjnm
                            hierarchy_name = hierarchy_catalog_entry-hienm
                            version        = hierarchy_catalog_entry-version
                            activity       = rssb_c_auth_actvt-create ).

      hierarchy-&gt;create_hierarchy( i_s_hiesel = hierarchy_selection
                                   i_newone   = abap_true ).
  ENDCASE. &quot;CASE already_exists


* fill hierarchy (nodes, leafs, texts, ...)
  ASSIGN hierarchy_tab_ref-&gt;* TO &lt;hierarchy_tab&gt;.
  hierarchy-&gt;set_hierarchy( i_t_hiedirt   = hierarchy_descriptions
                            i_t_htab      = &lt;hierarchy_tab&gt;
                            i_t_jtab      = hierarchy_intervals
                            i_t_hiernodet = hierarchy_node_texts
                            i_t_level     = hierarchy_levels ).


* save hierarchy
  hierarchy-&gt;save_hierarchy( ).


** activate hierarchy
*  hierarchy-&gt;get_hierarchy( IMPORTING e_s_hiedir = new_hierarchy_catalog ).
*
*  CALL FUNCTION &apos;RSSH_HIERARCHY_ACTIVATE&apos;
*    EXPORTING
*      i_hieid                = new_hierarchy_catalog-hieid
**      I_OBJVERS              = RS_C_OBJVERS-MODIFIED
*    EXCEPTIONS
*      name_error             = 01
*      iobj_not_found         = 02
*      hierarchy_not_found    = 03
*      hierarchy_active_error = 04
*      OTHERS                 = 99.
*
*  IF sy-subrc NE 0.
**   activation failed
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
*      INTO error_message.
*
*    RAISE EXCEPTION TYPE zcx_saplink
*      EXPORTING
*        textid = zcx_saplink=&gt;error_message
*        msg    = error_message.
*  ENDIF. &quot;IF sy-subrc NE 0


* dequeue hierarchy
  hierarchy-&gt;clear_hierarchy( i_create_new_ref = abap_false
                              i_no_dequeue     = abap_false ).

ENDMETHOD. &quot;METHOD import_hierarchy</source>
  </method>
  <method CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="PUSH_TABLE_TO_IXML_ELEM" VERSION="1" LANGU="D" DESCRIPT="push table-type data into iXML" EXPOSURE="1" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="PUSH_TABLE_TO_IXML_ELEM" SCONAME="TABLE_ELEM_NAME" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="PUSH_TABLE_TO_IXML_ELEM" SCONAME="IXML_PARENTNODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="PUSH_TABLE_TO_IXML_ELEM" SCONAME="TABLE_CONTENT" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STANDARD TABLE"/>
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="PUSH_TABLE_TO_IXML_ELEM" SCONAME="RECORD_ELEM_NAME" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK_BW_HIERARCHY" CMPNAME="PUSH_TABLE_TO_IXML_ELEM" SCONAME="XMLDOC" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <source>METHOD push_table_to_ixml_elem.

  DATA:
    ixml_tableelem    TYPE REF TO if_ixml_element,
    ixml_recordelem   TYPE REF TO if_ixml_element.

  FIELD-SYMBOLS:
    &lt;table_record&gt;    TYPE ANY.


  ixml_tableelem = xmldoc-&gt;create_element( table_elem_name ).
  LOOP AT table_content ASSIGNING &lt;table_record&gt;.
    ixml_recordelem = xmldoc-&gt;create_element( record_elem_name ).
    setattributesfromstructure( node = ixml_recordelem
                                structure = &lt;table_record&gt; ).
    ixml_tableelem-&gt;append_child( ixml_recordelem ).
  ENDLOOP. &quot;LOOP AT table_content ASSIGNING &lt;table_record&gt;
  ixml_parentnode-&gt;append_child( ixml_tableelem ).

ENDMETHOD. &quot;METHOD push_table_to_ixml_elem</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="VALUEHELP" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD valuehelp.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*/---------------------------------------------------------------------\
*|                                                                     |
*|   Author:    Mike Schernbeck                                        |
*|              mike.schernbeck@googlemail.com                         |
*|                                                                     |
*\---------------------------------------------------------------------/

  DATA:
    infoobject_of_hierarchy   TYPE rsiobjnm,
    popup_answer              TYPE string,
    selected_hierarchy        TYPE rssh_s_hiedirtxt.


* ask user for name of InfoObject
  CALL FUNCTION &apos;POPUP_TO_GET_VALUE&apos;
    EXPORTING
      fieldname           = &apos;IOBJNM&apos;
      tabname             = &apos;RSDIOBJ&apos;
      titel               = &apos;On which Characteristic is the Hierarchy based on?&apos;(001)
      valuein             = infoobject_of_hierarchy
    IMPORTING
      answer              = popup_answer
      valueout            = infoobject_of_hierarchy
    EXCEPTIONS
      fieldname_not_found = 01
      OTHERS              = 99.

  IF sy-subrc EQ 0.
    IF popup_answer NE &apos;C&apos; AND    &quot;user clicked cancel button
       NOT infoobject_of_hierarchy IS INITIAL.

      CALL FUNCTION &apos;RSSH_HIERARCHY_F4&apos;
        EXPORTING
          i_iobjnm              = infoobject_of_hierarchy
*         I_T_HIETYPE           =
          i_title               = &apos;Select Hierarchy&apos;(002)
        IMPORTING
*         E_S_DFTXTHIESEL       =
          e_s_hiedirtxt         = selected_hierarchy
        EXCEPTIONS
          cancelled             = 01
          OTHERS                = 99.

      IF sy-subrc EQ 0.
        e_objname = selected_hierarchy-hieid.
      ELSE. &quot;IF sy-subrc EQ 0
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
          WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF. &quot;IF sy-subrc EQ 0

    ENDIF. &quot;IF popup_answer NE &apos;C&apos;
  ELSE. &quot;IF sy-subrc EQ 0
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF. &quot;IF sy-subrc EQ 0

ENDMETHOD. &quot;METHOD valuehelp</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_BI_ODSO" VERSION="1" LANGU="D" DESCRIPT="SAPlink - BI  - ODS Object" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_BI_ODSO" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_BI_ODSO" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BI_ODSO" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BI_ODSO" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BI_ODSO" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_BI_ODSO" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method CHECKEXISTS.

*      Plugin created by:
*      Claudio Ciardelli
*      claudio.ciardelli@gmail.com

  DATA: l_name TYPE ddobjname.

  l_name = objname.

* Check if cube exists
  CALL METHOD cl_rsd_dta=&gt;check_name_for_new_dta
    EXPORTING
      i_infoprov        = l_name
      i_tlogo           = rs_c_tlogo-ods_object
*        I_BWAPPL          =
    EXCEPTIONS
      name_invalid      = 1
      name_already_used = 2
      OTHERS            = 3.

  IF sy-subrc &lt;&gt; 0.
*    MESSAGE ID   sy-msgid TYPE &apos;I&apos; NUMBER sy-msgno
*            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    exists = &apos;X&apos;.
    EXIT.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CREATEIXMLDOCFROMOBJECT.

*      Plugin created by:
*      Claudio Ciardelli
*      claudio.ciardelli@gmail.com

*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA l_odsoname TYPE ddobjname.
  l_odsoname = objname.

  TYPE-POOLS rsdg.

  DATA: l_s_details        TYPE BAPI6116.
  DATA: l_s_return         TYPE BAPIRET2.

  DATA: l_t_infoobjects  TYPE TABLE OF BAPI6116IO.
  DATA: l_t_navigationattributes
                         TYPE TABLE OF BAPI6116NA.
  DATA: l_t_indexes      TYPE TABLE OF BAPI6116IN.
  DATA: l_t_indexesinfoobjects
                         TYPE TABLE OF BAPI6116II.

  DATA: l_s_infoobjects  TYPE BAPI6116IO.
  DATA: l_s_navigationattributes
                         TYPE BAPI6116NA.
  DATA: l_s_indexes      TYPE BAPI6116IN.
  DATA: l_s_indexesinfoobjects
                         TYPE BAPI6116II.


  DATA: infoobjects_node  TYPE REF TO if_ixml_element.
  DATA: navigationattributes_node
                         TYPE REF TO if_ixml_element.
  DATA: indexes_node     TYPE REF TO if_ixml_element.
  DATA: indexesinfoobjects_node
                         TYPE REF TO if_ixml_element.


* get ods object
  CALL FUNCTION &apos;BAPI_ODSO_GETDETAIL&apos;
   EXPORTING
    OBJVERS                    = RS_C_OBJVERS-ACTIVE
    ODSOBJECT                  = l_odsoname
   IMPORTING
    DETAILS                    = l_s_details
    RETURN                     = l_s_return
   TABLES
    INFOOBJECTS                = l_t_infoobjects
    NAVIGATIONATTRIBUTES       = l_t_navigationattributes
    INDEXES                    = l_t_indexes
    INDEXESINFOOBJECTS         = l_t_indexesinfoobjects
            .

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).


  setattributesfromstructure( node = rootnode structure = l_s_details ).

* infoobjects
  LOOP AT l_t_infoobjects INTO l_s_infoobjects.
    infoobjects_node = xmldoc-&gt;create_element( &apos;infoobject&apos; ).
    setattributesfromstructure(
        node = infoobjects_node structure = l_s_infoobjects ).
    rc = rootnode-&gt;append_child( infoobjects_node ).
  ENDLOOP.

* navigationattributes
  LOOP AT l_t_navigationattributes INTO l_s_navigationattributes.
    navigationattributes_node = xmldoc-&gt;create_element(
        &apos;navigationattibute&apos; ).
    setattributesfromstructure(
        node = navigationattributes_node
        structure = l_s_navigationattributes ).
    rc = rootnode-&gt;append_child( navigationattributes_node ).
  ENDLOOP.

* indexes
  LOOP AT l_t_indexes INTO l_s_indexes.
    indexes_node = xmldoc-&gt;create_element(
        &apos;index&apos; ).
    setattributesfromstructure(
        node = indexes_node
        structure = l_s_indexes ).
    rc = rootnode-&gt;append_child( indexes_node ).
  ENDLOOP.

* indexesinfoobjects
  LOOP AT l_t_indexesinfoobjects INTO l_s_indexesinfoobjects.
    indexesinfoobjects_node = xmldoc-&gt;create_element(
        &apos;indexinfoobject&apos; ).
    setattributesfromstructure(
        node = indexesinfoobjects_node
        structure = l_s_indexesinfoobjects ).
    rc = rootnode-&gt;append_child( indexesinfoobjects_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createobjectfromixmldoc.

*      Plugin created by:
*      Claudio Ciardelli
*      claudio.ciardelli@gmail.com

  TYPE-POOLS rsdg.


*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA l_subrc     TYPE sysubrc.
  DATA checkexists TYPE flag.
  DATA l_objtype   TYPE string.



  DATA: l_s_details        TYPE BAPI6116.
  DATA: l_t_return         TYPE TABLE OF BAPIRET2.
  DATA: l_s_return         TYPE BAPIRET2.
  DATA: l_t_infoobjects  TYPE TABLE OF BAPI6116IO.
  DATA: l_t_navigationattributes
                         TYPE TABLE OF BAPI6116NA.
  DATA: l_t_indexes      TYPE TABLE OF BAPI6116IN.
  DATA: l_t_indexesinfoobjects
                         TYPE TABLE OF BAPI6116II.

  DATA: l_s_infoobjects  TYPE BAPI6116IO.
  DATA: l_s_navigationattributes
                         TYPE BAPI6116NA.
  DATA: l_s_indexes      TYPE BAPI6116IN.
  DATA: l_s_indexesinfoobjects
                         TYPE BAPI6116II.


  DATA: infoobjects_node  TYPE REF TO if_ixml_element.
  DATA: navigationattributes_node
                         TYPE REF TO if_ixml_element.
  DATA: indexes_node     TYPE REF TO if_ixml_element.
  DATA: indexesinfoobjects_node
                         TYPE REF TO if_ixml_element.

  DATA: l_objectExists   TYPE flag.
  DATA: l_createODS      TYPE flag.


* Get object type
  l_objtype = getobjecttype( ).

* Check if object exists
  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.


  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( l_objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = l_s_details.

  objname = l_s_details-odsobject.


* retrieve Tabl details

* infoobjects
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;infoobject&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR infoobjects_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = l_s_infoobjects.
    APPEND l_s_infoobjects TO l_t_infoobjects.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* navigationattributes
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;navigationattribute&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR navigationattributes_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = l_s_navigationattributes.
    APPEND l_s_navigationattributes TO l_t_navigationattributes.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* indexes
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;index&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR indexes_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = l_s_indexes.
    APPEND l_s_indexes TO l_t_indexes.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* indexesinfoobjects
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;indexinfoobject&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR indexesinfoobjects_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = l_s_indexesinfoobjects.
    APPEND l_s_indexesinfoobjects TO l_t_indexesinfoobjects.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  l_objectExists = me-&gt;checkexists( ).

* Actually create object

  if overwrite = &apos;X&apos;.
    if l_objectExists = &apos;X&apos;.
      l_createODS = &apos;&apos;.
    else.
* Create object
      l_createODS = &apos;X&apos;.
    endif.
  else.
* Create object
    l_createODS = &apos;X&apos;.
  endif.


  if l_createODS = &apos;X&apos;.
    CALL FUNCTION &apos;BAPI_ODSO_CREATE&apos;
      EXPORTING
        DETAILS                    = l_s_details
* IMPORTING
*   ODSOBJECT                  =
      TABLES
       INFOOBJECTS                = l_t_infoobjects
       NAVIGATIONATTRIBUTES       = l_t_navigationattributes
       INDEXES                    = l_t_indexes
       INDEXESINFOOBJECTS         = l_t_indexesinfoobjects
       RETURN                     = l_t_return
              .
  else.
    CALL FUNCTION &apos;BAPI_ODSO_CHANGE&apos;
      EXPORTING
        ODSOBJECT            = l_s_details-odsobject
        DETAILS              = l_s_details
      TABLES
        INFOOBJECTS          = l_t_infoobjects
        NAVIGATIONATTRIBUTES = l_t_navigationattributes
        INDEXES              = l_t_indexes
        INDEXESINFOOBJECTS   = l_t_indexesinfoobjects
        RETURN               = l_t_return.
  endif.

  read table l_t_return index 1 into l_s_return.
  CASE l_s_return-type.
    WHEN &apos;E&apos; OR &apos;W&apos;.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.

    loop at l_t_return into l_s_return.
    MESSAGE ID l_s_return-id TYPE l_s_return-type NUMBER
       l_s_return-number
       WITH l_s_return-message_v1 l_s_return-message_v2
            l_s_return-message_v3 l_s_return-message_v4.
    endloop.
  ENDCASE.

  name = objname.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD DELETEOBJECT.

*      Plugin created by:
*      Claudio Ciardelli
*      claudio.ciardelli@gmail.com
GET TIME.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE.

*      Plugin created by:
*      Claudio Ciardelli
*      claudio.ciardelli@gmail.com

  objecttype = &apos;ODSO&apos;.  &quot;ODS Objects (Only tested under BW3.5)

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_TDAT" VERSION="1" LANGU="D" DESCRIPT="SapLink Class Installer" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZSAPLINK_TDAT" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_TDAT" TYPEGROUP="SEOP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_TDAT" TYPEGROUP="SEOR" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_TDAT" TYPEGROUP="SEOS" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_TDAT" TYPEGROUP="SEOT" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_TDAT" TYPEGROUP="SEOX" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <forwardDeclaration>SEOP</forwardDeclaration>
  <forwardDeclaration>SEOR</forwardDeclaration>
  <forwardDeclaration>SEOS</forwardDeclaration>
  <forwardDeclaration>SEOT</forwardDeclaration>
  <forwardDeclaration>SEOX</forwardDeclaration>
  <attribute CLSNAME="ZSAPLINK_TDAT" CMPNAME="T_E071" VERSION="1" LANGU="D" DESCRIPT="Task objects" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZSAPLINK_TOOLS=&gt;TY_T_E071" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TDAT" CMPNAME="T_E071K" VERSION="1" LANGU="D" DESCRIPT="Task objects keys" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZSAPLINK_TOOLS=&gt;TY_T_E071K" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TDAT" CMPNAME="V_MODE" VERSION="1" LANGU="D" DESCRIPT="O=add object. R=add request" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="C" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_TDAT" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_TDAT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TDAT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TDAT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TDAT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_TDAT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  exists = abap_false.  &quot; No implementation of existence check

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_TDAT" CMPNAME="CREATEIXMLDOCFROMDATABASE" VERSION="1" LANGU="D" DESCRIPT="Creates an IF_IXML_DOCUMENT from OBJNAME Attr.  of database" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_TDAT" CMPNAME="CREATEIXMLDOCFROMDATABASE" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <exception CLSNAME="ZSAPLINK_TDAT" CMPNAME="CREATEIXMLDOCFROMDATABASE" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method CREATEIXMLDOCFROMDATABASE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  TYPES: BEGIN OF ty_tdat,
           name     TYPE dd02v-tabname,
           activity TYPE e071-activity,
         END OF ty_tdat.

  TYPES: BEGIN OF ty_tabu,
           tabname  TYPE dd02v-tabname,
         END OF ty_tabu.

  DATA: lv_str     TYPE string,
        lv_objtype TYPE string,
        lv_objname TYPE ddobjname,

        lr_t_table  TYPE REF TO data,

        lt_objects TYPE STANDARD TABLE OF objs,

        lo_tdat_node    TYPE REF TO if_ixml_element,
        lo_tabu_node    TYPE REF TO if_ixml_element,
        lo_datarow_node TYPE REF TO if_ixml_element,
        ls_tdat         TYPE ty_tdat,
        ls_tabu         TYPE ty_tabu.

  FIELD-SYMBOLS: &lt;fs_t_table&gt; TYPE STANDARD TABLE,
                 &lt;fs_s_table&gt; TYPE any,
                 &lt;fs_objects&gt; LIKE LINE OF lt_objects.

* Get the object type and name
  lv_objtype = me-&gt;getobjecttype( ).
  lv_objname = objname.

* Get the list of tables in TDAT
  SELECT  objectname tabname
    INTO  TABLE lt_objects
    FROM  objs
    WHERE objectname = objname.

  IF sy-subrc &lt;&gt; 0.
    lv_str = `TDAT not found in object table`.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_str.
  ENDIF.

* Save data from each table only once in the XML document
  SORT lt_objects BY tabname.
  DELETE ADJACENT DUPLICATES FROM lt_objects COMPARING tabname.

  SORT lt_objects BY objectname tabname.

* Save contents of all TDAT tables in XML document
  LOOP AT lt_objects ASSIGNING &lt;fs_objects&gt;.

    AT NEW objectname.

* Creates the TDAT root node
      lo_tdat_node = xmldoc-&gt;create_element( lv_objtype ).
      ls_tdat-name  = &lt;fs_objects&gt;-objectname.
      CLEAR ls_tdat-activity.
      me-&gt;setattributesfromstructure( node      = lo_tdat_node
                                      structure = ls_tdat  ).

    ENDAT.

    AT NEW tabname.

* Creates the TABU node
      lo_tabu_node = xmldoc-&gt;create_element( `TABU` ).
      ls_tabu-tabname  = &lt;fs_objects&gt;-tabname.
      me-&gt;setattributesfromstructure( node      = lo_tabu_node
                                      structure = ls_tabu  ).

      CREATE DATA lr_t_table TYPE STANDARD TABLE OF (ls_tabu-tabname).
      ASSIGN lr_t_table-&gt;* TO &lt;fs_t_table&gt;.

* Get data from table
      zsaplink_tools=&gt;get_filtered_table( EXPORTING
                                            iv_vdat_tdat    = ls_tdat-name
                                            iv_is_tdat      = abap_true
                                            iv_tabname      = ls_tabu-tabname
                                          IMPORTING
                                            et_results      = &lt;fs_t_table&gt; ).

* Save data to XML document
      LOOP AT &lt;fs_t_table&gt; ASSIGNING &lt;fs_s_table&gt;.

* Creates the DataRow node
        lo_datarow_node = xmldoc-&gt;create_element( `DataRow` ).
        me-&gt;setattributesfromstructure( node      = lo_datarow_node
                                        structure = &lt;fs_s_table&gt;  ).
        lo_tabu_node-&gt;append_child( lo_datarow_node ).

      ENDLOOP.

      lo_tdat_node-&gt;append_child( lo_tabu_node ).

    ENDAT.

    AT END OF objectname.

      xmldoc-&gt;append_child( lo_tdat_node ).
      EXIT.

    ENDAT.

  ENDLOOP.

  ixmldocument = xmldoc.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

* Get all tasks of the request supplied in the calling program, if that&apos;s the case
  zsaplink_tools=&gt;init_plugin( EXPORTING
                                 iv_mastertype = &apos;TDAT&apos;
                               IMPORTING
                                 et_e071  = me-&gt;t_e071
                                 et_e071k = me-&gt;t_e071k
                               CHANGING
                                 cv_mode  = me-&gt;v_mode ).

  IF me-&gt;v_mode = zsaplink_tools=&gt;c_mode_request.
    ixmldocument = me-&gt;createixmldocfromrequest( ).
  ELSEIF me-&gt;v_mode = zsaplink_tools=&gt;c_mode_object.
    ixmldocument = me-&gt;createixmldocfromdatabase( ).
  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_TDAT" CMPNAME="CREATEIXMLDOCFROMREQUEST" VERSION="1" LANGU="D" DESCRIPT="Creates an IF_IXML_DOCUMENT from OBJNAME Attr.  of a request" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_TDAT" CMPNAME="CREATEIXMLDOCFROMREQUEST" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <exception CLSNAME="ZSAPLINK_TDAT" CMPNAME="CREATEIXMLDOCFROMREQUEST" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method CREATEIXMLDOCFROMREQUEST.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  TYPES: BEGIN OF ty_tdat,
           name     TYPE dd02v-tabname,
           activity TYPE e071-activity,
         END OF ty_tdat.

  TYPES: BEGIN OF ty_tabu,
           tabname  TYPE dd02v-tabname,
         END OF ty_tabu.

  DATA: lv_str           TYPE string,
        lv_objtype       TYPE string,
        lv_from          TYPE sy-tabix,
        lv_len           TYPE i,
        lv_complete_keys TYPE abap_bool,
        lv_charfields    TYPE string,
        lv_keyfields     TYPE string,
        lv_where         TYPE string,

        lr_t_table  TYPE REF TO data,
        lr_s_table  TYPE REF TO data,
        lr_tabkeys  TYPE REF TO data,
        lr_tabkeys2 TYPE REF TO data,

        lt_dd03p       TYPE STANDARD TABLE OF dd03p,
        lt_fields      TYPE cl_abap_structdescr=&gt;component_table,
        lt_keyfields   TYPE abap_keydescr_tab,
        lt_charfields  TYPE abap_keydescr_tab,
        lt_sortfields  TYPE abap_sortorder_tab,

        lo_structdescr TYPE REF TO cl_abap_structdescr,
        lo_tabledescr  TYPE REF TO cl_abap_tabledescr,
        lo_tabkeydescr TYPE REF TO cl_abap_typedescr,
        lo_typedescr   TYPE REF TO cl_abap_typedescr,

        lo_tdat_node    TYPE REF TO if_ixml_element,
        lo_tabu_node    TYPE REF TO if_ixml_element,
        lo_datarow_node TYPE REF TO if_ixml_element,
        ls_tdat         TYPE ty_tdat,
        ls_tabu         TYPE ty_tabu.

  FIELD-SYMBOLS: &lt;fs_e071&gt;       LIKE LINE OF t_e071,
                 &lt;fs_e071k&gt;      LIKE LINE OF t_e071k,
                 &lt;fs_t_table&gt;    TYPE STANDARD TABLE,
                 &lt;fs_s_table&gt;    TYPE any,
                 &lt;fs_t_tabkeys&gt;  TYPE STANDARD TABLE,
                 &lt;fs_t_tabkeys2&gt; TYPE STANDARD TABLE,
                 &lt;fs_s_tabkey&gt;   TYPE any,
                 &lt;fs_field&gt;      LIKE LINE OF lt_fields,
                 &lt;fs_dd03p&gt;      LIKE LINE OF lt_dd03p,
                 &lt;fs_sortfield&gt;  LIKE LINE OF lt_sortfields,
                 &lt;fs_keyfield&gt;   LIKE LINE OF lt_keyfields.

* Get the object type
  lv_objtype = me-&gt;getobjecttype( ).

* Look for the first task activity not yet processed
  READ TABLE t_e071 ASSIGNING &lt;fs_e071&gt;
    WITH KEY obj_name = objname
             used     = space
    BINARY SEARCH.

  IF sy-subrc &lt;&gt; 0.
    lv_str = `No more object(s) of this type found in the request(s) supplied`.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_str.
  ENDIF.

* Position on the first key of the object being processed
  READ TABLE t_e071k TRANSPORTING NO FIELDS WITH KEY trkorr     = &lt;fs_e071&gt;-trkorr
                                                     activity   = &lt;fs_e071&gt;-activity
                                                     mastername = &lt;fs_e071&gt;-obj_name.

  IF sy-subrc = 0.

    lv_from = sy-tabix.

* Process all keys belonging to current object
    LOOP AT t_e071k ASSIGNING &lt;fs_e071k&gt; FROM lv_from.

      AT NEW mastername.

* Creates the TDAT root node
        lo_tdat_node = xmldoc-&gt;create_element( lv_objtype ).
        ls_tdat-name  = objname.
        ls_tdat-activity = &lt;fs_e071&gt;-activity.
        me-&gt;setattributesfromstructure( node      = lo_tdat_node
                                        structure = ls_tdat  ).

      ENDAT.

      AT NEW objname.

* Get information about all fields of the table
        REFRESH lt_dd03p.
        CALL FUNCTION &apos;DDIF_TABL_GET&apos;
          EXPORTING
            name          = &lt;fs_e071k&gt;-objname
            langu         = sy-langu
          TABLES
            dd03p_tab     = lt_dd03p
          EXCEPTIONS
            illegal_input = 1
            OTHERS        = 2.

        IF sy-subrc &lt;&gt; 0 OR lt_dd03p[] IS INITIAL.
          lv_str = `Table does not exist in the active state`.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING
              textid = zcx_saplink=&gt;error_message
              msg    = lv_str.
        ENDIF.

* Create the type object for field E071K-TABKEY
        lo_tabkeydescr = cl_abap_typedescr=&gt;describe_by_name( `E071K-TABKEY` ).

* Loop thru all key fields of the table:
*   1) Building a list of all key fields
*   2) Building a list of all CHARLIKE key fields that fit fields E071K-TABKEY
*   3) Building the WHERE clause for the SELECT to be used for data retrieval, using FOR ALL ENTRIES
*   4) Setting up table LT_FIELDS, with all key fields
        CLEAR: lv_keyfields, lv_charfields, lv_where.
        lv_complete_keys = abap_true.
        REFRESH lt_fields.
        LOOP AT lt_dd03p ASSIGNING &lt;fs_dd03p&gt;
          WHERE keyflag = abap_true AND
                fieldname(1) &lt;&gt; &apos;.&apos;.

* Build the list of all key fields names
          CONCATENATE lv_keyfields &lt;fs_dd03p&gt;-fieldname INTO lv_keyfields
            SEPARATED BY space.

* Add key field to the key type strucuture of the object keys table
          APPEND INITIAL LINE TO lt_fields ASSIGNING &lt;fs_field&gt;.
          &lt;fs_field&gt;-name = &lt;fs_dd03p&gt;-fieldname.
          &lt;fs_field&gt;-type ?= cl_abap_structdescr=&gt;describe_by_name( &lt;fs_dd03p&gt;-rollname ).

          CHECK lv_complete_keys = abap_true.

* Check if structure containing all key fields of the View table is CHARLIKE
          IF &lt;fs_field&gt;-type-&gt;type_kind CN &apos;CNDT&apos;.
            lv_complete_keys = abap_false.
            CONTINUE.
          ENDIF.

* Build the type object for key fields found so far, to help answer the following question below
          lo_structdescr = cl_abap_structdescr=&gt;create( lt_fields ).

* If I add current CHARLIKE key field to key structure,
*   will it make the CHARLIKE key structure larger than field E071K-TABKEY ?
          IF lo_structdescr-&gt;length &gt; lo_tabkeydescr-&gt;length.
            lv_complete_keys = abap_false.
            CONTINUE.
          ENDIF.

* Build the list of CHARLIKE key fields names
          CONCATENATE lv_charfields &lt;fs_dd03p&gt;-fieldname INTO lv_charfields
            SEPARATED BY space.

* Build the &apos;FIELDNAME = &lt;FS_T_TAKEYS&gt;-FIELDNAME&apos; WHERE condition
          CONCATENATE &apos;&lt;FS_T_TABKEYS&gt;-&apos; &lt;fs_dd03p&gt;-fieldname INTO lv_str.
          CONCATENATE lv_where &apos;AND&apos; &lt;fs_dd03p&gt;-fieldname &apos;=&apos; lv_str INTO lv_where SEPARATED BY space.

        ENDLOOP.

* Table has no key fields (?!?)
        IF sy-subrc &lt;&gt; 0.
          lv_str = `Table has no key fields`.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING
              textid = zcx_saplink=&gt;error_message
              msg    = lv_str.
        ENDIF.

* Get rid of the &quot; &quot; at the beginning of key fuields list
        SHIFT lv_keyfields LEFT BY 1 PLACES.

* List of table key fields
        SPLIT lv_keyfields AT space INTO TABLE lt_keyfields.

* Get rid of the &quot; &quot; at the beginning of CHAR key fields list
        SHIFT lv_charfields LEFT BY 1 PLACES.

* List of table CHARLIKE key fields
        SPLIT lv_charfields AT space INTO TABLE lt_charfields.

* Get rid of the &quot; AND &quot; at the beginning of the WHERE clause
        SHIFT lv_where LEFT BY 5 PLACES.

* Creates the dynamic table with key fields of the data table
        lo_structdescr = cl_abap_structdescr=&gt;create( lt_fields ).
        lo_tabledescr = cl_abap_tabledescr=&gt;create( p_line_type = lo_structdescr
                                                    p_key       = lt_keyfields ).
        CREATE DATA lr_tabkeys TYPE HANDLE lo_tabledescr.
        ASSIGN lr_tabkeys-&gt;* TO &lt;fs_t_tabkeys&gt;.

      ENDAT.

* If we are not storing complete keys, get rid of the &quot;*&quot; at the end of key
      CLEAR lv_str.
      lv_len = strlen( &lt;fs_e071k&gt;-tabkey ) - 1.
      IF lv_len &gt;= 0.
        IF lv_complete_keys = abap_false AND
           &lt;fs_e071k&gt;-tabkey+lv_len(1) = &apos;*&apos;.
          lv_str = &lt;fs_e071k&gt;-tabkey(lv_len).
        ELSE.
          lv_str = &lt;fs_e071k&gt;-tabkey.
        ENDIF.
      ENDIF.

* Creates a new key in the keys table
      APPEND INITIAL LINE TO &lt;fs_t_tabkeys&gt; ASSIGNING &lt;fs_s_tabkey&gt;.
      &lt;fs_s_tabkey&gt; = lv_str.

      AT END OF objname.

* Get rid of duplicate keys in the keys table
        SORT &lt;fs_t_tabkeys&gt; BY table_line.
        IF lv_complete_keys = abap_true.
          DELETE ADJACENT DUPLICATES FROM &lt;fs_t_tabkeys&gt; COMPARING ALL FIELDS.
        ELSEIF lt_charfields[] IS NOT INITIAL.

* Create a table with same fields as LT_TABKEYS, but with CHAR key fields
          lo_tabledescr = cl_abap_tabledescr=&gt;create( p_line_type = lo_structdescr
                                                      p_key       = lt_charfields ).
          CREATE DATA lr_tabkeys2 TYPE HANDLE lo_tabledescr.
          ASSIGN lr_tabkeys2-&gt;* TO &lt;fs_t_tabkeys2&gt;.

* Get rid of all CHARLIKE key duplicates
          &lt;fs_t_tabkeys2&gt;[] = &lt;fs_t_tabkeys&gt;[].
          DELETE ADJACENT DUPLICATES FROM &lt;fs_t_tabkeys2&gt;.
          &lt;fs_t_tabkeys&gt;[] = &lt;fs_t_tabkeys2&gt;[].

        ENDIF.

* Only reuse the keys table as data table if data table fields are all key fields and
*   if data table allows storing complete keys in the request
        IF lines( lt_dd03p ) &lt;&gt; lines( lt_keyfields ) OR
           lv_complete_keys = abap_false.

* If not, then create the table that will contain the records to be written
          CREATE DATA lr_t_table TYPE STANDARD TABLE OF (&lt;fs_e071k&gt;-objname) WITH KEY (lt_keyfields).
          ASSIGN lr_t_table-&gt;* TO &lt;fs_t_table&gt;.

* And select the desired records from database using CHARLIKE keys table &lt;FS_T_TABKEYS&gt; as the key
          IF &lt;fs_t_tabkeys&gt;[] IS NOT INITIAL.
            SELECT  *
              INTO  TABLE &lt;fs_t_table&gt;
              FROM  (&lt;fs_e071k&gt;-objname)
              CLIENT SPECIFIED
              FOR ALL ENTRIES IN &lt;fs_t_tabkeys&gt;
              WHERE (lv_where).
          ENDIF.

        ELSE.

* If yes, the table &lt;fs_t_tabkeys&gt; already contains all fields that should be written
          ASSIGN &lt;fs_t_tabkeys&gt; TO &lt;fs_t_table&gt;.

        ENDIF.

        IF &lt;fs_t_table&gt;[] IS NOT INITIAL.

* Get rid of duplicate entries in the data table
          REFRESH lt_sortfields.
          LOOP AT lt_keyfields ASSIGNING &lt;fs_keyfield&gt;.
            APPEND INITIAL LINE TO lt_sortfields ASSIGNING &lt;fs_sortfield&gt;.
            &lt;fs_sortfield&gt;-name = &lt;fs_keyfield&gt;.
          ENDLOOP.
          SORT &lt;fs_t_table&gt; BY (lt_sortfields).
          DELETE ADJACENT DUPLICATES FROM &lt;fs_t_table&gt;.

* Creates the TABU node containing the table name
          lo_tabu_node = xmldoc-&gt;create_element( &apos;TABU&apos; ).
          ls_tabu-tabname = &lt;fs_e071k&gt;-objname.
          me-&gt;setattributesfromstructure( node      = lo_tabu_node
                                          structure = ls_tabu  ).

* Writes all records to the XML document
          LOOP AT &lt;fs_t_table&gt; ASSIGNING &lt;fs_s_table&gt;.

            lo_datarow_node = xmldoc-&gt;create_element( `DataRow` ).
            me-&gt;setattributesfromstructure( node = lo_datarow_node structure = &lt;fs_s_table&gt; ).
            lo_tabu_node-&gt;append_child( lo_datarow_node ).

          ENDLOOP.

* Inserts the TABU node into the XML document
          lo_tdat_node-&gt;append_child( lo_tabu_node ).

        ENDIF.

      ENDAT.

* If it&apos;s the last key for current object, exit
      AT END OF mastername.

* Inserts the TDAT node into the XML document
        xmldoc-&gt;append_child( lo_tdat_node ).
        EXIT.

      ENDAT.

    ENDLOOP.

  ENDIF.

  &lt;fs_e071&gt;-used = abap_true.

  SORT t_e071 BY obj_name used trkorr activity.

  ixmldocument = xmldoc.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  TYPES: BEGIN OF ty_tdat,
           name     TYPE dd02l-tabname,
           activity TYPE e071-activity,
         END OF ty_tdat,

         BEGIN OF ty_tabu,
           tabname TYPE dd02l-tabname,
         END OF ty_tabu,

         BEGIN OF ty_entry,
           tabname TYPE dd02l-tabname,
           table   TYPE REF TO data,
         END OF ty_entry.

  DATA: lo_tdat_node TYPE REF TO if_ixml_element,

        lo_tabu_node     TYPE REF TO if_ixml_element,
        lo_tabu_filter   TYPE REF TO if_ixml_node_filter,
        lo_tabu_iterator TYPE REF TO if_ixml_node_iterator,

        lo_datarow_node     TYPE REF TO if_ixml_element,
        lo_datarow_filter   TYPE REF TO if_ixml_node_filter,
        lo_datarow_iterator TYPE REF TO if_ixml_node_iterator,

        lt_dd03p TYPE STANDARD TABLE OF dd03p,

        ls_tdat TYPE ty_tdat,
        ls_tabu TYPE ty_tabu,

        lv_objtype TYPE string,

        lv_clidep TYPE abap_bool,

        lv_num_keyfields TYPE i,

        lr_table   TYPE REF TO data,
        lr_table_2 LIKE lr_table,
        lr_struct  TYPE REF TO data,

        ls_ko200      TYPE ko200,
        lt_e071k      TYPE tredt_keys,
        lt_fields     TYPE cl_abap_structdescr=&gt;component_table,
        lt_keyfields  TYPE STANDARD TABLE OF dd03p-fieldname,
        lt_sortfields TYPE abap_sortorder_tab,
        lt_entries    TYPE STANDARD TABLE OF ty_entry,

        lo_structdescr TYPE REF TO cl_abap_structdescr,
        lo_tabkeydescr TYPE REF TO cl_abap_typedescr,
        lo_typedescr   TYPE REF TO cl_abap_typedescr,

        lv_keyfields     TYPE string,
        lv_where         TYPE string,
        lv_complete_keys TYPE abap_bool,
        lv_tabix         TYPE sy-tabix,
        lv_str           TYPE string.

  FIELD-SYMBOLS: &lt;fs_t_table&gt;    TYPE STANDARD TABLE,
                 &lt;fs_t_table_2&gt;  LIKE &lt;fs_t_table&gt;,
                 &lt;fs_s_table&gt;    TYPE any,
                 &lt;fs_dd03p&gt;      LIKE LINE OF lt_dd03p,
                 &lt;fs_e071k&gt;      LIKE LINE OF lt_e071k,
                 &lt;fs_fields&gt;     LIKE LINE OF lt_fields,
                 &lt;fs_keyfields&gt;  LIKE LINE OF lt_keyfields,
                 &lt;fs_sortfields&gt; LIKE LINE OF lt_sortfields,
                 &lt;fs_entries&gt;    LIKE LINE OF lt_entries,
                 &lt;fs_struct&gt;     TYPE any,
                 &lt;fs_mandt&gt;      TYPE mandt.

* Get object type
  lv_objtype = getobjecttype( ).

* Save the XML document object
  xmldoc = ixmldocument.

* Get root node for VDAT object
  lo_tdat_node = xmldoc-&gt;find_from_name( lv_objtype ).

* Get View name from XML
  me-&gt;getstructurefromattributes(
          EXPORTING  node      = lo_tdat_node
          CHANGING   structure = ls_tdat ).

* Returns the name of the object
  name = ls_tdat-name.

* Create the filter to loop thru all TABU entries in document
  lo_tabu_filter = lo_tdat_node-&gt;create_filter_name( `TABU` ).

* Get an iterator to be used to cycle thru all occurrencies of TABU entries
  lo_tabu_iterator = lo_tdat_node-&gt;create_iterator_filtered( lo_tabu_filter ).

* Loop thru all tables (TABU entries) that make up the View
  lo_tabu_node ?= lo_tabu_iterator-&gt;get_next( ).
  WHILE lo_tabu_node IS BOUND.

* Get table name from XML
    me-&gt;getstructurefromattributes(
            EXPORTING  node      = lo_tabu_node
            CHANGING   structure = ls_tabu ).

* Check that table exists
    REFRESH lt_dd03p.
    CALL FUNCTION &apos;DDIF_TABL_GET&apos;
      EXPORTING
        name          = ls_tabu-tabname
        langu         = sy-langu
      TABLES
        dd03p_tab     = lt_dd03p
      EXCEPTIONS
        illegal_input = 1
        OTHERS        = 2.

    IF sy-subrc &lt;&gt; 0 OR lt_dd03p[] IS INITIAL.
      lv_str = `Table does not exist in the active state`.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = lv_str.
    ENDIF.

* Count number of key fields
  LOOP AT lt_dd03p TRANSPORTING NO FIELDS WHERE keyflag = abap_true.
    ADD  1 TO lv_num_keyfields.
  ENDLOOP.

* Create the type object for field E071K-TABKEY
    lo_tabkeydescr = cl_abap_typedescr=&gt;describe_by_name( `E071K-TABKEY` ).

* Build a structure type containing all key fields of the View table
    DELETE lt_dd03p WHERE keyflag      = abap_false OR
                          fieldname(1) = &apos;.&apos;.
    CLEAR: lv_keyfields, lv_where.
    lv_clidep = abap_false.
    lv_complete_keys = abap_true.
    REFRESH lt_fields.
    LOOP AT lt_dd03p ASSIGNING &lt;fs_dd03p&gt;.

      AT FIRST.

* Check if the View table is a client dependent table:
*   First table field must be a key field of type CLNT
        IF &lt;fs_dd03p&gt;-datatype = &apos;CLNT&apos; AND
           lv_num_keyfields &lt;&gt; 1.
          lv_clidep = abap_true.
        ENDIF.

      ENDAT.

* Build the key fields list
      CONCATENATE lv_keyfields &lt;fs_dd03p&gt;-fieldname INTO lv_keyfields
        SEPARATED BY space.

* Build the WHERE clause used to retrieve entries from database
      CONCATENATE `&lt;FS_T_TABLE&gt;-` &lt;fs_dd03p&gt;-fieldname INTO lv_str.
      CONCATENATE lv_where `AND` &lt;fs_dd03p&gt;-fieldname `=` lv_str INTO lv_where
        SEPARATED BY space.

      CHECK lv_complete_keys = abap_true.

      lo_typedescr = cl_abap_typedescr=&gt;describe_by_name( &lt;fs_dd03p&gt;-rollname ).

* Only CHARLIKE key fields are accepted
      IF lo_typedescr-&gt;type_kind CN &apos;CNDT&apos;.
        lv_complete_keys = abap_false.
        CONTINUE.
      ENDIF.

* One more CHARLIKE key field found
      APPEND INITIAL LINE TO lt_fields ASSIGNING &lt;fs_fields&gt;.
      &lt;fs_fields&gt;-name = &lt;fs_dd03p&gt;-fieldname.
      &lt;fs_fields&gt;-type ?= lo_typedescr.

* Build the type object for key fields found so far, to help answer the following question below
      lo_structdescr = cl_abap_structdescr=&gt;create( lt_fields ).

* If I add current CHARLIKE key field to key structure,
*   will it make the CHARLIKE key structure larger than field E071K-TABKEY ?
      IF lo_structdescr-&gt;length &gt; lo_tabkeydescr-&gt;length.

* CHARLIKE key field just added will make CHARLIKE key structure not fit field E071K-TABKEY, so delete it
        lv_tabix = lines( lt_fields ).
        DELETE lt_fields INDEX lv_tabix.

* Rebuild the type object for key fields, excluding current CHARLIKE key field that did not fit
        lo_structdescr = cl_abap_structdescr=&gt;create( lt_fields ).

        lv_complete_keys = abap_false.
        CONTINUE.

      ENDIF.

    ENDLOOP.

* Error if View table has no key fields (?!?)
    IF sy-subrc &lt;&gt; 0.
      lv_str = `Table has no key fields`.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = lv_str.
    ENDIF.

* Get rid of the &quot; &quot; at the beginning of the list of key fields of View table
    SHIFT lv_keyfields LEFT BY 1 PLACES.

* Build a list of all View table key fields
    SPLIT lv_keyfields AT space INTO TABLE lt_keyfields.

* Get rid of the &quot; AND &quot; at the beginning of the WHERE clause
    SHIFT lv_where LEFT BY 5 PLACES.

* Create a work area to store all CHARLIKE key fields of the View table that fit field E070K-TABKEY
    CREATE DATA lr_struct TYPE HANDLE lo_structdescr.
    ASSIGN lr_struct-&gt;* TO &lt;fs_struct&gt;.

* Create the View table using the CHARLIKE key. This will allow us to delete adjacent duplicates from it
*   using a dynamically COMPARING addition
    CREATE DATA lr_table TYPE STANDARD TABLE OF (ls_tabu-tabname) WITH KEY (lt_keyfields).
    ASSIGN lr_table-&gt;* TO &lt;fs_t_table&gt;.

* Create a table to contain existing data from database
    CREATE DATA lr_table_2 LIKE &lt;fs_t_table&gt;.
    ASSIGN lr_table_2-&gt;* TO &lt;fs_t_table_2&gt;.

* Create the filter to loop thru all DataRow entries in document for the View table
    lo_datarow_filter = lo_tabu_node-&gt;create_filter_name( `DataRow` ).

* Get an iterator to be used to cycle thru all occurrencies of DataRow entries
    lo_datarow_iterator = lo_tabu_node-&gt;create_iterator_filtered( lo_datarow_filter ).

* Collect all DataRow entries of current View table
    lo_datarow_node ?= lo_datarow_iterator-&gt;get_next( ).
    WHILE lo_datarow_node IS BOUND.

* Append contents of each DataRow entry to the View table
      APPEND INITIAL LINE TO &lt;fs_t_table&gt; ASSIGNING &lt;fs_s_table&gt;.

      me-&gt;getstructurefromattributes(
              EXPORTING   node      = lo_datarow_node
              CHANGING    structure = &lt;fs_s_table&gt; ).

* If it&apos;s a client dependent table, replace CLNT key field with logged on client
      IF lv_clidep = abap_true.
        ASSIGN COMPONENT 1 OF STRUCTURE &lt;fs_s_table&gt; TO &lt;fs_mandt&gt;.
        &lt;fs_mandt&gt; = sy-mandt.
      ENDIF.

* Build table key to be stored in the object keys table
      &lt;fs_struct&gt; = &lt;fs_s_table&gt;.

* Build the table key for each DataRow entry
      APPEND INITIAL LINE TO lt_e071k ASSIGNING &lt;fs_e071k&gt;.
      &lt;fs_e071k&gt;-pgmid      = &apos;R3TR&apos;.
      &lt;fs_e071k&gt;-object     = &apos;TABU&apos;.
      &lt;fs_e071k&gt;-objname    = ls_tabu-tabname.
      &lt;fs_e071k&gt;-mastertype = &apos;TDAT&apos;.
      &lt;fs_e071k&gt;-mastername = ls_tdat-name.
      CLEAR &lt;fs_e071k&gt;-viewname.
      &lt;fs_e071k&gt;-tabkey     = &lt;fs_struct&gt;.
      &lt;fs_e071k&gt;-sortflag   = &apos;2&apos;.
      &lt;fs_e071k&gt;-activity   = ls_tdat-activity.

* Get next DataRow entry
      lo_datarow_node ?= lo_datarow_iterator-&gt;get_next( ).

    ENDWHILE.

* Check if any of the entries to be inserted already exists in database
    SELECT  (lv_keyfields)
      FROM  (ls_tabu-tabname)
      INTO  TABLE &lt;fs_t_table_2&gt;
      FOR ALL ENTRIES IN &lt;fs_t_table&gt;
      WHERE (lv_where).

* At least one table entry already exists in datrabase
    IF sy-subrc = 0.

* Overwrite existing records or write only the records that does not exist in database
*   depending on the &quot;Overwrite Originals&quot; flag of SAPLINK selection screen
      IF overwrite = abap_true.
        DELETE (ls_tabu-tabname) FROM TABLE &lt;fs_t_table_2&gt;.
      ELSE.

* If no overwrite is desired, delete all existing entries from the
*   View table and also from the CHARLIKE key fields table
        LOOP AT &lt;fs_t_table_2&gt; ASSIGNING &lt;fs_s_table&gt;.

* Remove entry from View table
          DELETE TABLE &lt;fs_t_table&gt; FROM &lt;fs_s_table&gt;.

* Also remove entry from the object keys table
          &lt;fs_struct&gt; = &lt;fs_s_table&gt;.
          READ TABLE lt_e071k TRANSPORTING NO FIELDS
            WITH KEY objname    = ls_tabu-tabname
                     viewname   = space
                     mastername = ls_tdat-name
                     tabkey     = &lt;fs_struct&gt;.
          IF sy-subrc = 0.
            DELETE lt_e071k INDEX sy-tabix.
          ENDIF.

        ENDLOOP.

      ENDIF.

    ENDIF.

* Store all entries that will be written to database later
    IF &lt;fs_t_table&gt;[] IS NOT INITIAL.

* Get rid of duplicate keys in the View table
      REFRESH lt_sortfields.
      LOOP AT lt_keyfields ASSIGNING &lt;fs_keyfields&gt;.
        APPEND INITIAL LINE TO lt_sortfields ASSIGNING &lt;fs_sortfields&gt;.
        &lt;fs_sortfields&gt;-name = &lt;fs_keyfields&gt;.
      ENDLOOP.
      SORT &lt;fs_t_table&gt; BY (lt_sortfields).
      DELETE ADJACENT DUPLICATES FROM &lt;fs_t_table&gt;.

      APPEND INITIAL LINE TO lt_entries ASSIGNING &lt;fs_entries&gt;.
      &lt;fs_entries&gt;-tabname  = ls_tabu-tabname.
      CREATE DATA &lt;fs_entries&gt;-table LIKE &lt;fs_t_table&gt;.
      ASSIGN &lt;fs_entries&gt;-table-&gt;* TO &lt;fs_t_table_2&gt;.
      &lt;fs_t_table_2&gt;[] =  &lt;fs_t_table&gt;[].

    ENDIF.

* If not storing complete keys, append an &quot;*&quot; at the end of every key entry
    IF lv_complete_keys = abap_false.
      LOOP AT lt_e071k ASSIGNING &lt;fs_e071k&gt;
        WHERE objname    = ls_tabu-tabname AND
              viewname   = space AND
              mastername = ls_tdat-name.
        CONCATENATE &lt;fs_e071k&gt;-tabkey &apos;*&apos; INTO &lt;fs_e071k&gt;-tabkey.
      ENDLOOP.
    ENDIF.

* Get next TABU entry
    lo_tabu_node ?= lo_tabu_iterator-&gt;get_next( ).

  ENDWHILE.

  IF lt_entries[] IS NOT INITIAL.

* Get rid of duplicate object keys
    SORT lt_e071k BY mastername objname tabkey.
    DELETE ADJACENT DUPLICATES FROM lt_e071k COMPARING mastername objname tabkey.

* Attach inserted entries to a request
    ls_ko200-pgmid     = &apos;R3TR&apos;.
    ls_ko200-object    = lv_objtype.
    ls_ko200-obj_name  = ls_tdat-name.
    ls_ko200-objfunc   = &apos;K&apos;.
    ls_ko200-activity  = ls_tdat-activity.
    ls_ko200-operation = &apos;I&apos;.

    IF zsaplink_tools=&gt;add_to_request( is_ko200  = ls_ko200
                                       it_e071k  = lt_e071k ) &lt;&gt; 0.
      lv_str = `Error while attaching table entries to the request`.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = lv_str.
    ENDIF.

* Insert all selected records into database
    LOOP AT lt_entries ASSIGNING &lt;fs_entries&gt;.
      ASSIGN &lt;fs_entries&gt;-table-&gt;* TO &lt;fs_t_table_2&gt;.
      INSERT (&lt;fs_entries&gt;-tabname) FROM TABLE &lt;fs_t_table_2&gt;.
    ENDLOOP.

  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  DATA: v_msg TYPE string.

  v_msg = `Operation not implemented`.
  RAISE EXCEPTION TYPE zcx_saplink
    EXPORTING
      textid = zcx_saplink=&gt;error_message
      msg = v_msg.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  objecttype = &apos;TDAT&apos;.  &quot;Selected tables contents

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_CDAT" VERSION="1" LANGU="D" DESCRIPT="SapLink Class Installer" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZSAPLINK_CDAT" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_CDAT" TYPEGROUP="SEOP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_CDAT" TYPEGROUP="SEOR" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_CDAT" TYPEGROUP="SEOS" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_CDAT" TYPEGROUP="SEOT" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_CDAT" TYPEGROUP="SEOX" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <forwardDeclaration>SEOP</forwardDeclaration>
  <forwardDeclaration>SEOR</forwardDeclaration>
  <forwardDeclaration>SEOS</forwardDeclaration>
  <forwardDeclaration>SEOT</forwardDeclaration>
  <forwardDeclaration>SEOX</forwardDeclaration>
  <attribute CLSNAME="ZSAPLINK_CDAT" CMPNAME="T_E071" VERSION="1" LANGU="D" DESCRIPT="Task objects" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZSAPLINK_TOOLS=&gt;TY_T_E071" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_CDAT" CMPNAME="T_E071K" VERSION="1" LANGU="D" DESCRIPT="Task objects keys" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZSAPLINK_TOOLS=&gt;TY_T_E071K" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_CDAT" CMPNAME="V_MODE" VERSION="1" LANGU="D" DESCRIPT="O=add object. R=add request" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="C" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_CDAT" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_CDAT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_CDAT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_CDAT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_CDAT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_CDAT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  exists = abap_false.  &quot; No implementation of existence check

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_CDAT" CMPNAME="CREATEIXMLDOCFROMDATABASE" VERSION="1" LANGU="D" DESCRIPT="Creates an IF_IXML_DOCUMENT from OBJNAME Attr.  of database" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_CDAT" CMPNAME="CREATEIXMLDOCFROMDATABASE" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <exception CLSNAME="ZSAPLINK_CDAT" CMPNAME="CREATEIXMLDOCFROMDATABASE" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method CREATEIXMLDOCFROMDATABASE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  TYPES: BEGIN OF ty_cdat,
           name     TYPE vclstruc-vclname,
           activity TYPE e071-activity,
         END OF ty_cdat.

  TYPES: BEGIN OF ty_vdat,
           name     TYPE dd02v-tabname,
           activity TYPE e071-activity,
         END OF ty_vdat.

  TYPES: BEGIN OF ty_tabu,
           tabname  TYPE dd02v-tabname,
         END OF ty_tabu.

  TYPES: BEGIN OF ty_vclstruc,
           vclname  TYPE vclstruc-vclname,
           viewname TYPE dd02v-tabname,
           tabname  TYPE dd02v-tabname.
  TYPES: END OF ty_vclstruc.


  DATA: lv_str     TYPE string,
        lv_objtype TYPE string,
        lv_objname TYPE ddobjname,

        lr_t_table  TYPE REF TO data,

        lt_objects  TYPE STANDARD TABLE OF dd02v-tabname,
        lt_vclstruc TYPE STANDARD TABLE OF ty_vclstruc,
        lt_dd26v    TYPE STANDARD TABLE OF dd26v,

        lo_cdat_node    TYPE REF TO if_ixml_element,
        lo_vdat_node    TYPE REF TO if_ixml_element,
        lo_tabu_node    TYPE REF TO if_ixml_element,
        lo_datarow_node TYPE REF TO if_ixml_element,
        ls_cdat         TYPE ty_vdat,
        ls_vdat         TYPE ty_vdat,
        ls_tabu         TYPE ty_tabu.

  FIELD-SYMBOLS: &lt;fs_t_table&gt;  TYPE STANDARD TABLE,
                 &lt;fs_s_table&gt;  TYPE any,
                 &lt;fs_objects&gt;  LIKE LINE OF lt_objects,
                 &lt;fs_vclstruc&gt; LIKE LINE OF lt_vclstruc,
                 &lt;fs_dd26v&gt;    LIKE LINE OF lt_dd26v.

* Get the object type and name
  lv_objtype = me-&gt;getobjecttype( ).
  lv_objname = objname.

* Get the list of views in View Cluster
  SELECT  object
    INTO  TABLE lt_objects
    FROM  vclstruc
    WHERE vclname = lv_objname.

  IF sy-subrc &lt;&gt; 0.
    lv_str = `View Cluster does not exist in the active state`.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_str.
  ENDIF.

* Expand all views in View Cluster
  LOOP AT lt_objects ASSIGNING &lt;fs_objects&gt;.

* Get the list of tables in View, if object is a view at all
    REFRESH lt_dd26v.
    CALL FUNCTION &apos;DDIF_VIEW_GET&apos;
      EXPORTING
        name          = &lt;fs_objects&gt;
        langu         = sy-langu
      TABLES
        dd26v_tab     = lt_dd26v
      EXCEPTIONS
        illegal_input = 1
        OTHERS        = 2.

* If object is a view, expand all View tables
    IF sy-subrc = 0 AND
       lt_dd26v[] IS NOT INITIAL.

* Add all View tables to the list of View Cluster table list
      LOOP AT lt_dd26v ASSIGNING &lt;fs_dd26v&gt;.

        APPEND INITIAL LINE TO lt_vclstruc ASSIGNING &lt;fs_vclstruc&gt;.
        &lt;fs_vclstruc&gt;-vclname  = lv_objname.
        &lt;fs_vclstruc&gt;-viewname = &lt;fs_objects&gt;.
        &lt;fs_vclstruc&gt;-tabname  = &lt;fs_dd26v&gt;-tabname.

      ENDLOOP.

    ELSE.

* Object is a table, add it to the View Cluster table list
      APPEND INITIAL LINE TO lt_vclstruc ASSIGNING &lt;fs_vclstruc&gt;.
      &lt;fs_vclstruc&gt;-vclname  = lv_objname.
      &lt;fs_vclstruc&gt;-viewname = &lt;fs_objects&gt;.
      &lt;fs_vclstruc&gt;-tabname  = &lt;fs_objects&gt;.

    ENDIF.

  ENDLOOP.

* Save data from each table only once in the XML document
  SORT lt_vclstruc BY tabname.
  DELETE ADJACENT DUPLICATES FROM lt_vclstruc COMPARING tabname.

  SORT lt_vclstruc BY vclname viewname tabname.

* Save contents of all View Cluster views in XML document
  LOOP AT lt_vclstruc ASSIGNING &lt;fs_vclstruc&gt;.

    AT NEW vclname.

* Creates the CDAT root node
      lo_cdat_node = xmldoc-&gt;create_element( lv_objtype ).
      ls_cdat-name  = &lt;fs_vclstruc&gt;-vclname.
      CLEAR ls_cdat-activity.
      me-&gt;setattributesfromstructure( node      = lo_cdat_node
                                      structure = ls_cdat  ).

    ENDAT.

    AT NEW viewname.

* Creates the VDAT node
      lo_vdat_node = xmldoc-&gt;create_element( `VDAT` ).
      ls_vdat-name  = &lt;fs_vclstruc&gt;-viewname.
      CLEAR ls_vdat-activity.
      me-&gt;setattributesfromstructure( node      = lo_vdat_node
                                      structure = ls_vdat  ).
    ENDAT.

    AT NEW tabname.

* Creates the TABU node
      lo_tabu_node = xmldoc-&gt;create_element( `TABU` ).
      ls_tabu-tabname  = &lt;fs_vclstruc&gt;-tabname.
      me-&gt;setattributesfromstructure( node      = lo_tabu_node
                                      structure = ls_tabu  ).

* Create table to hold TABU data
      CREATE DATA lr_t_table TYPE STANDARD TABLE OF (ls_tabu-tabname).
      ASSIGN lr_t_table-&gt;* TO &lt;fs_t_table&gt;.

* Get data from table
      zsaplink_tools=&gt;get_filtered_table( EXPORTING
                                            iv_cdat         = ls_cdat-name
                                            iv_vdat_tdat    = ls_vdat-name
                                            iv_is_tdat      = abap_false
                                            iv_tabname      = ls_tabu-tabname
                                          IMPORTING
                                            et_results      = &lt;fs_t_table&gt; ).

* Save data to XML document
      LOOP AT &lt;fs_t_table&gt; ASSIGNING &lt;fs_s_table&gt;.

* Creates the TABU node
        lo_datarow_node = xmldoc-&gt;create_element( `DataRow` ).
        me-&gt;setattributesfromstructure( node      = lo_datarow_node
                                        structure = &lt;fs_s_table&gt;  ).
        lo_tabu_node-&gt;append_child( lo_datarow_node ).

      ENDLOOP.

    ENDAT.

    AT END OF tabname.

      lo_vdat_node-&gt;append_child( lo_tabu_node ).

    ENDAT.


    AT END OF viewname.

      lo_cdat_node-&gt;append_child( lo_vdat_node ).

    ENDAT.

    AT END OF vclname.

      xmldoc-&gt;append_child( lo_cdat_node ).
      EXIT.

    ENDAT.

  ENDLOOP.

  ixmldocument = xmldoc.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

* Get all tasks of the request supplied in the calling program, if that&apos;s the case
  zsaplink_tools=&gt;init_plugin( EXPORTING
                                 iv_mastertype = &apos;CDAT&apos;
                               IMPORTING
                                 et_e071  = me-&gt;t_e071
                                 et_e071k = me-&gt;t_e071k
                               CHANGING
                                 cv_mode  = me-&gt;v_mode ).

  IF me-&gt;v_mode = zsaplink_tools=&gt;c_mode_request.
    ixmldocument = me-&gt;createixmldocfromrequest( ).
  ELSEIF me-&gt;v_mode = zsaplink_tools=&gt;c_mode_object.
    ixmldocument = me-&gt;createixmldocfromdatabase( ).
  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_CDAT" CMPNAME="CREATEIXMLDOCFROMREQUEST" VERSION="1" LANGU="D" DESCRIPT="Creates an IF_IXML_DOCUMENT from OBJNAME Attr.  of a request" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_CDAT" CMPNAME="CREATEIXMLDOCFROMREQUEST" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <exception CLSNAME="ZSAPLINK_CDAT" CMPNAME="CREATEIXMLDOCFROMREQUEST" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD createixmldocfromrequest.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  TYPES: BEGIN OF ty_cdat,
           name     TYPE vclstruc-vclname,
           activity TYPE e071-activity,
         END OF ty_cdat.

  TYPES: BEGIN OF ty_vdat,
           name     TYPE dd02v-tabname,
           activity TYPE e071-activity,
         END OF ty_vdat.

  TYPES: BEGIN OF ty_tabu,
           tabname  TYPE dd02v-tabname,
         END OF ty_tabu.

  DATA: lv_str           TYPE string,
        lv_objtype       TYPE string,
        lv_from          TYPE sy-tabix,
        lv_len           TYPE i,
        lv_complete_keys TYPE abap_bool,
        lv_charfields    TYPE string,
        lv_keyfields     TYPE string,
        lv_where         TYPE string,

        lr_t_table  TYPE REF TO data,
        lr_s_table  TYPE REF TO data,
        lr_tabkeys  TYPE REF TO data,
        lr_tabkeys2 TYPE REF TO data,

        lt_dd03p       TYPE STANDARD TABLE OF dd03p,
        lt_fields      TYPE cl_abap_structdescr=&gt;component_table,
        lt_keyfields   TYPE abap_keydescr_tab,
        lt_charfields  TYPE abap_keydescr_tab,
        lt_sortfields  TYPE abap_sortorder_tab,
        lo_structdescr TYPE REF TO cl_abap_structdescr,
        lo_tabledescr  TYPE REF TO cl_abap_tabledescr,
        lo_tabkeydescr TYPE REF TO cl_abap_typedescr,

        lo_cdat_node    TYPE REF TO if_ixml_element,
        lo_vdat_node    TYPE REF TO if_ixml_element,
        lo_tabu_node    TYPE REF TO if_ixml_element,
        lo_datarow_node TYPE REF TO if_ixml_element,
        ls_cdat         TYPE ty_cdat,
        ls_vdat         TYPE ty_vdat,
        ls_tabu         TYPE ty_tabu.

  FIELD-SYMBOLS: &lt;fs_e071&gt;       LIKE LINE OF t_e071,
                 &lt;fs_e071k&gt;      LIKE LINE OF t_e071k,
                 &lt;fs_t_table&gt;    TYPE STANDARD TABLE,
                 &lt;fs_s_table&gt;    TYPE any,
                 &lt;fs_t_tabkeys&gt;  TYPE STANDARD TABLE,
                 &lt;fs_t_tabkeys2&gt; TYPE STANDARD TABLE,
                 &lt;fs_s_tabkey&gt;   TYPE any,
                 &lt;fs_field&gt;      LIKE LINE OF lt_fields,
                 &lt;fs_dd03p&gt;      LIKE LINE OF lt_dd03p,
                 &lt;fs_sortfield&gt;  LIKE LINE OF lt_sortfields,
                 &lt;fs_keyfield&gt;   LIKE LINE OF lt_keyfields.

* Get the object type
  lv_objtype = me-&gt;getobjecttype( ).

* Look for the first task activity not yet processed
  READ TABLE t_e071 ASSIGNING &lt;fs_e071&gt;
    WITH KEY obj_name = objname
             used     = space
    BINARY SEARCH.

  IF sy-subrc &lt;&gt; 0.
    lv_str = `No more object(s) of this type found in the request(s) supplied`.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_str.
  ENDIF.

* Position on the first key of the object being processed
  READ TABLE t_e071k TRANSPORTING NO FIELDS WITH KEY trkorr     = &lt;fs_e071&gt;-trkorr
                                                     activity   = &lt;fs_e071&gt;-activity
                                                     mastername = &lt;fs_e071&gt;-obj_name.

  IF sy-subrc = 0.

    lv_from = sy-tabix.

* Process all keys belonging to current object
    LOOP AT t_e071k ASSIGNING &lt;fs_e071k&gt; FROM lv_from.

      AT NEW mastername.

* Creates the CDAT root node
        lo_cdat_node = xmldoc-&gt;create_element( lv_objtype ).
        ls_cdat-name = objname.
        ls_cdat-activity = &lt;fs_e071&gt;-activity.
        me-&gt;setattributesfromstructure( node      = lo_cdat_node
                                        structure = ls_cdat  ).

      ENDAT.

      AT NEW viewname.

* Creates the VDAT root node
        lo_vdat_node = xmldoc-&gt;create_element( `VDAT` ).
        ls_vdat-name = &lt;fs_e071k&gt;-viewname.
        ls_vdat-activity = &lt;fs_e071&gt;-activity.
        me-&gt;setattributesfromstructure( node      = lo_vdat_node
                                        structure = ls_vdat  ).

      ENDAT.

      AT NEW objname.

* Get information about all fields of the table
        REFRESH lt_dd03p.
        CALL FUNCTION &apos;DDIF_TABL_GET&apos;
          EXPORTING
            name          = &lt;fs_e071k&gt;-objname
            langu         = sy-langu
          TABLES
            dd03p_tab     = lt_dd03p
          EXCEPTIONS
            illegal_input = 1
            OTHERS        = 2.

        IF sy-subrc &lt;&gt; 0 OR lt_dd03p[] IS INITIAL.
          lv_str = `Table does not exist in the active state`.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING
              textid = zcx_saplink=&gt;error_message
              msg    = lv_str.
        ENDIF.

* Create the type object for field E071K-TABKEY
        lo_tabkeydescr = cl_abap_typedescr=&gt;describe_by_name( `E071K-TABKEY` ).

* Loop thru all key fields of the table:
*   1) Building a list of all key fields
*   2) Building a list of all CHARLIKE key fields that fit fields E071K-TABKEY
*   3) Building the WHERE clause for the SELECT to be used for data retrieval, using FOR ALL ENTRIES
*   4) Setting up table LT_FIELDS, with all key fields
        CLEAR: lv_keyfields, lv_charfields, lv_where.
        lv_complete_keys = abap_true.
        REFRESH lt_fields.
        LOOP AT lt_dd03p ASSIGNING &lt;fs_dd03p&gt;
          WHERE keyflag = abap_true AND
                fieldname(1) &lt;&gt; &apos;.&apos;.

* Build the list of all key fields names
          CONCATENATE lv_keyfields &lt;fs_dd03p&gt;-fieldname INTO lv_keyfields
            SEPARATED BY space.

* Add key field to the key type strucuture of the object keys table
          APPEND INITIAL LINE TO lt_fields ASSIGNING &lt;fs_field&gt;.
          &lt;fs_field&gt;-name = &lt;fs_dd03p&gt;-fieldname.
          &lt;fs_field&gt;-type ?= cl_abap_structdescr=&gt;describe_by_name( &lt;fs_dd03p&gt;-rollname ).

          CHECK lv_complete_keys = abap_true.

* Check if structure containing all key fields of the View table is CHARLIKE
          IF &lt;fs_field&gt;-type-&gt;type_kind CN &apos;CNDT&apos;.
            lv_complete_keys = abap_false.
            CONTINUE.
          ENDIF.

* Build the type object for key fields found so far, to help answer the following question below
          lo_structdescr = cl_abap_structdescr=&gt;create( lt_fields ).

* If I add current CHARLIKE key field to key structure,
*   will it make the CHARLIKE key structure larger than field E071K-TABKEY ?
          IF lo_structdescr-&gt;length &gt; lo_tabkeydescr-&gt;length.
            lv_complete_keys = abap_false.
            CONTINUE.
          ENDIF.

* Build the list of CHARLIKE key fields names
          CONCATENATE lv_charfields &lt;fs_dd03p&gt;-fieldname INTO lv_charfields
            SEPARATED BY space.

* Build the &apos;FIELDNAME = &lt;FS_T_TAKEYS&gt;-FIELDNAME&apos; WHERE condition
          CONCATENATE &apos;&lt;FS_T_TABKEYS&gt;-&apos; &lt;fs_dd03p&gt;-fieldname INTO lv_str.
          CONCATENATE lv_where &apos;AND&apos; &lt;fs_dd03p&gt;-fieldname &apos;=&apos; lv_str INTO lv_where SEPARATED BY space.

        ENDLOOP.

* Table has no key fields (?!?)
        IF sy-subrc &lt;&gt; 0.
          lv_str = `Table has no key fields`.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING
              textid = zcx_saplink=&gt;error_message
              msg    = lv_str.
        ENDIF.

* Get rid of the &quot; &quot; at the beginning of key fuields list
        SHIFT lv_keyfields LEFT BY 1 PLACES.

* List of table key fields
        SPLIT lv_keyfields AT space INTO TABLE lt_keyfields.

* Get rid of the &quot; &quot; at the beginning of CHAR key fields list
        SHIFT lv_charfields LEFT BY 1 PLACES.

* List of table CHARLIKE key fields
        SPLIT lv_charfields AT space INTO TABLE lt_charfields.

* Get rid of the &quot; AND &quot; at the beginning of the WHERE clause
        SHIFT lv_where LEFT BY 5 PLACES.

* Creates the dynamic table with key fields of the data table
        lo_structdescr = cl_abap_structdescr=&gt;create( lt_fields ).
        lo_tabledescr = cl_abap_tabledescr=&gt;create( p_line_type = lo_structdescr
                                                    p_key       = lt_keyfields ).
        CREATE DATA lr_tabkeys TYPE HANDLE lo_tabledescr.
        ASSIGN lr_tabkeys-&gt;* TO &lt;fs_t_tabkeys&gt;.

      ENDAT.

* If we are not storing complete keys, get rid of the &quot;*&quot; at the end of key
      CLEAR lv_str.
      lv_len = strlen( &lt;fs_e071k&gt;-tabkey ) - 1.
      IF lv_len &gt;= 0.
        IF lv_complete_keys = abap_false AND
           &lt;fs_e071k&gt;-tabkey+lv_len(1) = &apos;*&apos;.
          lv_str = &lt;fs_e071k&gt;-tabkey(lv_len).
        ELSE.
          lv_str = &lt;fs_e071k&gt;-tabkey.
        ENDIF.
      ENDIF.

* Creates a new key in the keys table
      APPEND INITIAL LINE TO &lt;fs_t_tabkeys&gt; ASSIGNING &lt;fs_s_tabkey&gt;.
      &lt;fs_s_tabkey&gt; = lv_str.

      AT END OF objname.

* Get rid of duplicate keys in the keys table
        SORT &lt;fs_t_tabkeys&gt; BY table_line.
        IF lv_complete_keys = abap_true.
          DELETE ADJACENT DUPLICATES FROM &lt;fs_t_tabkeys&gt; COMPARING ALL FIELDS.
        ELSEIF lt_charfields[] IS NOT INITIAL.

* Create a table with same fields as LT_TABKEYS, but with CHAR key fields
          lo_tabledescr = cl_abap_tabledescr=&gt;create( p_line_type = lo_structdescr
                                                      p_key       = lt_charfields ).
          CREATE DATA lr_tabkeys2 TYPE HANDLE lo_tabledescr.
          ASSIGN lr_tabkeys2-&gt;* TO &lt;fs_t_tabkeys2&gt;.

* Get rid of all CHARLIKE key duplicates
          &lt;fs_t_tabkeys2&gt;[] = &lt;fs_t_tabkeys&gt;[].
          DELETE ADJACENT DUPLICATES FROM &lt;fs_t_tabkeys2&gt;.
          &lt;fs_t_tabkeys&gt;[] = &lt;fs_t_tabkeys2&gt;[].

        ENDIF.

* Only reuse the keys table as data table if data table fields are all key fields and
*   if data table allows storing complete keys in the request
        IF lines( lt_dd03p ) &lt;&gt; lines( lt_keyfields ) OR
           lv_complete_keys = abap_false.

* If not, then create the table that will contain the records to be written
          CREATE DATA lr_t_table TYPE STANDARD TABLE OF (&lt;fs_e071k&gt;-objname) WITH KEY (lt_keyfields).
          ASSIGN lr_t_table-&gt;* TO &lt;fs_t_table&gt;.

* And select the desired records from database using CHARLIKE keys table &lt;FS_T_TABKEYS&gt; as the key
          IF &lt;fs_t_tabkeys&gt;[] IS NOT INITIAL.
            SELECT  *
              INTO  TABLE &lt;fs_t_table&gt;
              FROM  (&lt;fs_e071k&gt;-objname)
              CLIENT SPECIFIED
              FOR ALL ENTRIES IN &lt;fs_t_tabkeys&gt;
              WHERE (lv_where).
          ENDIF.

        ELSE.

* If yes, the table &lt;fs_t_tabkeys&gt; already contains all fields that should be written
          ASSIGN &lt;fs_t_tabkeys&gt; TO &lt;fs_t_table&gt;.

        ENDIF.

        IF &lt;fs_t_table&gt;[] IS NOT INITIAL.

* Get rid of duplicate entries in the data table
          REFRESH lt_sortfields.
          LOOP AT lt_keyfields ASSIGNING &lt;fs_keyfield&gt;.
            APPEND INITIAL LINE TO lt_sortfields ASSIGNING &lt;fs_sortfield&gt;.
            &lt;fs_sortfield&gt;-name = &lt;fs_keyfield&gt;.
          ENDLOOP.
          SORT &lt;fs_t_table&gt; BY (lt_sortfields).
          DELETE ADJACENT DUPLICATES FROM &lt;fs_t_table&gt;.

* Creates the TABU node containing the table name
          lo_tabu_node = xmldoc-&gt;create_element( &apos;TABU&apos; ).
          ls_tabu-tabname = &lt;fs_e071k&gt;-objname.
          me-&gt;setattributesfromstructure( node      = lo_tabu_node
                                          structure = ls_tabu  ).

* Writes all records to the XML document
          LOOP AT &lt;fs_t_table&gt; ASSIGNING &lt;fs_s_table&gt;.

            lo_datarow_node = xmldoc-&gt;create_element( `DataRow` ).
            me-&gt;setattributesfromstructure( node = lo_datarow_node structure = &lt;fs_s_table&gt; ).
            lo_tabu_node-&gt;append_child( lo_datarow_node ).

          ENDLOOP.

* Inserts the TABU node into the XML document
          lo_vdat_node-&gt;append_child( lo_tabu_node ).

        ENDIF.

      ENDAT.

* If it&apos;s the last key for current object, exit
      AT END OF viewname.

* Inserts the VDAT node into the XML document
        lo_cdat_node-&gt;append_child( lo_vdat_node ).

      ENDAT.

* If it&apos;s the last key for current object, exit
      AT END OF mastername.

* Inserts the CDAT node into the XML document
        xmldoc-&gt;append_child( lo_cdat_node ).
        EXIT.

      ENDAT.

    ENDLOOP.

  ENDIF.

  &lt;fs_e071&gt;-used = abap_true.

  SORT t_e071 BY obj_name used trkorr activity.

  ixmldocument = xmldoc.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  TYPES: BEGIN OF ty_cdat,
           name     TYPE vclstruc-vclname,
           activity TYPE e071-activity,
         END OF ty_cdat,

         BEGIN OF ty_vdat,
           name     TYPE dd02l-tabname,
           activity TYPE e071-activity,
         END OF ty_vdat,

         BEGIN OF ty_tabu,
           tabname TYPE dd02l-tabname,
         END OF ty_tabu,

         BEGIN OF ty_entry,
           tabname TYPE dd02l-tabname,
           table   TYPE REF TO data,
         END OF ty_entry.

  DATA: lo_cdat_node TYPE REF TO if_ixml_element,

        lo_vdat_node     TYPE REF TO if_ixml_element,
        lo_vdat_filter   TYPE REF TO if_ixml_node_filter,
        lo_vdat_iterator TYPE REF TO if_ixml_node_iterator,

        lo_tabu_node     TYPE REF TO if_ixml_element,
        lo_tabu_filter   TYPE REF TO if_ixml_node_filter,
        lo_tabu_iterator TYPE REF TO if_ixml_node_iterator,

        lo_datarow_node     TYPE REF TO if_ixml_element,
        lo_datarow_filter   TYPE REF TO if_ixml_node_filter,
        lo_datarow_iterator TYPE REF TO if_ixml_node_iterator,

        lt_dd03p TYPE STANDARD TABLE OF dd03p,

        ls_cdat TYPE ty_cdat,
        ls_vdat TYPE ty_vdat,
        ls_tabu TYPE ty_tabu,

        lv_objtype TYPE string,

        lv_clidep TYPE abap_bool,

        lv_num_keyfields TYPE i,

        lr_table   TYPE REF TO data,
        lr_table_2 LIKE lr_table,
        lr_struct  TYPE REF TO data,

        ls_ko200      TYPE ko200,
        lt_e071k      TYPE tredt_keys,
        lt_fields     TYPE cl_abap_structdescr=&gt;component_table,
        lt_keyfields  TYPE STANDARD TABLE OF dd03p-fieldname,
        lt_sortfields TYPE abap_sortorder_tab,
        lt_entries    TYPE STANDARD TABLE OF ty_entry,

        lo_structdescr TYPE REF TO cl_abap_structdescr,
        lo_tabkeydescr TYPE REF TO cl_abap_typedescr,
        lo_typedescr   TYPE REF TO cl_abap_typedescr,

        lv_keyfields     TYPE string,
        lv_where         TYPE string,
        lv_complete_keys TYPE abap_bool,
        lv_tabix         TYPE sy-tabix,
        lv_str           TYPE string.

  FIELD-SYMBOLS: &lt;fs_t_table&gt;    TYPE STANDARD TABLE,
                 &lt;fs_t_table_2&gt;  LIKE &lt;fs_t_table&gt;,
                 &lt;fs_s_table&gt;    TYPE any,
                 &lt;fs_dd03p&gt;      LIKE LINE OF lt_dd03p,
                 &lt;fs_e071k&gt;      LIKE LINE OF lt_e071k,
                 &lt;fs_fields&gt;     LIKE LINE OF lt_fields,
                 &lt;fs_keyfields&gt;  LIKE LINE OF lt_keyfields,
                 &lt;fs_sortfields&gt; LIKE LINE OF lt_sortfields,
                 &lt;fs_entries&gt;    LIKE LINE OF lt_entries,
                 &lt;fs_struct&gt;     TYPE any,
                 &lt;fs_mandt&gt;      TYPE mandt.

* Get object type
  lv_objtype = getobjecttype( ).

* Save the XML document object
  xmldoc = ixmldocument.

* Get root node for CDAT object
  lo_cdat_node = xmldoc-&gt;find_from_name( lv_objtype ).

* Get View Cluster name from XML
  me-&gt;getstructurefromattributes(
          EXPORTING  node      = lo_cdat_node
          CHANGING   structure = ls_cdat ).

* Returns the name of the object
  name = ls_cdat-name.

* Create the filter to loop thru all VDAT entries in document
  lo_vdat_filter = lo_cdat_node-&gt;create_filter_name( `VDAT` ).

* Get an iterator to be used to cycle thru all occurrencies of TABU entries
  lo_vdat_iterator = lo_cdat_node-&gt;create_iterator_filtered( lo_vdat_filter ).

* Loop thru all tables (TABU entries) that make up the View
  lo_vdat_node ?= lo_vdat_iterator-&gt;get_next( ).
  WHILE lo_vdat_node IS BOUND.

* Get table name from XML
    me-&gt;getstructurefromattributes(
            EXPORTING  node      = lo_vdat_node
            CHANGING   structure = ls_vdat ).

* Create the filter to loop thru all TABU entries in document
    lo_tabu_filter = lo_vdat_node-&gt;create_filter_name( `TABU` ).

* Get an iterator to be used to cycle thru all occurrencies of TABU entries
    lo_tabu_iterator = lo_vdat_node-&gt;create_iterator_filtered( lo_tabu_filter ).

* Loop thru all tables (TABU entries) that make up the View
    lo_tabu_node ?= lo_tabu_iterator-&gt;get_next( ).
    WHILE lo_tabu_node IS BOUND.

* Get table name from XML
      me-&gt;getstructurefromattributes(
              EXPORTING  node      = lo_tabu_node
              CHANGING   structure = ls_tabu ).

* Check that table exists
      REFRESH lt_dd03p.
      CALL FUNCTION &apos;DDIF_TABL_GET&apos;
        EXPORTING
          name          = ls_tabu-tabname
          langu         = sy-langu
        TABLES
          dd03p_tab     = lt_dd03p
        EXCEPTIONS
          illegal_input = 1
          OTHERS        = 2.

      IF sy-subrc &lt;&gt; 0 OR lt_dd03p[] IS INITIAL.
        lv_str = `Table does not exist in the active state`.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = lv_str.
      ENDIF.

* Count number of key fields
      LOOP AT lt_dd03p TRANSPORTING NO FIELDS WHERE keyflag = abap_true.
        ADD  1 TO lv_num_keyfields.
      ENDLOOP.

* Create the type object for field E071K-TABKEY
      lo_tabkeydescr = cl_abap_typedescr=&gt;describe_by_name( `E071K-TABKEY` ).

* Build a structure type containing all key fields of the View table
      DELETE lt_dd03p WHERE keyflag      = abap_false OR
                            fieldname(1) = &apos;.&apos;.
      CLEAR: lv_keyfields, lv_where.
      lv_clidep = abap_false.
      lv_complete_keys = abap_true.
      REFRESH lt_fields.
      LOOP AT lt_dd03p ASSIGNING &lt;fs_dd03p&gt;.

        AT FIRST.

* Check if the View table is a client dependent table:
*   First table field must be a key field of type CLNT
          IF &lt;fs_dd03p&gt;-datatype = &apos;CLNT&apos; AND
             lv_num_keyfields &lt;&gt; 1.
            lv_clidep = abap_true.
          ENDIF.

        ENDAT.

* Build the key fields list
        CONCATENATE lv_keyfields &lt;fs_dd03p&gt;-fieldname INTO lv_keyfields
          SEPARATED BY space.

* Build the WHERE clause used to retrieve entries from database
        CONCATENATE `&lt;FS_T_TABLE&gt;-` &lt;fs_dd03p&gt;-fieldname INTO lv_str.
        CONCATENATE lv_where `AND` &lt;fs_dd03p&gt;-fieldname `=` lv_str INTO lv_where
          SEPARATED BY space.

        CHECK lv_complete_keys = abap_true.

        lo_typedescr = cl_abap_typedescr=&gt;describe_by_name( &lt;fs_dd03p&gt;-rollname ).

* Only CHARLIKE key fields are accepted
        IF lo_typedescr-&gt;type_kind CN &apos;CNDT&apos;.
          lv_complete_keys = abap_false.
          CONTINUE.
        ENDIF.

* One more CHARLIKE key field found
        APPEND INITIAL LINE TO lt_fields ASSIGNING &lt;fs_fields&gt;.
        &lt;fs_fields&gt;-name = &lt;fs_dd03p&gt;-fieldname.
        &lt;fs_fields&gt;-type ?= lo_typedescr.

* Build the type object for key fields found so far, to help answer the following question below
        lo_structdescr = cl_abap_structdescr=&gt;create( lt_fields ).

* If I add current CHARLIKE key field to key structure,
*   will it make the CHARLIKE key structure larger than field E071K-TABKEY ?
        IF lo_structdescr-&gt;length &gt; lo_tabkeydescr-&gt;length.

* CHARLIKE key field just added will make CHARLIKE key structure not fit field E071K-TABKEY, so delete it
          lv_tabix = lines( lt_fields ).
          DELETE lt_fields INDEX lv_tabix.

* Rebuild the type object for key fields, excluding current CHARLIKE key field that did not fit
          lo_structdescr = cl_abap_structdescr=&gt;create( lt_fields ).

          lv_complete_keys = abap_false.
          CONTINUE.

        ENDIF.

      ENDLOOP.

* Error if View table has no key fields (?!?)
      IF sy-subrc &lt;&gt; 0.
        lv_str = `Table has no key fields`.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = lv_str.
      ENDIF.

* Get rid of the &quot; &quot; at the beginning of the list of key fields of View table
      SHIFT lv_keyfields LEFT BY 1 PLACES.

* Build a list of all View table key fields
      SPLIT lv_keyfields AT space INTO TABLE lt_keyfields.

* Get rid of the &quot; AND &quot; at the beginning of the WHERE clause
      SHIFT lv_where LEFT BY 5 PLACES.

* Create a work area to store all CHARLIKE key fields of the View table that fit field E070K-TABKEY
      CREATE DATA lr_struct TYPE HANDLE lo_structdescr.
      ASSIGN lr_struct-&gt;* TO &lt;fs_struct&gt;.

* Create the View table using the CHARLIKE key. This will allow us to delete adjacent duplicates from it
*   using a dynamically COMPARING addition
      CREATE DATA lr_table TYPE STANDARD TABLE OF (ls_tabu-tabname) WITH KEY (lt_keyfields).
      ASSIGN lr_table-&gt;* TO &lt;fs_t_table&gt;.

* Create a table to contain existing data from database
      CREATE DATA lr_table_2 LIKE &lt;fs_t_table&gt;.
      ASSIGN lr_table_2-&gt;* TO &lt;fs_t_table_2&gt;.

* Create the filter to loop thru all DataRow entries in document for the View table
      lo_datarow_filter = lo_tabu_node-&gt;create_filter_name( `DataRow` ).

* Get an iterator to be used to cycle thru all occurrencies of DataRow entries
      lo_datarow_iterator = lo_tabu_node-&gt;create_iterator_filtered( lo_datarow_filter ).

* Collect all DataRow entries of current View table
      lo_datarow_node ?= lo_datarow_iterator-&gt;get_next( ).
      WHILE lo_datarow_node IS BOUND.

* Append contents of each DataRow entry to the View table
        APPEND INITIAL LINE TO &lt;fs_t_table&gt; ASSIGNING &lt;fs_s_table&gt;.

        me-&gt;getstructurefromattributes(
                EXPORTING   node      = lo_datarow_node
                CHANGING    structure = &lt;fs_s_table&gt; ).

* If it&apos;s a client dependent table, replace CLNT key field with logged on client
        IF lv_clidep = abap_true.
          ASSIGN COMPONENT 1 OF STRUCTURE &lt;fs_s_table&gt; TO &lt;fs_mandt&gt;.
          &lt;fs_mandt&gt; = sy-mandt.
        ENDIF.

* Build table key to be stored in the object keys table
        &lt;fs_struct&gt; = &lt;fs_s_table&gt;.

* Build the table key for each DataRow entry
        APPEND INITIAL LINE TO lt_e071k ASSIGNING &lt;fs_e071k&gt;.
        &lt;fs_e071k&gt;-pgmid      = &apos;R3TR&apos;.
        &lt;fs_e071k&gt;-object     = &apos;TABU&apos;.
        &lt;fs_e071k&gt;-objname    = ls_tabu-tabname.
        &lt;fs_e071k&gt;-mastertype = &apos;CDAT&apos;.
        &lt;fs_e071k&gt;-mastername = ls_cdat-name.
        &lt;fs_e071k&gt;-viewname   = ls_vdat-name.
        &lt;fs_e071k&gt;-tabkey     = &lt;fs_struct&gt;.
        &lt;fs_e071k&gt;-sortflag   = &apos;2&apos;.
        &lt;fs_e071k&gt;-activity   = ls_vdat-activity.

* Get next DataRow entry
        lo_datarow_node ?= lo_datarow_iterator-&gt;get_next( ).

      ENDWHILE.

      IF &lt;fs_t_table&gt;[] IS NOT INITIAL.

* Check if any of the entries to be inserted already exists in database
        SELECT  (lv_keyfields)
          FROM  (ls_tabu-tabname)
          INTO  TABLE &lt;fs_t_table_2&gt;
          FOR ALL ENTRIES IN &lt;fs_t_table&gt;
          WHERE (lv_where).

* At least one table entry already exists in datrabase
        IF sy-subrc = 0.

* Overwrite existing records or write only the records that does not exist in database
*   depending on the &quot;Overwrite Originals&quot; flag of SAPLINK selection screen
          IF overwrite = abap_true.
            DELETE (ls_tabu-tabname) FROM TABLE &lt;fs_t_table_2&gt;.
          ELSE.

* If no overwrite is desired, delete all existing entries from the
*   View table and also from the CHARLIKE key fields table
            LOOP AT &lt;fs_t_table_2&gt; ASSIGNING &lt;fs_s_table&gt;.

* Remove entry from View table
              DELETE TABLE &lt;fs_t_table&gt; FROM &lt;fs_s_table&gt;.

* Also remove entry from the object keys table
              &lt;fs_struct&gt; = &lt;fs_s_table&gt;.
              READ TABLE lt_e071k TRANSPORTING NO FIELDS
                WITH KEY objname    = ls_tabu-tabname
                         viewname   = ls_vdat-name
                         mastername = ls_cdat-name
                         tabkey     = &lt;fs_struct&gt;.
              IF sy-subrc = 0.
                DELETE lt_e071k INDEX sy-tabix.
              ENDIF.

            ENDLOOP.

          ENDIF.

        ENDIF.

      ENDIF.

* Store all entries that will be written to database later
      IF &lt;fs_t_table&gt;[] IS NOT INITIAL.

* Get rid of duplicate keys in the View table
        REFRESH lt_sortfields.
        LOOP AT lt_keyfields ASSIGNING &lt;fs_keyfields&gt;.
          APPEND INITIAL LINE TO lt_sortfields ASSIGNING &lt;fs_sortfields&gt;.
          &lt;fs_sortfields&gt;-name = &lt;fs_keyfields&gt;.
        ENDLOOP.
        SORT &lt;fs_t_table&gt; BY (lt_sortfields).
        DELETE ADJACENT DUPLICATES FROM &lt;fs_t_table&gt;.

        APPEND INITIAL LINE TO lt_entries ASSIGNING &lt;fs_entries&gt;.
        &lt;fs_entries&gt;-tabname  = ls_tabu-tabname.
        CREATE DATA &lt;fs_entries&gt;-table LIKE &lt;fs_t_table&gt;.
        ASSIGN &lt;fs_entries&gt;-table-&gt;* TO &lt;fs_t_table_2&gt;.
        &lt;fs_t_table_2&gt;[] =  &lt;fs_t_table&gt;[].

      ENDIF.

* If not storing complete keys, append an &quot;*&quot; at the end of every key entry
      IF lv_complete_keys = abap_false.
        LOOP AT lt_e071k ASSIGNING &lt;fs_e071k&gt;
          WHERE objname    = ls_tabu-tabname AND
                viewname   = ls_vdat-name AND
                mastername = ls_cdat-name.
          CONCATENATE &lt;fs_e071k&gt;-tabkey &apos;*&apos; INTO &lt;fs_e071k&gt;-tabkey.
        ENDLOOP.
      ENDIF.

* Get next TABU entry
      lo_tabu_node ?= lo_tabu_iterator-&gt;get_next( ).

    ENDWHILE.

* Get next VDAT entry
    lo_vdat_node ?= lo_vdat_iterator-&gt;get_next( ).

  ENDWHILE.

  IF lt_entries[] IS NOT INITIAL.

* Get rid of duplicate object keys
    SORT lt_e071k BY mastername objname tabkey.
    DELETE ADJACENT DUPLICATES FROM lt_e071k COMPARING mastername objname tabkey.

* Attach inserted entries to a request
    ls_ko200-pgmid     = &apos;R3TR&apos;.
    ls_ko200-object    = lv_objtype.
    ls_ko200-obj_name  = ls_cdat-name.
    ls_ko200-objfunc   = &apos;K&apos;.
    ls_ko200-activity  = ls_cdat-activity.
    ls_ko200-operation = &apos;I&apos;.

    IF zsaplink_tools=&gt;add_to_request( is_ko200  = ls_ko200
                                       it_e071k  = lt_e071k ) &lt;&gt; 0.
      lv_str = `Error while attaching table entries to the request`.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = lv_str.
    ENDIF.

* Insert all selected records into database
    LOOP AT lt_entries ASSIGNING &lt;fs_entries&gt;.
      ASSIGN &lt;fs_entries&gt;-table-&gt;* TO &lt;fs_t_table_2&gt;.
      INSERT (&lt;fs_entries&gt;-tabname) FROM TABLE &lt;fs_t_table_2&gt;.
    ENDLOOP.

  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  DATA: v_msg TYPE string.

  v_msg = `Operation not implemented`.
  RAISE EXCEPTION TYPE zcx_saplink
    EXPORTING
      textid = zcx_saplink=&gt;error_message
      msg = v_msg.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  objecttype = &apos;CDAT&apos;.  &quot;Selected view contents

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_PDF_INTERFACES" VERSION="1" LANGU="D" DESCRIPT="SAPlink - PDF Interface Plug in" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_PDF_INTERFACES" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_PDF_INTERFACES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_PDF_INTERFACES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_PDF_INTERFACES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_PDF_INTERFACES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_PDF_INTERFACES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD checkexists.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com
  SELECT SINGLE name FROM fpinterface INTO objname WHERE name = objname.
  IF sy-subrc = 0.
    exists = &apos;X&apos;.
  ENDIF.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createixmldocfromobject.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com
  DATA rootnode     TYPE REF TO if_ixml_element.
  DATA sourcenode   TYPE REF TO if_ixml_element.
  DATA rc           TYPE sysubrc.
  DATA sourcestring TYPE string.
  DATA _objtype     TYPE string.

  TYPES: t_raw(1024) TYPE x.

  DATA: l_wb_interface        TYPE REF TO   if_fp_wb_interface,
        l_interface           TYPE REF TO   if_fp_interface,
        l_interfacename       TYPE          fpname,
        l_name           TYPE          string,
        l_file_table     TYPE          filetable,
        l_filename       TYPE          string,
        l_pathname       TYPE          string,
        l_fullpath       TYPE          string,
        l_rc             TYPE          i,
        l_user_action    TYPE          i,
        l_xstring        TYPE          xstring,
        l_string         TYPE          string,
        l_binary_table   TYPE TABLE OF t_raw,
        l_binary_length  TYPE          i,
        l_node           TYPE REF TO   if_fp_node,
        l_interface_wb        TYPE REF TO   cl_fp_wb_interface,
        l_interface_wb_if     TYPE REF TO   if_fp_wb_interface.

  l_interfacename = objname.

  TRY.
      CALL METHOD cl_fp_wb_interface=&gt;load
        EXPORTING
          i_name         = l_interfacename
        RECEIVING
          r_wb_interface = l_interface_wb_if.
    CATCH cx_fp_api_usage .
      CLEAR ixmldocument.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_found.
    CATCH cx_fp_api_repository .
      CLEAR ixmldocument.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_found.
    CATCH cx_fp_api_internal .
      CLEAR ixmldocument.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDTRY.

  l_wb_interface ?= l_interface_wb_if.

  l_interface ?= l_wb_interface-&gt;get_object( ).

  l_name = l_wb_interface-&gt;get_name( ).

  TRY.
      l_xstring = cl_fp_helper=&gt;convert_interface_to_xstring( l_interface ).
    CATCH cx_fp_api_internal.
      CLEAR ixmldocument.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDTRY.

  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).

  DATA: wa_fpinterface TYPE fpinterface.

  SELECT SINGLE * FROM fpinterface INTO wa_fpinterface WHERE name = objname.

  setattributesfromstructure( node = rootnode structure =  wa_fpinterface
  ).
  sourcenode = xmldoc-&gt;create_element( &apos;PDFinterface&apos; ).

  l_string = l_xstring.

  rc = sourcenode-&gt;if_ixml_node~set_value( l_string ).
  rc = rootnode-&gt;append_child( sourcenode ).
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createobjectfromixmldoc.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

  DATA rootnode         TYPE REF TO if_ixml_element.
  DATA progattribs      TYPE trdir.
  DATA sourcenode       TYPE REF TO if_ixml_element.
  DATA l_xml_node       TYPE REF TO if_ixml_element.
  DATA source           TYPE string.
  DATA sourcetable      TYPE table_of_strings.
  DATA _objtype         TYPE string.
  DATA checkexists      TYPE flag.

  DATA: wa_fpinterface     TYPE fpinterface,
        interfacename        TYPE tdsfname,
        modif_language  TYPE sylangu.

  TYPES: t_raw(1024) TYPE x.

  DATA: l_exception_workbench  TYPE REF TO   cx_fp_ui_workbench,
        l_exception_usage      TYPE REF TO   cx_fp_api_usage,
        l_exception_repository TYPE REF TO   cx_fp_api_repository,
        l_exception_internal   TYPE REF TO   cx_fp_api_internal,
        l_message_text         TYPE          string,
        l_interface            TYPE REF TO   if_fp_interface,
        l_file_table           TYPE          filetable,
        l_filename             TYPE          string,
        l_rc                   TYPE          i,
        l_user_action          TYPE          i,
        l_xstring              TYPE          xstring,
        l_binary_table         TYPE TABLE OF t_raw,
        l_binary_length        TYPE          i,
        l_node                 TYPE REF TO   if_fp_node,
        m_wb_object            TYPE REF TO   if_fp_wb_interface.

  _objtype = getobjecttype( ).
  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = wa_fpinterface.
  objname = wa_fpinterface-name.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  sourcenode = rootnode-&gt;find_from_name( &apos;PDFinterface&apos; ).
  source = sourcenode-&gt;get_value( ).
  l_xstring = source.

  interfacename = objname.

  TRY.
      TRY.
          cl_fp_wb_helper=&gt;interface_exists( wa_fpinterface-name ).
        CATCH cx_fp_api_usage INTO l_exception_usage.
          RAISE EXCEPTION TYPE zcx_saplink
               EXPORTING msg = &apos;Error creating PDF interface&apos;.
        CATCH cx_fp_api_repository INTO l_exception_repository.

          CASE l_exception_repository-&gt;textid.

            WHEN cx_fp_api_repository=&gt;object_already_exists.

              l_message_text = l_exception_repository-&gt;get_text( ).

              RAISE EXCEPTION TYPE zcx_saplink
               EXPORTING msg = &apos;Object already exists&apos;.

          ENDCASE.

      ENDTRY.

      TRY.
          l_interface = cl_fp_helper=&gt;convert_xstring_to_interface( i_xstring = l_xstring i_language = sy-langu ).

*          CALL METHOD cl_fp_helper=&gt;set_new_layout_id
*            CHANGING
*              c_form = l_interface.
        CATCH cx_fp_api_internal.
          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Convert XML error&apos;.
          EXIT.
      ENDTRY.

      TRY.
          m_wb_object = cl_fp_wb_interface=&gt;create( i_name = wa_fpinterface-name i_interface = l_interface ).
        CATCH cx_fp_api_usage INTO l_exception_usage.

          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Error creating PDF interface&apos;.

        CATCH cx_fp_api_repository INTO l_exception_repository.

          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Error creating PDF interface&apos;.

      ENDTRY.

      TRY.
          m_wb_object-&gt;save( ).
        CATCH cx_fp_api_usage INTO l_exception_usage.

          TRY.
              m_wb_object-&gt;free( ).
            CATCH cx_fp_api.
          ENDTRY.

          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Error saving PDF interface&apos;.

        CATCH cx_fp_api_repository INTO l_exception_repository.

          TRY.
              m_wb_object-&gt;free( ).
            CATCH cx_fp_api.
          ENDTRY.

          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Error saving PDF interface&apos;.

        CATCH cx_fp_api_internal INTO l_exception_internal.

          TRY.
              m_wb_object-&gt;free( ).
            CATCH cx_fp_api.
          ENDTRY.

          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Error saving PDF interface&apos;.

      ENDTRY.

      TRY.
          m_wb_object-&gt;free( ).
        CATCH cx_fp_api.
      ENDTRY.


    CATCH cx_fp_ui_workbench INTO l_exception_workbench.

      IF l_exception_workbench-&gt;textid &lt;&gt; cx_fp_ui_workbench=&gt;error_occured.

        l_message_text = l_exception_workbench-&gt;get_text( ).
        RAISE EXCEPTION TYPE zcx_saplink
         EXPORTING msg = l_message_text.

      ENDIF.

  ENDTRY.

  name = objname.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD deleteobject.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

  DATA: l_wb_interface   TYPE REF TO cl_fp_wb_interface,
        l_interface  TYPE fpname.

  l_interface = objname.

  TRY.
      CALL METHOD cl_fp_wb_interface=&gt;delete
        EXPORTING
          i_name = l_interface.
    CATCH cx_fp_api_usage .
    CATCH cx_fp_api_repository .
  ENDTRY.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD getobjecttype.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com
  objecttype = &apos;SFPI&apos;.
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_SMARTSTYLE" VERSION="1" LANGU="D" DESCRIPT="SapLink Smart Syle Installer" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_SMARTSTYLE" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_SMARTSTYLE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SMARTSTYLE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SMARTSTYLE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SMARTSTYLE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_SMARTSTYLE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD checkexists.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

  SELECT SINGLE stylename FROM stxsadm
                          INTO objname WHERE stylename EQ objname.
  IF sy-subrc EQ 0.
    exists = &apos;X&apos;.
  ENDIF.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createixmldocfromobject.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

  DATA: rootnode        TYPE REF TO if_ixml_element,
        sourcenode      TYPE REF TO if_ixml_element,
        headers_node    TYPE REF TO if_ixml_element,
        paragraphs_node TYPE REF TO if_ixml_element,
        strings_node    TYPE REF TO if_ixml_element,
        tabstops_node   TYPE REF TO if_ixml_element,

        paragraphs      TYPE tsfparas,
        strings         TYPE tsfstrings,
        tabstops        TYPE tsftabs,

        header          TYPE ssfcats,
        rc              TYPE sysubrc,

        _objtype        TYPE string,
        stylename       TYPE tdssname.

  FIELD-SYMBOLS:
        &lt;fs_paragraph&gt;  TYPE ssfparas,
        &lt;fs_string&gt;     TYPE ssfstrings,
        &lt;fs_tabstop&gt;    TYPE stxstab,
        &lt;fs_header&gt;     TYPE ssfcats.


  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).

  stylename = objname.

  CALL FUNCTION &apos;SSF_READ_STYLE&apos;
    EXPORTING
      i_style_name             = stylename
      i_style_active_flag      = &apos;A&apos;
      i_style_variant          = &apos;%MAIN&apos;
      i_style_language         = sy-langu
    IMPORTING
      e_header                 = header
    TABLES
      e_paragraphs             = paragraphs
      e_strings                = strings
      e_tabstops               = tabstops
    EXCEPTIONS
      no_name                  = 1
      no_style                 = 2
      active_style_not_found   = 3
      inactive_style_not_found = 4
      no_variant               = 5
      no_main_variant          = 6
      cancelled                = 7
      no_access_permission     = 8
      OTHERS                   = 9.

* Read Inactive Version, If Active Version doesn&apos;t exists
  IF header-active  IS INITIAL.
    CALL FUNCTION &apos;SSF_READ_STYLE&apos;
      EXPORTING
        i_style_name                  = stylename
        i_style_active_flag           = &apos;I&apos;
       i_style_variant                = &apos;%MAIN&apos;
       i_style_language               = sy-langu
     IMPORTING
       e_header                       = header
     TABLES
       e_paragraphs                   = paragraphs
       e_strings                      = strings
       e_tabstops                     = tabstops
     EXCEPTIONS
       no_name                        = 1
       no_style                       = 2
       active_style_not_found         = 3
       inactive_style_not_found       = 4
       no_variant                     = 5
       no_main_variant                = 6
       cancelled                      = 7
       no_access_permission           = 8
       OTHERS                         = 9   .
  ENDIF.

  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE zcx_saplink
               EXPORTING textid = zcx_saplink=&gt;not_found.
      WHEN 2.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;no_style&apos;.

      WHEN 3.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;active_style_not_found&apos;.
      WHEN 4.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;inactive_style_not_found&apos;.
      WHEN 5.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;no_variant&apos;.
      WHEN 6.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;no_main_variant&apos;.
      WHEN 7.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;cancelled&apos;.
      WHEN 8.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;no_access_permission&apos;.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;Error&apos;.
    ENDCASE.

  ENDIF.

*   Populate the header information
  header-stylename = stylename.
  header-active    = &apos;I&apos;.
  setattributesfromstructure( node      = rootnode
                              structure = header ).


*   Populate the Paragraphs
  LOOP AT paragraphs ASSIGNING &lt;fs_paragraph&gt;.
    &lt;fs_paragraph&gt;-active = &apos;I&apos;.
    paragraphs_node = xmldoc-&gt;create_element( &apos;paragraphs&apos; ).
    setattributesfromstructure( node = paragraphs_node structure =
    &lt;fs_paragraph&gt; ).
    rc = rootnode-&gt;append_child( paragraphs_node ).
  ENDLOOP.

*   Populate the strings
  LOOP AT strings ASSIGNING &lt;fs_string&gt;.
    &lt;fs_string&gt;-active = &apos;I&apos;.
    strings_node = xmldoc-&gt;create_element( &apos;strings&apos; ).
    setattributesfromstructure( node = strings_node structure =
    &lt;fs_string&gt; ).
    rc = rootnode-&gt;append_child( strings_node ).

  ENDLOOP.

*   Populate the tabstops
  LOOP AT tabstops ASSIGNING &lt;fs_tabstop&gt;.
    &lt;fs_tabstop&gt;-active = &apos;I&apos;.
    tabstops_node = xmldoc-&gt;create_element( &apos;tabstops&apos; ).
    setattributesfromstructure( node = tabstops_node structure =
    &lt;fs_tabstop&gt; ).
    rc = rootnode-&gt;append_child( tabstops_node ).
  ENDLOOP.

*   append root node to xmldoc
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createobjectfromixmldoc.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

  DATA: rootnode         TYPE REF TO if_ixml_element,
        node             TYPE REF TO if_ixml_element,
        filter           TYPE REF TO if_ixml_node_filter,
        iterator         TYPE REF TO if_ixml_node_iterator,

        paragraphs       TYPE tsfparas,
        strings          TYPE tsfstrings,
        tabstops         TYPE tsftabs,

        wa_paragraph     TYPE ssfparas,
        wa_string        TYPE ssfstrings,
        wa_tabstop       TYPE stxstab,
        header           TYPE ssfcats,

        _objtype         TYPE string,
        checkexists      TYPE flag.


  _objtype    = getobjecttype( ).

  xmldoc      = ixmldocument.
  rootnode    = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = header.


  objname = header-stylename.

* Check for the existance of the object
  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* Paragraphs
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;paragraphs&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CLEAR wa_paragraph.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_paragraph.
    APPEND wa_paragraph TO paragraphs.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* Strings
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;strings&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CLEAR wa_paragraph.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_string.
    APPEND wa_string TO strings.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* Tabstops
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;tabstops&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CLEAR wa_paragraph.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_tabstop.
    APPEND wa_tabstop TO tabstops.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  header-devclass = devclass.

  CALL FUNCTION &apos;SSF_SAVE_STYLE&apos;
    EXPORTING
      i_header     = header
    TABLES
      i_paragraphs = paragraphs
      i_strings    = strings
      i_tabstops   = tabstops.


* successful install
  name = objname.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD deleteobject.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

  DATA: stylename TYPE tdssname.

  stylename = objname.
  CALL FUNCTION &apos;SSF_DELETE_STYLE&apos;
    EXPORTING
      i_stylename           = stylename
      i_with_dialog         = &apos; &apos;
      i_with_confirm_dialog = &apos; &apos;
    EXCEPTIONS
      no_name               = 1
      no_style              = 2
      style_locked          = 3
      cancelled             = 4
      no_access_permission  = 5
      illegal_language      = 6
      OTHERS                = 7.
  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE zcx_saplink
               EXPORTING textid = zcx_saplink=&gt;not_found.
      WHEN 2.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;no_style&apos;.

      WHEN 3.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;style_locked&apos;.
      WHEN 4.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;cancelled&apos;.
      WHEN 5.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;no_access_permission&apos;.
      WHEN 6.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;illegal_language&apos;.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;Error&apos;.
    ENDCASE.

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD getobjecttype.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

  objecttype = &apos;SSST&apos;. &quot; Smart Style
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_TABU" VERSION="1" LANGU="D" DESCRIPT="SapLink Class Installer" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZSAPLINK_TABU" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_TABU" TYPEGROUP="SEOP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_TABU" TYPEGROUP="SEOR" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_TABU" TYPEGROUP="SEOS" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_TABU" TYPEGROUP="SEOT" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_TABU" TYPEGROUP="SEOX" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <forwardDeclaration>SEOP</forwardDeclaration>
  <forwardDeclaration>SEOR</forwardDeclaration>
  <forwardDeclaration>SEOS</forwardDeclaration>
  <forwardDeclaration>SEOT</forwardDeclaration>
  <forwardDeclaration>SEOX</forwardDeclaration>
  <attribute CLSNAME="ZSAPLINK_TABU" CMPNAME="T_E071" VERSION="1" LANGU="D" DESCRIPT="Task objects" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZSAPLINK_TOOLS=&gt;TY_T_E071" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TABU" CMPNAME="T_E071K" VERSION="1" LANGU="D" DESCRIPT="Task objects keys" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZSAPLINK_TOOLS=&gt;TY_T_E071K" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TABU" CMPNAME="V_MODE" VERSION="1" LANGU="D" DESCRIPT="O=add object, R=add request" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="C" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_TABU" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_TABU" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABU" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABU" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABU" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_TABU" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  exists = abap_false.  &quot; No implementation of existence check

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_TABU" CMPNAME="CREATEIXMLDOCFROMDATABASE" VERSION="1" LANGU="D" DESCRIPT="Creates an IF_IXML_DOCUMENT from OBJNAME Attr.  of database" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_TABU" CMPNAME="CREATEIXMLDOCFROMDATABASE" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <exception CLSNAME="ZSAPLINK_TABU" CMPNAME="CREATEIXMLDOCFROMDATABASE" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method CREATEIXMLDOCFROMDATABASE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  TYPES: BEGIN OF ty_tabu,
           tabname  TYPE dd02v-tabname,
           activity TYPE e071-activity,
         END OF ty_tabu.

  DATA: lv_str     TYPE string,
        lv_objtype TYPE string,
        lv_objname TYPE ddobjname,

        lr_t_table TYPE REF TO data,

        ls_dd02v TYPE dd02v,

        lo_tabu_node    TYPE REF TO if_ixml_element,
        lo_datarow_node TYPE REF TO if_ixml_element,
        ls_tabu         TYPE ty_tabu.

  FIELD-SYMBOLS: &lt;fs_t_table&gt; TYPE STANDARD TABLE,
                 &lt;fs_s_table&gt; TYPE any.

* Get the object type and name
  lv_objtype = me-&gt;getobjecttype( ).
  lv_objname = objname.

  CALL FUNCTION &apos;DDIF_TABL_GET&apos;
    EXPORTING
      name          = lv_objname
      langu         = sy-langu
    IMPORTING
      dd02v_wa      = ls_dd02v
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc &lt;&gt; 0 OR ls_dd02v IS INITIAL.
    lv_str = `Table does not exist in the active state`.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_str.
  ENDIF.

* Creates the TABU root node
  lo_tabu_node    = xmldoc-&gt;create_element( lv_objtype ).
  ls_tabu-tabname = lv_objname.
  CLEAR ls_tabu-activity.
  me-&gt;setattributesfromstructure( node      = lo_tabu_node
                                  structure = ls_tabu  ).

  CREATE DATA lr_t_table TYPE STANDARD TABLE OF (ls_tabu-tabname).
  ASSIGN lr_t_table-&gt;* TO &lt;fs_t_table&gt;.

* Get data from table
  zsaplink_tools=&gt;get_filtered_table( EXPORTING
                                        iv_tabname      = ls_tabu-tabname
                                      IMPORTING
                                        et_results      = &lt;fs_t_table&gt; ).

* Save data to XML document
  LOOP AT &lt;fs_t_table&gt; ASSIGNING &lt;fs_s_table&gt;.

* Creates the TABU node
    lo_datarow_node = xmldoc-&gt;create_element( `DataRow` ).
    me-&gt;setattributesfromstructure( node      = lo_datarow_node
                                    structure = &lt;fs_s_table&gt;  ).
    lo_tabu_node-&gt;append_child( lo_datarow_node ).

  ENDLOOP.

  xmldoc-&gt;append_child( lo_tabu_node ).

  ixmldocument = xmldoc.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

* Get all tasks of the request supplied in the calling program, if that&apos;s the case
  zsaplink_tools=&gt;init_plugin( EXPORTING
                                  iv_mastertype = &apos;TABU&apos;
                                IMPORTING
                                  et_e071  = me-&gt;t_e071
                                  et_e071k = me-&gt;t_e071k
                                CHANGING
                                  cv_mode  = me-&gt;v_mode ).

  IF me-&gt;v_mode = zsaplink_tools=&gt;c_mode_request.
    ixmldocument = me-&gt;createixmldocfromrequest( ).
  ELSEIF me-&gt;v_mode = zsaplink_tools=&gt;c_mode_object.
    ixmldocument = me-&gt;createixmldocfromdatabase( ).
  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_TABU" CMPNAME="CREATEIXMLDOCFROMREQUEST" VERSION="1" LANGU="D" DESCRIPT="Creates an IF_IXML_DOCUMENT from OBJNAME Attr.  of a request" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_TABU" CMPNAME="CREATEIXMLDOCFROMREQUEST" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <exception CLSNAME="ZSAPLINK_TABU" CMPNAME="CREATEIXMLDOCFROMREQUEST" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method CREATEIXMLDOCFROMREQUEST.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  TYPES: BEGIN OF ty_tabu,
           tabname  TYPE dd02v-tabname,
           activity TYPE e071-activity,
         END OF ty_tabu.

  DATA: lv_str           TYPE string,
        lv_objtype       TYPE string,
        lv_from          TYPE sy-tabix,
        lv_len           TYPE i,
        lv_complete_keys TYPE abap_bool,
        lv_charfields    TYPE string,
        lv_keyfields     TYPE string,
        lv_where         TYPE string,
        lv_typedescr     TYPE REF TO cl_abap_typedescr,

        lr_t_table  TYPE REF TO data,
        lr_s_table  TYPE REF TO data,
        lr_tabkeys  TYPE REF TO data,
        lr_tabkeys2 TYPE REF TO data,

        lt_dd03p       TYPE STANDARD TABLE OF dd03p,
        lt_fields      TYPE cl_abap_structdescr=&gt;component_table,
        lt_keyfields   TYPE abap_keydescr_tab,
        lt_charfields  TYPE abap_keydescr_tab,
        lt_sortfields  TYPE abap_sortorder_tab,

        lo_structdescr TYPE REF TO cl_abap_structdescr,
        lo_tabledescr  TYPE REF TO cl_abap_tabledescr,
        lo_tabkeydescr TYPE REF TO cl_abap_typedescr,

        lo_tabu_node    TYPE REF TO if_ixml_element,
        lo_datarow_node TYPE REF TO if_ixml_element,
        ls_tabu         TYPE ty_tabu.

  FIELD-SYMBOLS: &lt;fs_e071&gt;       LIKE LINE OF t_e071,
                 &lt;fs_e071k&gt;      LIKE LINE OF t_e071k,
                 &lt;fs_t_table&gt;    TYPE STANDARD TABLE,
                 &lt;fs_s_table&gt;    TYPE any,
                 &lt;fs_t_tabkeys&gt;  TYPE STANDARD TABLE,
                 &lt;fs_t_tabkeys2&gt; TYPE STANDARD TABLE,
                 &lt;fs_s_tabkey&gt;   TYPE any,
                 &lt;fs_field&gt;      LIKE LINE OF lt_fields,
                 &lt;fs_dd03p&gt;      LIKE LINE OF lt_dd03p,
                 &lt;fs_sortfield&gt;  LIKE LINE OF lt_sortfields,
                 &lt;fs_keyfield&gt;   LIKE LINE OF lt_keyfields.

* Get the object type
  lv_objtype = me-&gt;getobjecttype( ).

* Look for the first task activity not yet processed
  READ TABLE t_e071 ASSIGNING &lt;fs_e071&gt;
    WITH KEY obj_name = objname
             used     = space
    BINARY SEARCH.

  IF sy-subrc &lt;&gt; 0.
    lv_str = `No more object(s) of this type found in the request(s) supplied`.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_str.
  ENDIF.

* Position on the first key of the object being processed
  READ TABLE t_e071k TRANSPORTING NO FIELDS WITH KEY trkorr     = &lt;fs_e071&gt;-trkorr
                                                     activity   = &lt;fs_e071&gt;-activity
                                                     mastername = &lt;fs_e071&gt;-obj_name.

  IF sy-subrc = 0.

    lv_from = sy-tabix.

* Process all keys belonging to current object
    LOOP AT t_e071k ASSIGNING &lt;fs_e071k&gt; FROM lv_from.

      AT NEW objname.

* Get information about all fields of the table
        REFRESH lt_dd03p.
        CALL FUNCTION &apos;DDIF_TABL_GET&apos;
          EXPORTING
            name          = &lt;fs_e071k&gt;-objname
            langu         = sy-langu
          TABLES
            dd03p_tab     = lt_dd03p
          EXCEPTIONS
            illegal_input = 1
            OTHERS        = 2.

        IF sy-subrc &lt;&gt; 0 OR lt_dd03p[] IS INITIAL.
          lv_str = `Table does not exist in the active state`.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING
              textid = zcx_saplink=&gt;error_message
              msg    = lv_str.
        ENDIF.

* Create the type object for field E071K-TABKEY
        lo_tabkeydescr = cl_abap_typedescr=&gt;describe_by_name( `E071K-TABKEY` ).

* Loop thru all key fields of the table:
*   1) Building a list of all key fields
*   2) Building a list of all CHARLIKE key fields that fit fields E071K-TABKEY
*   3) Building the WHERE clause for the SELECT to be used for data retrieval, using FOR ALL ENTRIES
*   4) Setting up table LT_FIELDS, with all key fields
        CLEAR: lv_keyfields, lv_charfields, lv_where.
        lv_complete_keys = abap_true.
        REFRESH lt_fields.
        LOOP AT lt_dd03p ASSIGNING &lt;fs_dd03p&gt;
          WHERE keyflag = abap_true AND
                fieldname(1) &lt;&gt; &apos;.&apos;.

* Build the list of all key fields names
          CONCATENATE lv_keyfields &lt;fs_dd03p&gt;-fieldname INTO lv_keyfields
            SEPARATED BY space.

* Add key field to the key type strucuture of the object keys table
          APPEND INITIAL LINE TO lt_fields ASSIGNING &lt;fs_field&gt;.
          &lt;fs_field&gt;-name = &lt;fs_dd03p&gt;-fieldname.
          &lt;fs_field&gt;-type ?= cl_abap_structdescr=&gt;describe_by_name( &lt;fs_dd03p&gt;-rollname ).

          CHECK lv_complete_keys = abap_true.

* Check if structure containing all key fields of the View table is CHARLIKE
          IF &lt;fs_field&gt;-type-&gt;type_kind CN &apos;CNDT&apos;.
            lv_complete_keys = abap_false.
            CONTINUE.
          ENDIF.

* Build the type object for key fields found so far, to help answer the following question below
          lo_structdescr = cl_abap_structdescr=&gt;create( lt_fields ).

* If I add current CHARLIKE key field to key structure,
*   will it make the CHARLIKE key structure larger than field E071K-TABKEY ?
          IF lo_structdescr-&gt;length &gt; lo_tabkeydescr-&gt;length.
            lv_complete_keys = abap_false.
            CONTINUE.
          ENDIF.

* Build the list of CHARLIKE key fields names
          CONCATENATE lv_charfields &lt;fs_dd03p&gt;-fieldname INTO lv_charfields
            SEPARATED BY space.

* Build the &apos;FIELDNAME = &lt;FS_T_TAKEYS&gt;-FIELDNAME&apos; WHERE condition
          CONCATENATE &apos;&lt;FS_T_TABKEYS&gt;-&apos; &lt;fs_dd03p&gt;-fieldname INTO lv_str.
          CONCATENATE lv_where &apos;AND&apos; &lt;fs_dd03p&gt;-fieldname &apos;=&apos; lv_str INTO lv_where SEPARATED BY space.

        ENDLOOP.

* Table has no key fields (?!?)
        IF sy-subrc &lt;&gt; 0.
          lv_str = `Table has no key fields`.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING
              textid = zcx_saplink=&gt;error_message
              msg    = lv_str.
        ENDIF.

* Get rid of the &quot; &quot; at the beginning of key fuields list
        SHIFT lv_keyfields LEFT BY 1 PLACES.

* List of table key fields
        SPLIT lv_keyfields AT space INTO TABLE lt_keyfields.

* Get rid of the &quot; &quot; at the beginning of CHAR key fields list
        SHIFT lv_charfields LEFT BY 1 PLACES.

* List of table CHARLIKE key fields
        SPLIT lv_charfields AT space INTO TABLE lt_charfields.

* Get rid of the &quot; AND &quot; at the beginning of the WHERE clause
        SHIFT lv_where LEFT BY 5 PLACES.

* Creates the dynamic table with key fields of the data table
        lo_structdescr = cl_abap_structdescr=&gt;create( lt_fields ).
        lo_tabledescr = cl_abap_tabledescr=&gt;create( p_line_type = lo_structdescr
                                                    p_key       = lt_keyfields ).
        CREATE DATA lr_tabkeys TYPE HANDLE lo_tabledescr.
        ASSIGN lr_tabkeys-&gt;* TO &lt;fs_t_tabkeys&gt;.

      ENDAT.

* If we are not storing complete keys, get rid of the &quot;*&quot; at the end of key
      CLEAR lv_str.
      lv_len = strlen( &lt;fs_e071k&gt;-tabkey ) - 1.
      IF lv_len &gt;= 0.
        IF lv_complete_keys = abap_false AND
           &lt;fs_e071k&gt;-tabkey+lv_len(1) = &apos;*&apos;.
          lv_str = &lt;fs_e071k&gt;-tabkey(lv_len).
        ELSE.
          lv_str = &lt;fs_e071k&gt;-tabkey.
        ENDIF.
      ENDIF.

* Creates a new key in the keys table
      APPEND INITIAL LINE TO &lt;fs_t_tabkeys&gt; ASSIGNING &lt;fs_s_tabkey&gt;.
      &lt;fs_s_tabkey&gt; = lv_str.

      AT END OF objname.

* Get rid of duplicate keys in the keys table
        SORT &lt;fs_t_tabkeys&gt; BY table_line.
        IF lv_complete_keys = abap_true.
          DELETE ADJACENT DUPLICATES FROM &lt;fs_t_tabkeys&gt; COMPARING ALL FIELDS.
        ELSEIF lt_charfields[] IS NOT INITIAL.

* Create a table with same fields as LT_TABKEYS, but with CHAR key fields
          lo_tabledescr = cl_abap_tabledescr=&gt;create( p_line_type = lo_structdescr
                                                      p_key       = lt_charfields ).
          CREATE DATA lr_tabkeys2 TYPE HANDLE lo_tabledescr.
          ASSIGN lr_tabkeys2-&gt;* TO &lt;fs_t_tabkeys2&gt;.

* Get rid of all CHARLIKE key duplicates
          &lt;fs_t_tabkeys2&gt;[] = &lt;fs_t_tabkeys&gt;[].
          DELETE ADJACENT DUPLICATES FROM &lt;fs_t_tabkeys2&gt;.
          &lt;fs_t_tabkeys&gt;[] = &lt;fs_t_tabkeys2&gt;[].

        ENDIF.

* Only reuse the keys table as data table if data table fields are all key fields and
*   if data table allows storing complete keys in the request
        IF lines( lt_dd03p ) &lt;&gt; lines( lt_keyfields ) OR
           lv_complete_keys = abap_false.

* If not, then create the table that will contain the records to be written
          CREATE DATA lr_t_table TYPE STANDARD TABLE OF (&lt;fs_e071k&gt;-objname) WITH KEY (lt_keyfields).
          ASSIGN lr_t_table-&gt;* TO &lt;fs_t_table&gt;.

* And select the desired records from database using CHARLIKE keys table &lt;FS_T_TABKEYS&gt; as the key
          IF &lt;fs_t_tabkeys&gt;[] IS NOT INITIAL.
            SELECT  *
              INTO  TABLE &lt;fs_t_table&gt;
              FROM  (&lt;fs_e071k&gt;-objname)
              CLIENT SPECIFIED
              FOR ALL ENTRIES IN &lt;fs_t_tabkeys&gt;
              WHERE (lv_where).
          ENDIF.

        ELSE.

* If yes, the table &lt;fs_t_tabkeys&gt; already contains all fields that should be written
          ASSIGN &lt;fs_t_tabkeys&gt; TO &lt;fs_t_table&gt;.

        ENDIF.

        IF &lt;fs_t_table&gt;[] IS NOT INITIAL.

* Get rid of duplicate entries in the data table
          REFRESH lt_sortfields.
          LOOP AT lt_keyfields ASSIGNING &lt;fs_keyfield&gt;.
            APPEND INITIAL LINE TO lt_sortfields ASSIGNING &lt;fs_sortfield&gt;.
            &lt;fs_sortfield&gt;-name = &lt;fs_keyfield&gt;.
          ENDLOOP.
          SORT &lt;fs_t_table&gt; BY (lt_sortfields).
          DELETE ADJACENT DUPLICATES FROM &lt;fs_t_table&gt;.

* Creates the TABU node containing the table name
          lo_tabu_node = xmldoc-&gt;create_element( &apos;TABU&apos; ).
          ls_tabu-tabname = &lt;fs_e071k&gt;-objname.
          me-&gt;setattributesfromstructure( node      = lo_tabu_node
                                          structure = ls_tabu  ).

* Writes all records to the XML document
          LOOP AT &lt;fs_t_table&gt; ASSIGNING &lt;fs_s_table&gt;.

            lo_datarow_node = xmldoc-&gt;create_element( `DataRow` ).
            me-&gt;setattributesfromstructure( node = lo_datarow_node structure = &lt;fs_s_table&gt; ).
            lo_tabu_node-&gt;append_child( lo_datarow_node ).

          ENDLOOP.

* Inserts the TABU node into the XML document
          xmldoc-&gt;append_child( lo_tabu_node ).

        ENDIF.

        EXIT.

      ENDAT.

    ENDLOOP.

  ENDIF.

  &lt;fs_e071&gt;-used = abap_true.

  SORT t_e071 BY obj_name used trkorr activity.

  ixmldocument = xmldoc.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  TYPES: BEGIN OF ty_tabu,
           tabname  TYPE dd02l-tabname,
           activity TYPE e071-activity,
         END OF ty_tabu,

         BEGIN OF ty_entry,
           tabname TYPE dd02l-tabname,
           table   TYPE REF TO data,
         END OF ty_entry.

  DATA: lo_tabu_node     TYPE REF TO if_ixml_element,

        lo_datarow_node     TYPE REF TO if_ixml_element,
        lo_datarow_filter   TYPE REF TO if_ixml_node_filter,
        lo_datarow_iterator TYPE REF TO if_ixml_node_iterator,

        lt_dd03p TYPE STANDARD TABLE OF dd03p,

        ls_tabu TYPE ty_tabu,

        lv_objtype TYPE string,

        lv_clidep TYPE abap_bool,

        lv_num_keyfields TYPE i,

        lr_table   TYPE REF TO data,
        lr_table_2 LIKE lr_table,
        lr_struct  TYPE REF TO data,

        ls_ko200      TYPE ko200,
        lt_e071k      TYPE tredt_keys,
        lt_fields     TYPE cl_abap_structdescr=&gt;component_table,
        lt_keyfields  TYPE STANDARD TABLE OF dd03p-fieldname,
        lt_sortfields TYPE abap_sortorder_tab,
        lt_entries    TYPE STANDARD TABLE OF ty_entry,

        lo_structdescr TYPE REF TO cl_abap_structdescr,
        lo_tabkeydescr TYPE REF TO cl_abap_typedescr,
        lo_typedescr   TYPE REF TO cl_abap_typedescr,

        lv_keyfields     TYPE string,
        lv_where         TYPE string,
        lv_complete_keys TYPE abap_bool,
        lv_tabix         TYPE sy-tabix,
        lv_str           TYPE string.

  FIELD-SYMBOLS: &lt;fs_t_table&gt;    TYPE STANDARD TABLE,
                 &lt;fs_t_table_2&gt;  LIKE &lt;fs_t_table&gt;,
                 &lt;fs_s_table&gt;    TYPE any,
                 &lt;fs_dd03p&gt;      LIKE LINE OF lt_dd03p,
                 &lt;fs_e071k&gt;      LIKE LINE OF lt_e071k,
                 &lt;fs_fields&gt;     LIKE LINE OF lt_fields,
                 &lt;fs_keyfields&gt;  LIKE LINE OF lt_keyfields,
                 &lt;fs_sortfields&gt; LIKE LINE OF lt_sortfields,
                 &lt;fs_entries&gt;    LIKE LINE OF lt_entries,
                 &lt;fs_struct&gt;     TYPE any,
                 &lt;fs_mandt&gt;      TYPE mandt.

* Get object type
  lv_objtype = getobjecttype( ).

* Save the XML document object
  xmldoc = ixmldocument.

* Get root node for VDAT object
  lo_tabu_node = xmldoc-&gt;find_from_name( lv_objtype ).

* Get Table name from XML
  me-&gt;getstructurefromattributes(
          EXPORTING  node      = lo_tabu_node
          CHANGING   structure = ls_tabu ).

* Returns the name of the object
  name = ls_tabu-tabname.

* Check that table exists
  REFRESH lt_dd03p.
  CALL FUNCTION &apos;DDIF_TABL_GET&apos;
    EXPORTING
      name          = ls_tabu-tabname
      langu         = sy-langu
    TABLES
      dd03p_tab     = lt_dd03p
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc &lt;&gt; 0 OR lt_dd03p[] IS INITIAL.
    lv_str = `Table does not exist in the active state`.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_str.
  ENDIF.

* Count number of key fields
  LOOP AT lt_dd03p TRANSPORTING NO FIELDS WHERE keyflag = abap_true.
    ADD  1 TO lv_num_keyfields.
  ENDLOOP.

* Create the type object for field E071K-TABKEY
  lo_tabkeydescr = cl_abap_typedescr=&gt;describe_by_name( `E071K-TABKEY` ).

* Build a structure type containing all key fields of the View table
  DELETE lt_dd03p WHERE keyflag      = abap_false OR
                        fieldname(1) = &apos;.&apos;.
  CLEAR: lv_keyfields, lv_where.
  lv_clidep = abap_false.
  lv_complete_keys = abap_true.
  REFRESH lt_fields.
  LOOP AT lt_dd03p ASSIGNING &lt;fs_dd03p&gt;.

    AT FIRST.

* Check if the View table is a client dependent table:
*   First table field must be a key field of type CLNT
      IF &lt;fs_dd03p&gt;-datatype = &apos;CLNT&apos; AND
         lv_num_keyfields &lt;&gt; 1.
        lv_clidep = abap_true.
      ENDIF.

    ENDAT.

* Build the key fields list
    CONCATENATE lv_keyfields &lt;fs_dd03p&gt;-fieldname INTO lv_keyfields
      SEPARATED BY space.

* Build the WHERE clause used to retrieve entries from database
    CONCATENATE `&lt;FS_T_TABLE&gt;-` &lt;fs_dd03p&gt;-fieldname INTO lv_str.
    CONCATENATE lv_where `AND` &lt;fs_dd03p&gt;-fieldname `=` lv_str INTO lv_where
      SEPARATED BY space.

    CHECK lv_complete_keys = abap_true.

    lo_typedescr = cl_abap_typedescr=&gt;describe_by_name( &lt;fs_dd03p&gt;-rollname ).

* Only CHARLIKE key fields are accepted
    IF lo_typedescr-&gt;type_kind CN &apos;CNDT&apos;.
      lv_complete_keys = abap_false.
      CONTINUE.
    ENDIF.

* One more CHARLIKE key field found
    APPEND INITIAL LINE TO lt_fields ASSIGNING &lt;fs_fields&gt;.
    &lt;fs_fields&gt;-name = &lt;fs_dd03p&gt;-fieldname.
    &lt;fs_fields&gt;-type ?= lo_typedescr.

* Build the type object for key fields found so far, to help answer the following question below
    lo_structdescr = cl_abap_structdescr=&gt;create( lt_fields ).

* If I add current CHARLIKE key field to key structure,
*   will it make the CHARLIKE key structure larger than field E071K-TABKEY ?
    IF lo_structdescr-&gt;length &gt; lo_tabkeydescr-&gt;length.

* CHARLIKE key field just added will make CHARLIKE key structure not fit field E071K-TABKEY, so delete it
      lv_tabix = lines( lt_fields ).
      DELETE lt_fields INDEX lv_tabix.

* Rebuild the type object for key fields, excluding current CHARLIKE key field that did not fit
      lo_structdescr = cl_abap_structdescr=&gt;create( lt_fields ).

      lv_complete_keys = abap_false.
      CONTINUE.

    ENDIF.

  ENDLOOP.

* Error if View table has no key fields (?!?)
  IF sy-subrc &lt;&gt; 0.
    lv_str = `Table has no key fields`.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_str.
  ENDIF.

* Get rid of the &quot; &quot; at the beginning of the list of key fields of View table
  SHIFT lv_keyfields LEFT BY 1 PLACES.

* Build a list of all View table key fields
  SPLIT lv_keyfields AT space INTO TABLE lt_keyfields.

* Get rid of the &quot; AND &quot; at the beginning of the WHERE clause
  SHIFT lv_where LEFT BY 5 PLACES.

* Create a work area to store all CHARLIKE key fields of the View table that fit field E070K-TABKEY
  CREATE DATA lr_struct TYPE HANDLE lo_structdescr.
  ASSIGN lr_struct-&gt;* TO &lt;fs_struct&gt;.

* Create the View table using the CHARLIKE key. This will allow us to delete adjacent duplicates from it
*   using a dynamically COMPARING addition
  CREATE DATA lr_table TYPE STANDARD TABLE OF (ls_tabu-tabname) WITH KEY (lt_keyfields).
  ASSIGN lr_table-&gt;* TO &lt;fs_t_table&gt;.

* Create a table to contain existing data from database
  CREATE DATA lr_table_2 LIKE &lt;fs_t_table&gt;.
  ASSIGN lr_table_2-&gt;* TO &lt;fs_t_table_2&gt;.

* Create the filter to loop thru all DataRow entries in document for the View table
  lo_datarow_filter = lo_tabu_node-&gt;create_filter_name( `DataRow` ).

* Get an iterator to be used to cycle thru all occurrencies of DataRow entries
  lo_datarow_iterator = lo_tabu_node-&gt;create_iterator_filtered( lo_datarow_filter ).

* Collect all DataRow entries of current View table
  lo_datarow_node ?= lo_datarow_iterator-&gt;get_next( ).
  WHILE lo_datarow_node IS BOUND.

* Append contents of each DataRow entry to the View table
    APPEND INITIAL LINE TO &lt;fs_t_table&gt; ASSIGNING &lt;fs_s_table&gt;.

    me-&gt;getstructurefromattributes(
            EXPORTING   node      = lo_datarow_node
            CHANGING    structure = &lt;fs_s_table&gt; ).

* If it&apos;s a client dependent table, replace CLNT key field with logged on client
    IF lv_clidep = abap_true.
      ASSIGN COMPONENT 1 OF STRUCTURE &lt;fs_s_table&gt; TO &lt;fs_mandt&gt;.
      &lt;fs_mandt&gt; = sy-mandt.
    ENDIF.

* Build table key to be stored in the object keys table
    &lt;fs_struct&gt; = &lt;fs_s_table&gt;.

* Build the table key for each DataRow entry
    APPEND INITIAL LINE TO lt_e071k ASSIGNING &lt;fs_e071k&gt;.
    &lt;fs_e071k&gt;-pgmid      = &apos;R3TR&apos;.
    &lt;fs_e071k&gt;-object     = &apos;TABU&apos;.
    &lt;fs_e071k&gt;-objname    = ls_tabu-tabname.
    &lt;fs_e071k&gt;-mastertype = &apos;TABU&apos;.
    &lt;fs_e071k&gt;-mastername = ls_tabu-tabname.
    CLEAR &lt;fs_e071k&gt;-viewname.
    &lt;fs_e071k&gt;-tabkey     = &lt;fs_struct&gt;.
    &lt;fs_e071k&gt;-sortflag   = &apos;2&apos;.
    &lt;fs_e071k&gt;-activity   = ls_tabu-activity.

* Get next DataRow entry
    lo_datarow_node ?= lo_datarow_iterator-&gt;get_next( ).

  ENDWHILE.

  IF &lt;fs_t_table&gt;[] IS NOT INITIAL.

* Check if any of the entries to be inserted already exists in database
    SELECT  (lv_keyfields)
      FROM  (ls_tabu-tabname)
      INTO  TABLE &lt;fs_t_table_2&gt;
      FOR ALL ENTRIES IN &lt;fs_t_table&gt;
      WHERE (lv_where).

* At least one table entry already exists in datrabase
    IF sy-subrc = 0.

* Overwrite existing records or write only the records that does not exist in database
*   depending on the &quot;Overwrite Originals&quot; flag of SAPLINK selection screen
      IF overwrite = abap_true.
        DELETE (ls_tabu-tabname) FROM TABLE &lt;fs_t_table_2&gt;.
      ELSE.

* If no overwrite is desired, delete all existing entries from the
*   View table and also from the CHARLIKE key fields table
        LOOP AT &lt;fs_t_table_2&gt; ASSIGNING &lt;fs_s_table&gt;.

* Remove entry from View table
          DELETE TABLE &lt;fs_t_table&gt; FROM &lt;fs_s_table&gt;.

* Also remove entry from the object keys table
          &lt;fs_struct&gt; = &lt;fs_s_table&gt;.
          READ TABLE lt_e071k TRANSPORTING NO FIELDS
            WITH KEY objname    = ls_tabu-tabname
                     viewname   = space
                     mastername = ls_tabu-tabname
                     tabkey     = &lt;fs_struct&gt;.
          IF sy-subrc = 0.
            DELETE lt_e071k INDEX sy-tabix.
          ENDIF.

        ENDLOOP.

      ENDIF.

    ENDIF.

  ENDIF.

* Store all entries that will be written to database later
  IF &lt;fs_t_table&gt;[] IS NOT INITIAL.

* Get rid of duplicate keys in the View table
    REFRESH lt_sortfields.
    LOOP AT lt_keyfields ASSIGNING &lt;fs_keyfields&gt;.
      APPEND INITIAL LINE TO lt_sortfields ASSIGNING &lt;fs_sortfields&gt;.
      &lt;fs_sortfields&gt;-name = &lt;fs_keyfields&gt;.
    ENDLOOP.
    SORT &lt;fs_t_table&gt; BY (lt_sortfields).
    DELETE ADJACENT DUPLICATES FROM &lt;fs_t_table&gt;.

    APPEND INITIAL LINE TO lt_entries ASSIGNING &lt;fs_entries&gt;.
    &lt;fs_entries&gt;-tabname  = ls_tabu-tabname.
    CREATE DATA &lt;fs_entries&gt;-table LIKE &lt;fs_t_table&gt;.
    ASSIGN &lt;fs_entries&gt;-table-&gt;* TO &lt;fs_t_table_2&gt;.
    &lt;fs_t_table_2&gt;[] =  &lt;fs_t_table&gt;[].

* If not storing complete keys, append an &quot;*&quot; at the end of every key entry
    IF lv_complete_keys = abap_false.
      LOOP AT lt_e071k ASSIGNING &lt;fs_e071k&gt;
        WHERE objname    = ls_tabu-tabname AND
              viewname   = space AND
              mastername = ls_tabu-tabname.
        CONCATENATE &lt;fs_e071k&gt;-tabkey &apos;*&apos; INTO &lt;fs_e071k&gt;-tabkey.
      ENDLOOP.
    ENDIF.

* Get rid of duplicate object keys
    SORT lt_e071k BY mastername objname tabkey.
    DELETE ADJACENT DUPLICATES FROM lt_e071k COMPARING mastername objname tabkey.

* Attach inserted entries to a request
    ls_ko200-pgmid     = &apos;R3TR&apos;.
    ls_ko200-object    = lv_objtype.
    ls_ko200-obj_name  = ls_tabu-tabname.
    ls_ko200-objfunc   = &apos;K&apos;.
    ls_ko200-activity  = ls_tabu-activity.
    ls_ko200-operation = &apos;I&apos;.

    IF zsaplink_tools=&gt;add_to_request( is_ko200  = ls_ko200
                                       it_e071k  = lt_e071k ) &lt;&gt; 0.
      lv_str = `Error while attaching table entries to the request`.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = lv_str.
    ENDIF.

* Insert all selected records into database
    LOOP AT lt_entries ASSIGNING &lt;fs_entries&gt;.
      ASSIGN &lt;fs_entries&gt;-table-&gt;* TO &lt;fs_t_table_2&gt;.
      INSERT (&lt;fs_entries&gt;-tabname) FROM TABLE &lt;fs_t_table_2&gt;.
    ENDLOOP.

  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  DATA: v_msg TYPE string.

  v_msg = `Operation not implemented`.
  RAISE EXCEPTION TYPE zcx_saplink
    EXPORTING
      textid = zcx_saplink=&gt;error_message
      msg = v_msg.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


* Plugin developed by Lino Lopes (lino@hr.com.br)

  objecttype = &apos;TABU&apos;.  &quot;Selected tables contents

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_BSP" VERSION="1" LANGU="D" DESCRIPT="SAPlink - BSP plugin" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_BSP" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_BSP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BSP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BSP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BSP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_BSP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of the SAPlink-plugins.                         |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

data _bspName TYPE O2APPLNAME.

  _bspName = objName.
  call method cl_o2_api_application=&gt;check_exist
    exporting
      p_application = _bspName
    importing
      p_exists      = exists.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of the SAPlink-plugins.                         |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

data _bspName TYPE O2APPLNAME.
data bspApp type ref to CL_O2_API_APPLICATION.
data bspAttributes type O2APPLATTR.
data rc type sysubrc.
data sourceString type string.
data navGraph type o2applgrap_table.
data navLine type O2APPLGRAP.

*xml nodes
data rootNode type ref to if_ixml_element.
data navNode type ref to if_ixml_element.
data pageNode type ref to if_ixml_element.
data layoutNode type ref to if_ixml_element.
data eventNode type ref to if_ixml_element.
data parameterNode type ref to if_ixml_element.
data typeDefNode type ref to if_ixml_element.

*page data
data bspPages type O2PAGELIST.
data bspPage type O2PAGATTR.
data pageKey type O2PAGKEY.
data pageAPI type ref to CL_O2_API_PAGES.
data pageAttributes type O2PAGATTR.
data pageContent TYPE O2PAGELINE_TABLE.
data pageXML TYPE XSTRING.
data pageGUIDS TYPE BSP_GUIDS.
data eventHandlers type O2PAGEVH_TABLETYPE.
data eventHandler type O2PAGEVHS.
data eventAttributes type O2PAGEVH.
data eventContent type RSWSOURCET.
data typeDefinitionSource type RSWSOURCET.
data pageParameters TYPE O2PAGPAR_TABLETYPE.
data pageParameter type O2PAGPARS.

  _bspName = objName.

  call method CL_O2_API_APPLICATION=&gt;Load
    exporting
      P_APPLICATION_NAME = _bspName
    importing
      P_APPLICATION = bspApp
    exceptions
      OBJECT_NOT_EXISTING = 1
      PERMISSION_FAILURE  = 2
      ERROR_OCCURED       = 3.
  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 1.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_found.
      when 2.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_authorized.
      when 3.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

  call method bspApp-&gt;get_attributes
    exporting
      p_version = &apos;A&apos;
    importing
      p_attributes = bspAttributes.

* Create parent node
  data _objType type string.
*  _objType = objType.
  _objType = getObjectType( ).
  rootNode = xmlDoc-&gt;create_element( _objType ).
  setAttributesFromStructure( node = rootNode structure = bspAttributes
  ).

* navigation data
  CALL METHOD bspApp-&gt;get_navgraph
    EXPORTING
      P_VERSION      = &apos;A&apos;
    IMPORTING
      P_NAVGRAPH     = navGraph
    EXCEPTIONS
      OBJECT_INVALID = 1
      OBJECT_DELETED = 2
      ERROR_OCCURED  = 3
      others         = 4
        .

  loop at navGraph into navLine.
    navNode = xmlDoc-&gt;create_element( &apos;navgraph&apos; ).
    setAttributesFromStructure( node = navNode structure = navLine ).
*   add navigation graph entry
    rc = rootNode-&gt;append_child( navNode ).
  endloop.

*/-----------------------Create nodes for pages-----------------------\
* Get BSP pages
  call method CL_O2_API_PAGES=&gt;GET_ALL_PAGES
    exporting
      P_APPLNAME = _bspName
      P_VERSION = &apos;A&apos;
    importing
      P_PAGES = bspPages.

  loop at bspPages into bspPage.
    pageNode = xmlDoc-&gt;create_element( &apos;page&apos; ).

*   page header data
    pageKey-APPLNAME = _bspName.
    pageKey-PAGEKEY = bspPage-PAGEKEY.
    clear pageAPI.
    call method CL_O2_API_PAGES=&gt;load
          exporting
            P_PAGEKEY = pageKey
          importing
            P_PAGE = pageAPI.

*   page attributes
    CALL METHOD pageAPI-&gt;get_attrs
      IMPORTING
        P_ATTRS      = pageAttributes
      EXCEPTIONS
        PAGE_DELETED = 1
        others       = 2
        .
    setAttributesFromStructure( node = pageNode structure =
    pageAttributes ).

    if pageAttributes-pagetype = &apos;C&apos;.  &quot;controller pages
*get/set controller class here if needed (pageAttributes-implclass)
    else.                              &quot;non-controller pages
*     page layout
      call method pageAPI-&gt;GET_PAGE
        importing
          P_CONTENT = pageContent
          P_XML_SOURCE = pageXML
          P_OTR_GUIDS = pageGUIDS.

      if pageContent is not initial.
        layoutNode = xmlDoc-&gt;create_element( &apos;layout&apos; ).
        sourceString = buildSourceString( pageTable = pageContent ).
        if sourceString is not initial.
          rc = layoutNode-&gt;IF_IXML_NODE~SET_VALUE( sourceString ).
        endif.
        rc = pageNode-&gt;append_child( layoutNode ).
      endif.

*     event handlers
      call method pageAPI-&gt;GET_EVENT_HANDLERS
        importing
          P_EV_HANDLER = eventHandlers.

      loop at eventHandlers into eventHandler.
        eventNode = xmlDoc-&gt;create_element( &apos;event&apos; ).
        move-corresponding eventHandler to eventAttributes.
        setAttributesFromStructure( node = eventNode structure =
        eventAttributes ).

        sourceString = buildSourceString( sourceTable =
        eventHandler-source ).
        if sourceString is not initial.
          rc = eventNode-&gt;IF_IXML_NODE~SET_VALUE( sourceString ).
        endif.
        rc = pageNode-&gt;append_child( eventNode ).
      endloop.

*     page parameters
      refresh pageParameters.
      CALL METHOD pageAPI-&gt;get_parameters
        IMPORTING
          P_PARAMETERS = pageParameters
        EXCEPTIONS
          PAGE_DELETED = 1
          INVALID_CALL = 2
          others       = 3.

      loop at pageParameters into pageParameter.
        parameterNode = xmlDoc-&gt;create_element( &apos;parameter&apos; ).
        setAttributesFromStructure( node = parameterNode structure =
        pageParameter ).
        rc = pageNode-&gt;append_child( parameterNode ).
      endloop.

*     type definitions
      CALL METHOD pageAPI-&gt;get_type_source
        IMPORTING
          P_SOURCE     = typeDefinitionSource
        EXCEPTIONS
          PAGE_DELETED = 1
          INVALID_CALL = 2
          others       = 3
              .

      if typeDefinitionSource is not initial.
        typeDefNode = xmlDoc-&gt;create_element( &apos;typedef&apos; ).
        sourceString = buildSourceString( sourceTable =
        typeDefinitionSource ).
        if sourceString is not initial.
          rc = typeDefNode-&gt;IF_IXML_NODE~SET_VALUE( sourceString ).
        endif.
        rc = pageNode-&gt;append_child( typeDefNode ).
      endif.
    endif.                             &quot;controller/non-controller pages

*   add page node
    rc = rootNode-&gt;append_child( pageNode ).
  endloop.
*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootNode ).
  ixmlDocument = xmlDoc.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of the SAPlink-plugins.                         |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot;data _bspName TYPE O2APPLNAME.
  data bspAttributes type O2APPLATTR.
  data flag type char1.
  data transReq type trkorr.
  data nodes type o2applnode_table.
  data navGraph type o2applgrap_table.
  data navLine type O2APPLGRAP.
  data application type ref to cl_o2_api_application.
  data nameSpace type skwf_urlp.
  data folderName type string.
  data folderDesc type sdok_descr.
  data rootNode type ref to if_ixml_element.
  data pageNode type ref to if_ixml_element.
  data node type ref to if_ixml_element.
  data filter type ref to if_ixml_node_filter.
  data iterator type ref to if_ixml_node_iterator.
  data pageIterator type ref to if_ixml_node_iterator.
  data ixmlNode type ref to if_ixml_node.
  data source type string.
  data trobjName type trobj_name.
  data objectName type SEU_OBJKEY.
  data obj_name type E071-OBJ_NAME.
  data l_nodeguid type ICFNODGUID.
  data l_icfdocu  type ICF_DOCU.
  data l_icfname  type ICFNAME.
  data _devclass type devclass.
  data checkExists type flag.

  &quot; page data
  data bspPages type O2PAGELIST.
  data bspPage type O2PAGATTR.
  data pageAttributes type O2PAGATTR.
  data newPage TYPE REF TO CL_O2_API_PAGES.
  data pageContent TYPE O2PAGELINE_TABLE.
  data eventHandlers type O2PAGEVH_TABLETYPE.
  data eventHandler type O2PAGEVHS.
  data eventAttributes type O2PAGEVH.
  data pageParameters TYPE O2PAGPAR_TABLETYPE.
  data pageParameter type O2PAGPARS.
  data typeDefinitionSource type RSWSOURCET.
  data _objType type string.

  _devclass = devclass.
  _objType = getObjectType( ).

  xmlDoc = ixmlDocument.
  rootNode = xmlDoc-&gt;find_from_name( _objType ).

  call method GETSTRUCTUREFROMATTRIBUTES
        exporting
          node = rootNode
        changing
          structure = bspAttributes.

  objName = bspAttributes-applname.
  bspAttributes-devclass = _devclass.
** check bsp does not exist
*  _bspName = bspAttributes-applname.
*  call method cl_o2_api_application=&gt;check_exist
*    exporting
*      p_application = _bspName
*    importing
*      p_exists      = flag.
*  if flag is not initial and overwrite &lt;&gt; &apos;X&apos;.
*    raise exception type zcx_saplink
*      exporting textid = zcx_saplink=&gt;existing.
*  endif.
  checkExists = checkexists( ).
  if checkExists is not initial.
    if overwrite is initial.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;existing.
    else.
*     delete object for new install
      deleteobject( ).
    endif.
  endif.

* retrieve navigation modeler details
  free: filter, iterator, node.
  filter = xmlDoc-&gt;create_filter_name( &apos;navgraph&apos; ).
  iterator = xmlDoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  while node is not initial.
    clear navLine.
    call method GETSTRUCTUREFROMATTRIBUTES
          exporting
            node = node
          changing
            structure = navLine.
    append navLine to navGraph.
    node ?= iterator-&gt;get_next( ).
  endwhile.

****************Create application****************
* create bsp
  call method cl_o2_api_application=&gt;create_new
    EXPORTING
      p_application_data      = bspAttributes
      p_nodes                 = nodes
      p_navgraph              = navGraph
    IMPORTING
      p_application           = application
    EXCEPTIONS
      object_already_existing = 1
      object_just_created     = 2
      not_authorized          = 3
      undefined_name          = 4
      author_not_existing     = 5
      action_cancelled        = 6
      error_occured           = 7
      invalid_parameter       = 8.
  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 1.
        if overwrite &lt;&gt; &apos;X&apos;.
          raise exception type zcx_saplink
            exporting textid = zcx_saplink=&gt;existing.
        endif.
      when 3.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_authorized.
      when others.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

* save bsp
  call method application-&gt;save
    IMPORTING
      p_devclass            = _devclass
    CHANGING
      p_transport_request   = transReq
    EXCEPTIONS
*      object_invalid        = 1
*      object_not_changeable = 2
*      action_cancelled      = 3
      permission_failure    = 4.
*      not_changed           = 5
*      error_occured         = 6.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 4.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_authorized.
      when others.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

* put bsp in worklist
  trobjName = objName.
  call function &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = &apos;WAPD&apos;
      obj_name          = trobjName
    EXCEPTIONS
      wrong_object_name = 1.
  if sy-subrc &lt;&gt; 0.
    raise exception type zcx_saplink
      exporting textid = zcx_saplink=&gt;system_error.
  endif.

* reset
  call method application-&gt;set_changeable
    EXPORTING
      p_changeable                = &apos; &apos;
      p_complete_application      = &apos;X&apos;
    EXCEPTIONS
      action_cancelled            = 1
      object_locked_by_other_user = 2
      permission_failure          = 3
      object_already_changeable   = 4
      object_already_unlocked     = 5
      object_just_created         = 6
      object_deleted              = 7
      object_modified             = 8
      object_not_existing         = 9
      object_invalid              = 10
      error_occured               = 11.
  if sy-subrc ne 0.
    case sy-subrc.
      when 3.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_authorized.
      when others.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

* create application folder in mime repository
  nameSpace = &apos;SAP&apos;.
  folderName = bspAttributes-applext.
  folderDesc = bspAttributes-text.

  call method cl_wb_mime_repository=&gt;create_appl_folder
    EXPORTING
      folder_name          = folderName
      folder_desc          = folderDesc
      name_space           = nameSpace
    CHANGING
      dev_package          = _devclass
      corr_number          = transReq
    EXCEPTIONS
      no_folder_name       = 1
      folder_exists        = 0
      name_space_not_found = 3
      error_occured        = 4
      others               = 5.
** if this doesnt work, no biggie...it will create when BSP opened
*  if sy-subrc &lt;&gt; 0.
**raise error
*    exit.
*  endif.

****************Create pages****************
  free: filter, iterator, node.
  filter = xmlDoc-&gt;create_filter_name( &apos;page&apos; ).
  pageIterator = xmlDoc-&gt;create_iterator_filtered( filter ).
  pageNode ?= pageIterator-&gt;get_next( ).

  while pageNode is not initial.
    free newPage.
*   get page data
    clear pageAttributes.
    call method GETSTRUCTUREFROMATTRIBUTES
          exporting
            node = pageNode
          changing
            structure = pageAttributes.

*   create new page
    CALL METHOD cl_o2_api_pages=&gt;create_new_page
      EXPORTING
        p_pageattrs           = pageAttributes
      IMPORTING
        P_PAGE                = newPage.
*      EXCEPTIONS
*        OBJECT_ALREADY_EXISTS = 1
*        INVALID_NAME          = 2
*        ERROR_OCCURED         = 3
*        O2APPL_NOT_EXISTING   = 4
*        others                = 5
*            .
*    if sy-subrc &lt;&gt; 0.
**raise error
*      exit.
*    endif.

    if pageAttributes-pagetype = &apos;C&apos;.  &quot;controller pages
*get/set controller class here if needed (pageAttributes-implclass)
    else.                              &quot;non-controller pages
*     get page content
      refresh pageContent.
      free ixmlNode. clear source.
      ixmlNode = pageNode-&gt;find_from_name( &apos;layout&apos; ).
      if ixmlNode is not initial.
        source = ixmlNode-&gt;get_value( ).
        pageContent = BUILDTABLEFROMSTRING( source ).
      endif.

*     create page content
      if pageContent is not initial.
        CALL METHOD newPage-&gt;set_page
          EXPORTING
            p_content    = pageContent.
*          EXCEPTIONS
*            PAGE_DELETED = 1
*            INVALID_CALL = 2
*            others       = 3
*                .
*        if sy-subrc &lt;&gt; 0.
**    raise error
*          exit.
*        endif.
      endif.

*     get event handlers
      free: filter, iterator, node.
      filter = pageNode-&gt;create_filter_name( &apos;event&apos; ).
      iterator = pageNode-&gt;create_iterator_filtered( filter ).
      node ?= iterator-&gt;get_next( ).

      refresh eventHandlers.
      while node is not initial.
        clear eventHandler.
        call method GETSTRUCTUREFROMATTRIBUTES
              exporting
                node = node
              changing
                structure = eventAttributes.
        move-corresponding eventAttributes to eventHandler.
        source = node-&gt;get_value( ).
        if source is not initial.
          eventHandler-source = BUILDTABLEFROMSTRING( source ).
        endif.
        append eventHandler to eventHandlers.
        node ?= iterator-&gt;get_next( ).
      endwhile.

*     create event handlers
      if eventHandlers is not initial.
        CALL METHOD newPage-&gt;set_event_handlers
          EXPORTING
            p_ev_handler = eventHandlers.
*          EXCEPTIONS
*            PAGE_DELETED = 1
*            INVALID_CALL = 2
*            others       = 3
*                .
*        if sy-subrc &lt;&gt; 0.
**    raise error
*          exit.
*        endif.
      endif.

*     get page parameters
      free: filter, iterator, node.
      filter = pageNode-&gt;create_filter_name( &apos;parameter&apos; ).
      iterator = pageNode-&gt;create_iterator_filtered( filter ).
      node ?= iterator-&gt;get_next( ).

      refresh pageParameters.
      while node is not initial.
        clear pageParameter.
        call method GETSTRUCTUREFROMATTRIBUTES
              exporting
                node = node
              changing
                structure = pageParameter.

        append pageParameter to pageParameters.
        node ?= iterator-&gt;get_next( ).
      endwhile.

*     create page parameters
      if pageParameters is not initial.
        CALL METHOD newPage-&gt;set_parameters
          EXPORTING
            p_parameters      = pageParameters.
*          EXCEPTIONS
*            PAGE_DELETED      = 1
*            INVALID_PARAMETER = 2
*            INVALID_CALL      = 3
*            others            = 4
*                .
*        if sy-subrc &lt;&gt; 0.
**    raise error
*          exit.
*        endif.
      endif.

*     get type definitions
      refresh typeDefinitionSource.
      free ixmlNode. clear source.
      ixmlNode = pageNode-&gt;find_from_name( &apos;typedef&apos; ).
      if ixmlNode is not initial.
        source = ixmlNode-&gt;get_value( ).
        typeDefinitionSource = BUILDTABLEFROMSTRING( source ).
      endif.

*     create type definition source code
      if typeDefinitionSource is not initial.
        CALL METHOD newPage-&gt;set_type_source
          EXPORTING
            p_source     = typeDefinitionSource.
*          EXCEPTIONS
*            PAGE_DELETED = 1
*            INVALID_CALL = 2
*            others       = 3
*                .
*        if sy-subrc &lt;&gt; 0.
**    raise error
*          exit.
*        endif.
      endif.
    endif.                             &quot;controller/non-controller pages

*   put page in worklist
    clear: objectName, obj_name.
    objectName = cl_wb_object_type=&gt;get_concatenated_key_from_id(
           p_key_component1 = pageAttributes-applname
           p_key_component2 = pageAttributes-pagekey
           p_external_id    = &apos;WG &apos; ).

    obj_name = objectName.
    translate obj_name to upper case.

    CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
        EXPORTING
          OBJECT                  = &apos;WAPP&apos;
          OBJ_NAME                = obj_name.
*        EXCEPTIONS
*          OTHERS                  = 1.

    CALL FUNCTION &apos;RS_WORKING_AREA_INIT&apos;.

*   save page
    CALL METHOD newPage-&gt;save
      EXPORTING
*        P_SAVE_ACTIVE      = &apos;X&apos;
        P_WITH_ALL_TEXTS   = &apos;X&apos;.
*      EXCEPTIONS
*        NOT_CHANGED        = 1
*        ERROR_OCCURED      = 2
*        INVALID_PARAMETERS = 3
*        others             = 4
*            .
*    if sy-subrc &lt;&gt; 0.
**raise error
*      exit.
*    endif.

    pageNode ?= pageIterator-&gt;get_next( ).
  endwhile. &quot;pageNode

****************Create SICF node****************
  CALL FUNCTION &apos;HTTP_GET_NODEGUID&apos;
    EXPORTING
      parguid        = &apos;5MR7OICIELJY8B1AFT2X1CCKV&apos;
      &quot;GUID of node &quot;/sap/bc/bsp&quot;
      nodename       = &apos;SAP&apos;
    IMPORTING
      nodeguid       = l_nodeguid
    EXCEPTIONS
      node_not_found = 1
      OTHERS         = 2.

  l_icfname = bspAttributes-applname.
  l_icfdocu = bspAttributes-text.
  translate l_icfname to lower case.

  CALL FUNCTION &apos;HTTPTREE_INSERT_NODE&apos;
    EXPORTING
      p_icf_name                      = l_icfname
      p_icfparguid                    = l_nodeguid
      p_icfdocu                       = l_icfdocu
      p_doculang                      = sy-langu
      p_icfactive                     = &apos;X&apos;         &quot;activate service
      p_package                       = devclass
   EXCEPTIONS
      NO_NEW_VIRTUAL_HOST             = 1
      SPECIAL_SERVICE_ERROR           = 2
      PARENT_NOT_EXISTING             = 3
      ENQUEUE_ERROR                   = 4
      NODE_ALREADY_EXISTING           = 5
      EMPTY_DOCU                      = 6
      DOCULANG_NOT_INSTALLED          = 7
      SECURITY_INFO_ERROR             = 8
      USER_PASSWORD_ERROR             = 9
      PASSWORD_ENCRYPTION_ERROR       = 10
      INVALID_URL                     = 11
      INVALID_OTR_CONCEPT             = 12
      FORMFLG401_ERROR                = 13
      HANDLER_ERROR                   = 14
      TRANSPORT_ERROR                 = 15
      TADIR_ERROR                     = 16
      PACKAGE_NOT_FOUND               = 17
      OTHERS                          = 18
            .

* i guess if we made it this far, we will assume success
* successful install
  name = objName.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of the SAPlink-plugins.                         |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

data bspName type o2applname.
data bspAttributes type O2APPLATTR.
data bspExt type o2applext.
data bspApp type ref to cl_o2_api_application.
data nameSpace type skwf_urlp.
data folderName type string.
data objectName type SEU_OBJKEY.
data obj_name type E071-OBJ_NAME.
data l_nodeguid type ICFNODGUID.
data l_icfname  type ICFNAME.

data bspPages type o2pagename_table.
data bspPage type o2pagename.
data pagekey type o2pagkey.

  bspName = objName.

* save external name for later
  call method cl_o2_api_application=&gt;get_application_external_name
    EXPORTING
      p_application_key   = bspName
      p_version           = &apos;A&apos;
    IMPORTING
      p_application_name  = bspExt
    EXCEPTIONS
      object_not_existing = 1.
  if sy-subrc &lt;&gt; 0.
    bspExt = bspName.
  endif.

* load bsp
  call method cl_o2_api_application=&gt;load
    EXPORTING
      p_application_name  = bspName
    IMPORTING
      p_application       = bspApp
    EXCEPTIONS
      object_not_existing = 1
      permission_failure  = 2
      error_occured       = 3.
  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 3.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_authorized.
      when 9.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_found.
      when others.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

* set bsp changeable
  call method bspApp-&gt;set_changeable
    EXPORTING
      p_changeable                = &apos;X&apos;
      p_complete_application      = &apos;X&apos;
    EXCEPTIONS
      action_cancelled            = 1
      object_locked_by_other_user = 2
      permission_failure          = 3
      object_already_changeable   = 0
      object_already_unlocked     = 5
      object_just_created         = 6
      object_deleted              = 7
      object_modified             = 8
      object_not_existing         = 9
      object_invalid              = 10
      error_occured               = 11.
  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 2.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;locked.
      when 3.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_authorized.
      when 9.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_found.
      when others.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

* delete BSP pages
  call method cl_o2_api_application=&gt;get_all_pages_static
    EXPORTING
      p_application_key = bspName
    IMPORTING
      p_pages           = bspPages
    EXCEPTIONS
      object_not_found  = 1.

  loop at bspPages into bspPage.
    pageKey-applname = bspPage-applname.
    pageKey-pagekey  = bspPage-pagekey.
    call method cl_o2_page=&gt;delete_page_for_application
      EXPORTING
        p_pagekey           = pageKey
      EXCEPTIONS
        object_not_existing = 1
        error_occured       = 2.
  endloop.

* delete bsp
  call method bspApp-&gt;delete
    EXCEPTIONS
      object_not_empty      = 1
      object_not_changeable = 2
      object_invalid        = 3
      action_cancelled      = 4
      permission_failure    = 5
      error_occured         = 6.
   if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 5.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_authorized.
      when others.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

* reset lock
  objectName = bspName.
  call method cl_o2_api_application=&gt;call_access_permission
    EXPORTING
      p_mode                 = &apos;FREE&apos;
      p_object               = objectName
      p_complete_application = &apos;X&apos;
    EXCEPTIONS
      action_canceled        = 1
      enqueued_by_user       = 2
      locked_by_author       = 3
      permission_failure     = 4
      error_occured          = 5.

* remove from working area
  obj_name = objectName.
  call function &apos;RS_DELETE_FROM_WORKING_AREA&apos;
    EXPORTING
      object    = &apos;WAPD&apos;
      obj_name  = obj_name
      immediate = &apos;X&apos;.

* delete folder in mime repository
  nameSpace = &apos;SAP&apos;.
  folderName = bspExt.

  call method cl_wb_mime_repository=&gt;delete_appl_folder
    EXPORTING
      folder_name          = folderName
      name_space           = nameSpace
    EXCEPTIONS
      no_folder_name       = 1
      folder_not_found     = 2
      name_space_not_found = 3
      error_occured        = 4
      others               = 5.

****************Delete SICF node****************
  CALL FUNCTION &apos;HTTP_GET_NODEGUID&apos;
    EXPORTING
      parguid        = &apos;5MR7OICIELJY8B1AFT2X1CCKV&apos;
      &quot;GUID of node &quot;/sap/bc/bsp&quot;
      nodename       = &apos;SAP&apos;
    IMPORTING
      nodeguid       = l_nodeguid
    EXCEPTIONS
      node_not_found = 1
      OTHERS         = 2.

  l_icfname = bspName.
  translate l_icfname to lower case.

  call function &apos;HTTPTREE_DELETE_NODE&apos;
    exporting
      p_icf_name                        = l_icfname
      p_icfparguid                      = l_nodeguid
    exceptions
      no_virtual_host_delete            = 1
      special_service_error             = 2
      enqueue_error                     = 3
      node_not_existing                 = 4
      node_has_childs                   = 5
      node_is_aliased                   = 6
      node_not_in_original_system       = 7
      transport_error                   = 8
      tadir_error                       = 9
      db_error                          = 10
      others                            = 11.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of the SAPlink-plugins.                         |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  objecttype = &apos;WAPA&apos;. &quot;BSP Application

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_WTAG" VERSION="1" LANGU="D" DESCRIPT="SAPlink - BSP plugin" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_WTAG" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_WTAG" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WTAG" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WTAG" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WTAG" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_WTAG" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" VERSION="1" LANGU="D" DESCRIPT="Call RS_ACCESS_PERMISSION" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_OBJECT_KEY" VERSION="1" LANGU="D" DESCRIPT="Object Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_MODE" VERSION="1" LANGU="D" DESCRIPT="Operation &apos;FREE&apos; | &apos;INSERT&apos;" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PARVALUE="&apos;INSERT&apos;" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_NO_DIALOG" VERSION="1" LANGU="D" DESCRIPT="Single-Character Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CHAR1" PARVALUE="&apos;X&apos;" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_OBJECTTYPE" VERSION="1" LANGU="D" DESCRIPT="Object Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TROBJTYPE"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_DEVCLASS" VERSION="1" LANGU="D" DESCRIPT="Package" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_TRANSPORT_KEY" VERSION="1" LANGU="D" DESCRIPT="Complete Key of a Transport Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="8 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TRKEY"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_CORR_NUM" VERSION="1" LANGU="D" DESCRIPT="Request/Task" CMPTYPE="1" MTDTYPE="0" EDITORDER="9 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TRKORR"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_MASTER_LANG" VERSION="1" LANGU="D" DESCRIPT="SAP R/3 System, Current Language" CMPTYPE="1" MTDTYPE="0" EDITORDER="10 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="SYLANGU"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_MODIFY_LANG" VERSION="1" LANGU="D" DESCRIPT="SAP R/3 System, Current Language" CMPTYPE="1" MTDTYPE="0" EDITORDER="11 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="SY-LANGU"/>
   <exception CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD ACCESS_PERMISSION .

*  DATA:
*    l_uname TYPE syuname,
*    l_uname2 TYPE syuname,
*    l_tlibid TYPE o2tlibid.

* check object name
  CALL FUNCTION &apos;RS_ACCESS_PERMISSION&apos;
    EXPORTING
      authority_check          = &apos;X&apos;
      global_lock              = &apos;X&apos;
      mode                     = p_mode
      object                   = p_object_key
      object_class             = p_objecttype
      suppress_language_check  = p_no_dialog
      suppress_language_dialog = p_no_dialog
    IMPORTING
      devclass                 = p_devclass
      new_master_language      = p_master_lang
      korrnum                  = p_corr_num
      transport_key            = p_transport_key
      modification_language    = p_modify_lang
    EXCEPTIONS
      canceled_in_corr         = 1
      enqueued_by_user         = 2
      enqueue_system_failure   = 3
      illegal_parameter_values = 4
      locked_by_author         = 5
      no_modify_permission     = 6
      no_show_permission       = 7
      permission_failure       = 8
      request_language_denied  = 9
      OTHERS                   = 10.

  case sy-subrc.
    when 0.
    when 2 or 5.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;locked.
    when 6 or 7 or 8 or 9.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;not_authorized.
    when others.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;system_error.
  endcase.
ENDMETHOD.                    &quot;access_permission</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Phil Young
*      ptyoun01@gmail.com

method CHECKEXISTS .

  data P_TLIBID TYPE O2TLIBID.

  P_TLIBID = objName.
  exists = cl_o2_taglib_manager=&gt;exists_on_db( p_tlibid ).

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WTAG" CMPNAME="CORR_INSERT" VERSION="1" LANGU="D" DESCRIPT="Insert Correction" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="CORR_INSERT" SCONAME="P_AUTHOR" VERSION="1" LANGU="D" DESCRIPT="SAP System, User Logon Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYUNAME"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="CORR_INSERT" SCONAME="P_DEVCLASS" VERSION="1" LANGU="D" DESCRIPT="Package" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS"/>
   <exception CLSNAME="ZSAPLINK_WTAG" CMPNAME="CORR_INSERT" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method CORR_INSERT .

data myTROBJTYPE type TROBJTYPE.

myTROBJTYPE = getobjecttype( ).


  CALL FUNCTION &apos;RS_CORR_INSERT&apos;
       EXPORTING
            AUTHOR              = p_author
            GLOBAL_LOCK         = &apos;X&apos;
            OBJECT              = objName
            OBJECT_CLASS        = myTROBJTYPE
            DEVCLASS            = p_devClass
*            KORRNUM             = CORRNUMBER_LOCAL
            MASTER_LANGUAGE     = sy-langu
*            PROGRAM             = PROGRAM_LOCAL
            MODE                = &apos;INSERT&apos;
*       IMPORTING
*            AUTHOR              = UNAME
*            KORRNUM             = CORRNUMBER_LOCAL
*            DEVCLASS            = DEVCLASS_LOCAL
       EXCEPTIONS
            CANCELLED           = 1
            PERMISSION_FAILURE  = 2
            UNKNOWN_OBJECTCLASS = 3.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 2.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;not_authorized.
      when others.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Phil Young
*      ptyoun01@gmail.com

method CREATEIXMLDOCFROMOBJECT .

data rc type sysubrc.

data: my_wtag type ref to CL_O2_TAG_LIBRARY,
      l_tlibid TYPE o2tlibid.

data P_TLIB_EDIT TYPE O2TLIBEDIT.

*xml nodes
data rootNode type ref to if_ixml_element.

l_tlibid = objName.

CALL METHOD CL_O2_TAG_LIBRARY=&gt;GET_INSTANCE
  EXPORTING
    P_TLIBID      = l_tlibid
    P_STATE       = &apos;A&apos;
  RECEIVING
    P_TLIB_REF    = my_wtag
    .

CALL METHOD MY_WTAG-&gt;GET_TAGLIB
  RECEIVING
    P_TLIB_EDIT = P_TLIB_EDIT
    .

* Create parent node
  data _objType type string.
  _objType = getObjectType( ).
  rootNode = xmlDoc-&gt;create_element( _objType ).
  WTAG_SETATTRIBUTESFROMSTR( node = rootNode structure = P_TLIB_EDIT
  ).


*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootNode ).
  ixmlDocument = xmlDoc.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Phil Young
*      ptyoun01@gmail.com

method CREATEOBJECTFROMIXMLDOC .

  types:
    TT_TLINE type standard table of TLINE .
  types:
    t_t_tag TYPE HASHED TABLE OF o2tag
      WITH UNIQUE KEY tlibid tagid .
  types:
    t_t_tagt TYPE HASHED TABLE OF tagt
      WITH UNIQUE KEY tlibid tagid .
  types:
    t_t_tagatt TYPE HASHED TABLE OF o2tagatt
      WITH UNIQUE KEY tlibid tagid attid .
  types:
    t_t_tagattt TYPE HASHED TABLE OF tagattt
      WITH UNIQUE KEY tlibid tagid attid .
  types:
    t_t_tline TYPE STANDARD TABLE OF tline
      WITH DEFAULT KEY .

data rootNode type ref to if_ixml_element.
data _devclass type devclass.
data _objType type string.
data P_TLIB_EDIT TYPE O2TLIBEDIT.
data checkExists type flag.
data l_cx_ref TYPE REF TO zcx_saplink.

  _devclass = devclass.
  _objType = getObjectType( ).

  xmlDoc = ixmlDocument.
  rootNode = xmlDoc-&gt;find_from_name( _objType ).

*  call method GETSTRUCTUREFROMATTRIBUTES
  call method WTAG_GETSTRUCTUREFROMATTR
        exporting
          node = rootNode
        changing
          structure = P_TLIB_EDIT.

  objName = P_TLIB_EDIT-TLIBID.
  checkExists = checkexists( ).
  if checkExists is not initial.
    if overwrite is initial.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;existing.
    else.
*     delete object for new install
      TRY.
        deleteobject( ).

        CATCH ZCX_SAPLINK into l_cx_ref.
          raise exception l_cx_ref.
      ENDTRY.
    endif.
  endif.

*TYPES:
*
*    t_t_tag TYPE HASHED TABLE OF o2tag
*      WITH UNIQUE KEY tlibid tagid,
*
*    t_t_tagt TYPE HASHED TABLE OF tagt
*      WITH UNIQUE KEY tlibid tagid,
*
*    t_t_tagatt TYPE HASHED TABLE OF o2tagatt
*      WITH UNIQUE KEY tlibid tagid attid,
*
*    t_t_tagattt TYPE HASHED TABLE OF tagattt
*      WITH UNIQUE KEY tlibid tagid attid,
*
*    t_t_tline TYPE STANDARD TABLE OF tline
*      WITH DEFAULT KEY.
*
*TYPES: BEGIN OF t_s_docu,
*        tlibid TYPE o2tlibid,
*        tagid TYPE o2tagid,
*        dokhl TYPE dokhl,
*        dokil TYPE dokil,
*        docu TYPE t_t_tline,
*      END OF t_s_docu,
*
*      t_t_docu TYPE HASHED TABLE OF t_s_docu
*        WITH UNIQUE KEY tlibid tagid.

data wa_o2taglib type o2taglib.
data wa_taglibt type taglibt.
data it_tag type t_t_tag.
data wa_tag like line of it_tag.
data it_tagt type t_t_tagt.
data wa_tagt like line of it_tagt.
data it_tagatt type t_t_tagatt.
data wa_tagatt like line of it_tagatt.
data it_tagattt type t_t_tagattt.
data wa_tagattt like line of it_tagattt.

data wa_tags type O2TAGEDIT.
data wa_attributes type O2ATTEDIT.

data state type r3state value &apos;I&apos;.

* build tables / structures

*extension
move-corresponding P_TLIB_EDIT to wa_o2taglib.
wa_o2taglib-state = state.
wa_o2taglib-author = sy-uname.
wa_o2taglib-createdon = sy-datum.
wa_o2taglib-changedby = sy-uname.
wa_o2taglib-changedon = sy-datum.
wa_o2taglib-stamp = sy-uzeit.

move-corresponding P_TLIB_EDIT to wa_taglibt.
wa_taglibt-state = state.
wa_taglibt-langu = sy-langu.

* elements
loop at P_TLIB_EDIT-TAGS into wa_tags.
  wa_tag-tlibid = P_TLIB_EDIT-TLIBID.
  move-corresponding wa_tags to wa_tag.
  wa_tag-state = state.
  wa_tag-author = sy-uname.
  wa_tag-createdon = sy-datum.
  wa_tag-changedby = sy-uname.
  wa_tag-changedon = sy-datum.
  insert wa_tag into table it_tag.

  move-corresponding wa_tag to wa_tagt.
  wa_tagt-langu = sy-langu.
  wa_tagt-descript = wa_tags-descript.
  insert wa_tagt into table it_tagt.

* attributes
  loop at wa_tags-attributes into wa_attributes.
    move-corresponding wa_attributes to wa_tagatt.
    wa_tagatt-tlibid = P_TLIB_EDIT-TLIBID.
    wa_tagatt-state = state.
    wa_tagatt-tagid = wa_tags-tagid.
    insert wa_tagatt into table it_tagatt.

    move-corresponding wa_tagatt to wa_tagattt.
    wa_tagattt-descript = wa_attributes-descript.
    wa_tagattt-langu = sy-langu.
    insert wa_tagattt into table it_tagattt.

    clear wa_tagattt.
    clear wa_tagatt.
  endloop.

  clear wa_tag.
  clear wa_tagt.
endloop.

* put bsp extension in worklist
data TROBJTYPE type TROBJTYPE.
data trobjName type trobj_name.

TROBJTYPE = GETOBJECTTYPE( ).
trobjName = objName.

TRY.
  CALL METHOD CORR_INSERT
    EXPORTING
      P_AUTHOR    = sy-uname
      P_DEVCLASS  = devclass
      .
  CATCH ZCX_SAPLINK into l_cx_ref.
    raise exception l_cx_ref.
ENDTRY.

TRY.
  CALL METHOD ZSAPLINK_WTAG=&gt;ACCESS_PERMISSION
    EXPORTING
      P_OBJECT_KEY    = trobjName
      P_MODE          = &apos;INSERT&apos;
      P_NO_DIALOG     = &apos;X&apos;
      P_OBJECTTYPE    = TROBJTYPE
*    IMPORTING
*      P_DEVCLASS      =
*      P_TRANSPORT_KEY =
*      P_CORR_NUM      =
*      P_MASTER_LANG   =
*      P_MODIFY_LANG   =
      .
  CATCH ZCX_SAPLINK into l_cx_ref.
    raise exception l_cx_ref.
ENDTRY.



  call function &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = TROBJTYPE
      obj_name          = trobjName
    EXCEPTIONS
      wrong_object_name = 1.
  if sy-subrc &lt;&gt; 0.
    raise exception type zcx_saplink
      exporting textid = zcx_saplink=&gt;system_error.
  endif.


* update database tables

* extension
  INSERT INTO o2taglib VALUES wa_o2taglib.
  IF wa_taglibt IS NOT INITIAL.
    INSERT INTO taglibt VALUES wa_taglibt.
  ENDIF.
  IF sy-subrc &lt;&gt; 0.
    raise exception type zcx_saplink
      exporting textid = zcx_saplink=&gt;system_error.
  ENDIF.

* elements
  INSERT o2tag FROM TABLE it_tag.
  IF it_tagt[] IS NOT INITIAL.
    INSERT tagt FROM TABLE it_tagt.
  ENDIF.
  IF sy-subrc &lt;&gt; 0.
    raise exception type zcx_saplink
      exporting textid = zcx_saplink=&gt;system_error.
  ENDIF.

* element attributes
  IF it_tagatt[] IS NOT INITIAL.
    INSERT o2tagatt FROM TABLE it_tagatt.
  ENDIF.
  IF it_tagattt[] IS NOT INITIAL.
    INSERT tagattt FROM TABLE it_tagattt.
  ENDIF.
  IF sy-subrc &lt;&gt; 0.
    raise exception type zcx_saplink
      exporting textid = zcx_saplink=&gt;system_error.
  ENDIF.

  CALL METHOD ZSAPLINK_WTAG=&gt;UPDATE_OBJECT_LISTS
    EXPORTING
      P_TLIBID    = P_TLIB_EDIT-TLIBID
      P_OPERATION = &apos;INSERT&apos;
      .

  TRY.
    CALL METHOD ZSAPLINK_WTAG=&gt;ACCESS_PERMISSION
      EXPORTING
        P_OBJECT_KEY    = trobjName
        P_MODE          = &apos;FREE&apos;
        P_NO_DIALOG     = &apos;X&apos;
        P_OBJECTTYPE    = TROBJTYPE
*      IMPORTING
*        P_DEVCLASS      =
*        P_TRANSPORT_KEY =
*        P_CORR_NUM      =
*        P_MASTER_LANG   =
*        P_MODIFY_LANG   =
        .
    CATCH ZCX_SAPLINK into l_cx_ref.
      raise exception l_cx_ref.
  ENDTRY.

  name = objName.

*CL_O2_TAGLIB_MANAGER-IMPORT_EXTENSION
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Phil Young
*      ptyoun01@gmail.com

method DELETEOBJECT .
data myTLIBID type O2TLIBID.
data l_cx_ref TYPE REF TO zcx_saplink.
data TROBJTYPE type TROBJTYPE.
data trobjName type trobj_name.

TROBJTYPE = GETOBJECTTYPE( ).
trobjName = objName.

myTLIBID = objName.

TRY.
  CALL METHOD ZSAPLINK_WTAG=&gt;ACCESS_PERMISSION
    EXPORTING
      P_OBJECT_KEY    = trobjName
      P_MODE          = &apos;MODIFY&apos;
      P_NO_DIALOG     = &apos;X&apos;
      P_OBJECTTYPE    = TROBJTYPE
*    IMPORTING
*      P_DEVCLASS      =
*      P_TRANSPORT_KEY =
*      P_CORR_NUM      =
*      P_MASTER_LANG   =
*      P_MODIFY_LANG   =
      .
  CATCH ZCX_SAPLINK into l_cx_ref.
    raise exception l_cx_ref.
ENDTRY.

* update database tables

* extension
delete from o2taglib where TLIBID = myTLIBID.
delete from taglibt where TLIBID = myTLIBID.

* elements
delete from o2tag where TLIBID = myTLIBID.
delete from tagt where TLIBID = myTLIBID.

* element attributes
delete from o2tagatt where TLIBID = myTLIBID.
delete from tagattt where TLIBID = myTLIBID.

TRY.
  CALL METHOD ZSAPLINK_WTAG=&gt;ACCESS_PERMISSION
    EXPORTING
      P_OBJECT_KEY    = trobjName
      P_MODE          = &apos;FREE&apos;
      P_NO_DIALOG     = &apos;X&apos;
      P_OBJECTTYPE    = TROBJTYPE
*    IMPORTING
*      P_DEVCLASS      =
*      P_TRANSPORT_KEY =
*      P_CORR_NUM      =
*      P_MASTER_LANG   =
*      P_MODIFY_LANG   =
      .
  CATCH ZCX_SAPLINK into l_cx_ref.
    raise exception l_cx_ref.
ENDTRY.

* remove entry from working area
  delete_from_working_area( p_tlibid = myTLIBID
                            p_global = &apos;X&apos;
                            p_objecttype = TROBJTYPE ).

* this call also deletes $TMP TADIR entries
  update_object_lists( p_tlibid    = myTLIBID
                       p_operation = &apos;DELETE&apos; ).

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WTAG" CMPNAME="DELETE_FROM_WORKING_AREA" VERSION="1" LANGU="D" DESCRIPT="Delete BSP Extension from Worklist" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="DELETE_FROM_WORKING_AREA" SCONAME="P_TLIBID" VERSION="1" LANGU="D" DESCRIPT="Tag Library: ID" CMPTYPE="1" MTDTYPE="0" EDITORDER="12 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="O2TLIBID"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="DELETE_FROM_WORKING_AREA" SCONAME="P_GLOBAL" VERSION="1" LANGU="D" DESCRIPT="&apos;X&apos;: ACTUALIZE_WORKING_AREA=&apos;X&apos;" CMPTYPE="1" MTDTYPE="0" EDITORDER="13 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="XFELD"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="DELETE_FROM_WORKING_AREA" SCONAME="P_OBJECTTYPE" VERSION="1" LANGU="D" DESCRIPT="Object Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="14 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TROBJTYPE"/>
   <source>METHOD DELETE_FROM_WORKING_AREA .

  DATA:
    l_obj_name TYPE trobj_name.

  CALL FUNCTION &apos;RS_WORKING_AREA_INIT&apos;.

  l_obj_name = p_tlibid.

  CALL FUNCTION &apos;RS_DELETE_FROM_WORKING_AREA&apos;
    EXPORTING
      object                 = p_objecttype
      obj_name               = l_obj_name
      immediate              = &apos;X&apos;
      actualize_working_area = p_global.

ENDMETHOD.                    &quot;delete_from_working_area</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE .

  objecttype = &apos;WTAG&apos;. &quot;BSP Extension

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WTAG" CMPNAME="UPDATE_OBJECT_LISTS" VERSION="1" LANGU="D" DESCRIPT="Updating Object Lists" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="UPDATE_OBJECT_LISTS" SCONAME="P_TLIBID" VERSION="1" LANGU="D" DESCRIPT="BSP Extension: ID" CMPTYPE="1" MTDTYPE="0" EDITORDER="15 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="O2TLIBID"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="UPDATE_OBJECT_LISTS" SCONAME="P_OPERATION" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="16 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="C"/>
   <source>METHOD UPDATE_OBJECT_LISTS .

  DATA:
    l_tree_log TYPE REF TO cl_wb_tree_log,
    l_treelog_entry TYPE treelog,
    l_treelog_tab TYPE treelog_tab.

  CALL FUNCTION &apos;RS_TREE_OBJECT_PLACEMENT&apos;
    EXPORTING
      object    = p_tlibid
      type      = swbm_c_type_o2_taglibrary
      operation = p_operation.

  CREATE OBJECT l_tree_log.

  CONCATENATE &apos;TL_&apos; p_tlibid INTO l_treelog_entry-tname.
  l_treelog_entry-type = swbm_c_type_o2_taglibrary.
  l_treelog_entry-name = p_tlibid.
  APPEND l_treelog_entry TO l_treelog_tab.

  CALL METHOD l_tree_log-&gt;raise_entry_changed
    EXPORTING
      p_treelog = l_treelog_tab.

ENDMETHOD.                    &quot;update_object_lists</source>
  </method>
  <method CLSNAME="ZSAPLINK_WTAG" CMPNAME="WTAG_GETSTRUCTUREFROMATTR" VERSION="1" LANGU="D" DESCRIPT="Updates a structure with node attributes" EXPOSURE="1" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="WTAG_GETSTRUCTUREFROMATTR" SCONAME="NODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="WTAG_GETSTRUCTUREFROMATTR" SCONAME="STRUCTURE" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method WTAG_GETSTRUCTUREFROMATTR .
data attributeList type ref to IF_IXML_NAMED_NODE_MAP.
data nodeIterator type ref to IF_IXML_NODE_ITERATOR.
data attributeNode type ref to if_ixml_node.
data value type string.
data name type string.
field-symbols &lt;value&gt; type any.
************************************************************************
data tableDescr type ref to cl_abap_tabledescr.
data structDescr type ref to cl_abap_structdescr.
data typeDescr type ref to cl_abap_typedescr.
data childNode type ref to if_ixml_element.
data filter type ref to if_ixml_node_filter.
data iterator type ref to if_ixml_node_iterator.
data childName type string.
data it_foo type ref to data.
data wa_foo type ref to data.
field-symbols: &lt;tab&gt; type any table.
field-symbols: &lt;row&gt; type any.

************************************************************************

  clear structure.
  attributeList = node-&gt;GET_ATTRIBUTES( ).
  nodeIterator = attributeList-&gt;create_iterator( ).
  attributeNode = nodeIterator-&gt;get_next( ).
  while attributeNode is not initial.
    name = attributeNode-&gt;get_name( ).
    if name = &apos;VERSION&apos;.
      value = &apos;0&apos;.
    else.
      value = attributeNode-&gt;get_value( ).
    endif.
    assign component name of structure structure to &lt;value&gt;.
    if sy-subrc = 0.
************************************************************************
      typeDescr = cl_abap_typedescr=&gt;DESCRIBE_BY_DATA(
        p_data = &lt;value&gt; ).
      try.
        tableDescr ?= typeDescr.
        catch CX_SY_MOVE_CAST_ERROR.
      endtry.
      try.
        structDescr ?= typeDescr.
        catch CX_SY_MOVE_CAST_ERROR.
      endtry.
      if tableDescr is initial and structDescr is initial.
        &lt;value&gt; = value.
      elseif tableDescr is initial.
        childNode ?= Node-&gt;get_first_child( ).
        while childNode is not initial.
          childName = childNode-&gt;GET_NAME( ).
          if childName = name.
            call method WTAG_GETSTRUCTUREFROMATTR
                  exporting
                    node = childNode
                  changing
                    structure = &lt;value&gt;.
            exit.
          endif.
          childNode ?= childNode-&gt;get_next( ).
        endwhile.
      else.
        create data it_foo type handle tableDescr.
        assign it_foo-&gt;* to &lt;tab&gt;.
        create data wa_foo like line of &lt;tab&gt;.
        assign wa_foo-&gt;* to &lt;row&gt;.

        free childNode.
        childNode ?= Node-&gt;get_first_child( ).
        while childNode is not initial.
          childName = childNode-&gt;GET_NAME( ).
          if childName = name.
            clear &lt;row&gt;.
            call method WTAG_GETSTRUCTUREFROMATTR
                  exporting
                    node = childNode
                  changing
                    structure = &lt;row&gt;.
            insert &lt;row&gt; into table &lt;tab&gt;.
          endif.
          childNode ?= childNode-&gt;get_next( ).
        endwhile.
        &lt;value&gt; = &lt;tab&gt;.
      endif.

      clear tableDescr.
      clear structDescr.
      clear typedescr.
      clear it_foo.
      clear wa_foo.
************************************************************************
    endif.
    attributeNode = nodeIterator-&gt;get_next( ).
  endwhile.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WTAG" CMPNAME="WTAG_SETATTRIBUTESFROMSTR" VERSION="1" LANGU="D" DESCRIPT="Creates an XML Attribute list from any structure" EXPOSURE="1" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="WTAG_SETATTRIBUTESFROMSTR" SCONAME="NODE" VERSION="1" LANGU="D" DESCRIPT="xml Element" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="WTAG_SETATTRIBUTESFROMSTR" SCONAME="STRUCTURE" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method WTAG_SETATTRIBUTESFROMSTR .

data int type i.
int = int.
data structDescr type ref to cl_abap_structDescr.
data aComponent type abap_compdescr.
field-symbols &lt;fieldValue&gt; type any.
data rc type sysubrc.
data sName type string.
data sValue type string.
****************************************************************
data tableDescr type ref to cl_abap_tabledescr.
data structDescr2 type ref to cl_abap_structdescr.
data typeDescr type ref to cl_abap_typedescr.
data childNode type ref to if_ixml_element.
data childName type string.
data it_foo type ref to data.
field-symbols: &lt;tab&gt; type any table.
field-symbols: &lt;row&gt; type any.
****************************************************************

  structDescr ?= cl_abap_structDescr=&gt;describe_by_data( structure ).
  loop at structDescr-&gt;components into aComponent.
    assign component aComponent-name of structure
      structure to &lt;fieldValue&gt;.
    if sy-subrc = 0.
      sName = aComponent-name.
*      sValue = &lt;fieldValue&gt;.
*     for certain attributes, set to a standard for exporting
      case sName.
        when &apos;VERSION&apos;. &quot;version should always export as inactive
          sValue = &apos;0&apos;.
        when &apos;DEVCLASS&apos;. &quot;development class should always be $TMP
          sValue = &apos;$TMP&apos;.
        when others.
**********************************************************
  typeDescr = cl_abap_typedescr=&gt;DESCRIBE_BY_DATA(
    p_data = &lt;fieldValue&gt; ).
  try.
    tableDescr ?= typeDescr.
    catch CX_SY_MOVE_CAST_ERROR.
  endtry.
  try.
    structDescr2 ?= typeDescr.
    catch CX_SY_MOVE_CAST_ERROR.
  endtry.
  if tableDescr is initial and structDescr2 is initial.
    sValue = &lt;fieldValue&gt;.
  elseif tableDescr is initial.
    sValue = &apos;$$STRUCTURE$$&apos;.
    childName = aComponent-name.
    childNode = xmlDoc-&gt;create_element( childName ).
    WTAG_SETATTRIBUTESFROMSTR( node = childNode
                                structure = &lt;fieldValue&gt; ).
    rc = Node-&gt;append_child( childNode ).

  else.
    sValue = &apos;$$TABLE$$&apos;.
    create data it_foo type handle tableDescr.
*    get reference of &lt;fieldvalue&gt; into it_foo.
    assign it_foo-&gt;* to &lt;tab&gt;.
    &lt;tab&gt; = &lt;fieldValue&gt;.
    loop at &lt;tab&gt; assigning &lt;row&gt;.
      childName = aComponent-name.
      childNode = xmlDoc-&gt;create_element( childName ).
      WTAG_SETATTRIBUTESFROMSTR( node = childNode
                                  structure = &lt;row&gt; ).
      rc = Node-&gt;append_child( childNode ).
    endloop.
  endif.
  clear it_foo.
  clear tableDescr.
  clear structDescr2.
  clear typedescr.

*          sValue = &lt;fieldValue&gt;.
**********************************************************

      endcase.
      if sValue is not initial.
        rc = Node-&gt;set_attribute( name = sName value = sValue ).
      endif.
    else.
* WHAT?&gt;!??
    endif.
  endloop.
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_DOCUMENTATION" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Documentation" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_DOCUMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_DOCUMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DOCUMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DOCUMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DOCUMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_DOCUMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD checkexists.

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com
  DATA xdokhl TYPE dokhl.
  DATA xdoc_object(62) TYPE c.
  DATA xdocu_id TYPE dokhl-id.
  DATA xdocu_obj TYPE dokhl-object.

  xdoc_object = objname.
  xdocu_id  = xdoc_object(2).
  xdocu_obj = xdoc_object+2(60).

  CLEAR xdokhl.
  SELECT SINGLE * INTO xdokhl FROM dokhl
             WHERE id = xdocu_id
               AND object = xdocu_obj.
  IF sy-subrc =  0.
    exists = &apos;X&apos;.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createixmldocfromobject.

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

  DATA root_node     TYPE REF TO if_ixml_element.
  DATA txtlines_node TYPE REF TO if_ixml_element.
  DATA rc            TYPE sysubrc.
  DATA _objtype      TYPE string.

  DATA: BEGIN OF xdokhl,
        objname(62) TYPE c,
        id          TYPE dokhl-id,
        object      TYPE dokhl-object,
        typ         TYPE dokhl-typ,
        dokversion  TYPE dokhl-dokversion,
        END OF xdokhl.

  DATA ilines TYPE TABLE OF tline.
  DATA xlines LIKE LINE OF ilines.

  DATA _docuname TYPE e071-obj_name.
  DATA xdocu_id  TYPE dokhl-id.
  DATA xdocu_obj TYPE dokhl-object.

  _docuname = objname.

* Separate id and object from combined object name
  xdocu_id  = _docuname(2).
  xdocu_obj = _docuname+2(60).

* Check against database
  CLEAR xdokhl.
  SELECT SINGLE id object typ dokversion
        INTO (xdokhl-id, xdokhl-object, xdokhl-typ, xdokhl-dokversion)
           FROM dokhl
             WHERE id = xdocu_id
                AND object = xdocu_obj.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
     EXPORTING textid = zcx_saplink=&gt;error_message
               msg    = `Documentation object not found, use full ` &amp;
                        `object name including ID and Object(example DTZTEST`.
  ENDIF.

 xdokhl-objname = _docuname.

* Create parent node
  _objtype  = getobjecttype( ).
  root_node = xmldoc-&gt;create_element( _objtype ).
  me-&gt;setattributesfromstructure( node = root_node structure = xdokhl  ).

* Read the documentation text
  CALL FUNCTION &apos;DOCU_READ&apos;
    EXPORTING
      id      = xdokhl-id
      langu   = sy-langu
      object  = xdokhl-object
      typ     = xdokhl-typ
      version = xdokhl-dokversion
    TABLES
      line    = ilines.

* Write records to XML node
  LOOP AT ilines INTO xlines.
    txtlines_node = xmldoc-&gt;create_element( `TextLines` ).
    me-&gt;setattributesfromstructure( node = txtlines_node structure = xlines ).
    rc = root_node-&gt;append_child( txtlines_node ).
  ENDLOOP.

* Add node
  rc = xmldoc-&gt;append_child( root_node ).
  ixmldocument = xmldoc.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createobjectfromixmldoc.

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

  DATA root_node        TYPE REF TO if_ixml_element.
  DATA txtline_node     TYPE REF TO if_ixml_element.
  DATA txtline_filter   TYPE REF TO if_ixml_node_filter.
  DATA txtline_iterator TYPE REF TO if_ixml_node_iterator.

  DATA: BEGIN OF xdokhl,
        objname(62) TYPE c,
        id          TYPE dokhl-id,
        object      TYPE dokhl-object,
        typ         TYPE dokhl-typ,
        dokversion  TYPE dokhl-dokversion,
        END OF xdokhl.

  DATA: ilines  TYPE TABLE OF tline.
  DATA: objname TYPE e071-obj_name.
  DATA _objtype TYPE string.

  FIELD-SYMBOLS: &lt;xlines_wa&gt; LIKE LINE OF ilines.

  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  root_node = xmldoc-&gt;find_from_name( _objtype ).

* Get Root
  me-&gt;getstructurefromattributes(
          EXPORTING  node      = root_node
          CHANGING   structure = xdokhl ).

  objname = xdokhl-objname.

* Get TextLines from XML
  FREE: txtline_filter, txtline_iterator, txtline_node.
  txtline_filter = xmldoc-&gt;create_filter_name( `TextLines` ).
  txtline_iterator = xmldoc-&gt;create_iterator_filtered( txtline_filter ).
  txtline_node ?= txtline_iterator-&gt;get_next( ).
  WHILE txtline_node IS NOT INITIAL.
    APPEND INITIAL LINE TO ilines ASSIGNING &lt;xlines_wa&gt;.
    me-&gt;getstructurefromattributes(
            EXPORTING   node      = txtline_node
            CHANGING    structure = &lt;xlines_wa&gt; ).
    txtline_node ?= txtline_iterator-&gt;get_next( ).
  ENDWHILE.

  CALL FUNCTION &apos;RS_ACCESS_PERMISSION&apos;
    EXPORTING
      global_lock              = &apos;X&apos;
      mode                     = &apos;INSERT&apos;
      object                   = objname
      object_class             = &apos;DOCV&apos;
    EXCEPTIONS
      canceled_in_corr         = 1
      enqueued_by_user         = 3
      enqueue_system_failure   = 4
      locked_by_author         = 5
      illegal_parameter_values = 6
      no_modify_permission     = 7
      no_show_permission       = 8
      permission_failure       = 9.

  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 7 OR 8 OR 9.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;not_authorized.
      WHEN 5.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;object locked&apos;.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  DATA checkexists TYPE flag.
  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  CALL FUNCTION &apos;RS_CORR_INSERT&apos;
    EXPORTING
      object              = objname
      object_class        = &apos;DOCV&apos;
      mode                = &apos;INSERT&apos;
      global_lock         = &apos;X&apos;
*     devclass            = devclass
      author              = sy-uname
      master_language     = sy-langu
    EXCEPTIONS
      cancelled           = 1
      permission_failure  = 2
      unknown_objectclass = 3.
  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 2.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;not_authorized.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DOCU_UPD&apos;
    EXPORTING
      id       = xdokhl-id
      langu    = sy-langu
      object   = xdokhl-object
      typ      = xdokhl-typ
    TABLES
      line     = ilines
    EXCEPTIONS
      ret_code = 1
      OTHERS   = 2.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
     EXPORTING textid = zcx_saplink=&gt;error_message
               msg    = `Documentation object import failed`.
  ENDIF.

  name = objname.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD deleteobject.

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com
  DATA xdokhl TYPE dokhl.
  DATA _docuname TYPE e071-obj_name.
  DATA xdocu_id  TYPE dokhl-id.
  DATA xdocu_obj TYPE dokhl-object.

  _docuname = objname.

  xdocu_id  = _docuname(2).
  xdocu_obj = _docuname+2(60).

  CLEAR xdokhl.
  SELECT SINGLE * INTO xdokhl
           FROM dokhl
             WHERE id = xdocu_id
               AND object = xdocu_obj.

  CALL FUNCTION &apos;DOCU_DEL&apos;
    EXPORTING
      id       = xdokhl-id
      langu    = sy-langu
      object   = xdokhl-object
      typ      = xdokhl-typ
    EXCEPTIONS
      ret_code = 1
      OTHERS   = 2.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
     EXPORTING textid = zcx_saplink=&gt;error_message
               msg    = `Error when deleting existing documentation object`.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE.

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

  objecttype = &apos;DOCV&apos;.  &quot;Documentation

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_FUNCTIONGROUP" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Function Groups" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_FUNCTIONGROUP" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_FUNCTIONGROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_FUNCTIONGROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_FUNCTIONGROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_FUNCTIONGROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_FUNCTIONGROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="ACTUALIZE_OBJECT_TREE" VERSION="1" LANGU="D" DESCRIPT="Refresh Object Tree" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method ACTUALIZE_OBJECT_TREE.
  DATA: l_offset TYPE i.
  DATA: l_tree_string TYPE string.

  CONCATENATE &apos;PG_&apos; &apos;SAPL&apos; objname INTO l_tree_string.

* If we supported namespaces, the following code would be required
*  FIND ALL OCCURRENCES OF &apos;/&apos; IN objname MATCH OFFSET l_offset.
*  IF sy-subrc = 0.
*    l_tree_string  = objname.
*    REPLACE SECTION OFFSET l_offset LENGTH 1 OF  l_tree_string  WITH &apos;/SAPL&apos;.
*    CONCATENATE &apos;PG_&apos; l_tree_string  INTO l_tree_string.
*  ELSE.
*    CONCATENATE &apos;PG_&apos; &apos;SAPL&apos; objname INTO l_tree_string.
*  ENDIF.

  CALL FUNCTION &apos;WB_TREE_ACTUALIZE&apos;
    EXPORTING
      tree_name = l_tree_string.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  select single area from tlibg into objname where area = objname.
  if sy-subrc = 0.
    exists = &apos;X&apos;.
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

  types: begin of t_tlibt,
           area type tlibt-area,
           spras type tlibt-spras,
           areat type tlibt-areat,
         end of t_tlibt.

  data rootnode            type ref to if_ixml_element.
  data mainprognode        type ref to if_ixml_element.
  data includesnode        type ref to if_ixml_element.
  data functgroupnode      type ref to if_ixml_element.
  data functionmodulesnode type ref to if_ixml_element.
  data docNode             type ref to if_ixml_element.
  data textpoolnode        type ref to if_ixml_element.
  data dynpronode          type ref to if_ixml_element.
  data statusnode          type ref to if_ixml_element.
  data sourcenode          type ref to if_ixml_element.
  data fmdocumenation      type ref to if_ixml_element.

  data rc                type sysubrc.
  data progattribs       type trdir.
  data progsource        type rswsourcet.
  data _objname(30)      type c.
  data sourcestring      type string.
  data _objtype          type string.
  data functiongroupname type  tlibg-area.
  data mainfgprogname    type sy-repid.
  DATA l_offset          TYPE i.
  data xtlibt            type t_tlibt.

  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).

* function groups in reserved namespace, not supported.
  IF objname(1) = &apos;/&apos;.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = &apos;Function Groups in / namespace are not supported&apos;.
  ENDIF.

*  create main program name.  Other namespaces are not supported
  CONCATENATE &apos;SAPL&apos; objname INTO mainfgprogname.

* If we did support namespaces, this is how we would
* build the main program name
*  FIND ALL OCCURRENCES OF &apos;/&apos; IN objname MATCH OFFSET l_offset.
*  IF sy-subrc = 0.
*    mainfgprogname = objname.
*    REPLACE SECTION OFFSET l_offset LENGTH 1 OF mainfgprogname WITH &apos;/SAPL&apos;.
*  ELSE.
*    CONCATENATE &apos;SAPL&apos; objname INTO mainfgprogname.
*  ENDIF.

* Set function group name
  functiongroupname = objname.

* Get main program attributes
  select single * from trdir
           into progattribs
                where name = mainfgprogname.
  if sy-subrc &lt;&gt; 0.
    clear ixmldocument.
    RAISE EXCEPTION type zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;not_found.
  endif.

* Get Function group attributes
  clear xtlibt.
  select single * from tlibt
             into corresponding fields of xtlibt
                     where spras = sy-langu
                       and area  = functiongroupname.
  if sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION type zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;not_found.
  endif.

  setattributesfromstructure( node = rootnode
                              structure =  xtlibt  ).

  _objname = objname.
  objname  = mainfgprogname.    &quot; Main program is object

* Write main program for function group.
  mainprognode = xmldoc-&gt;create_element( &apos;mainprogram&apos; ).
  setattributesfromstructure( node = mainprognode
                              structure =   progattribs  ).

  sourcenode = xmldoc-&gt;create_element( &apos;source&apos; ).
  read report mainfgprogname into progsource.
  sourcestring = buildsourcestring( sourcetable = progsource ).
  rc = sourcenode-&gt;if_ixml_node~set_value( sourcestring ).

  textpoolnode =  get_textpool( ).
  rc = mainprognode-&gt;append_child( textpoolnode ).

  docNode = get_documentation( ).
  rc = rootNOde-&gt;append_child( docNode ).

  dynpronode = get_dynpro( ).
  rc = mainprognode-&gt;append_child( dynpronode ).

  statusnode =  get_pfstatus( ).
  rc = mainprognode-&gt;append_child( statusnode ).

  rc = mainprognode-&gt;append_child( sourcenode ).
  rc = rootnode-&gt;append_child( mainprognode ).

* Get the includes
  includesnode = get_includes( main_prog = mainfgprogname
                               fct_group = functiongroupname ).
  rc = rootnode-&gt;append_child( includesnode ).

* Get function modules data.
  functionmodulesnode = get_function_modules( functiongroupname ).
  rc = rootnode-&gt;append_child( functionmodulesnode ).

  rc = xmldoc-&gt;append_child( rootnode ).

  ixmldocument = xmldoc.
  objname      =  _objname.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

  TYPES: BEGIN OF t_tlibt,
           area TYPE tlibt-area,
           spras TYPE tlibt-spras,
           areat TYPE tlibt-areat,
         END OF t_tlibt.

  DATA rootnode      TYPE REF TO if_ixml_element.
  DATA sourcenode    TYPE REF TO if_ixml_element.
  DATA textnode      TYPE REF TO if_ixml_element.
  DATA docnode       TYPE REF TO if_ixml_element.
  DATA dynpnode      TYPE REF TO if_ixml_element.
  DATA statnode      TYPE REF TO if_ixml_element.

  DATA mainprog_node        TYPE REF TO if_ixml_element.
  DATA functionmodule_node  TYPE REF TO if_ixml_element.
  DATA functionmodules_node TYPE REF TO if_ixml_element.
  DATA includes_node        TYPE REF TO if_ixml_element.
  DATA fmdoc_node      TYPE REF TO if_ixml_element.

  DATA progattribs   TYPE trdir.
  DATA source        TYPE string.
  DATA sourcetable   TYPE table_of_strings.
  DATA _objname(30)  TYPE c.
  DATA _objtype      TYPE string.
  DATA checkexists   TYPE flag.

  DATA xtlibt TYPE t_tlibt.
  DATA xstext TYPE tftit-stext.

  DATA functiongroupname TYPE  tlibg-area.

  _objtype = getobjecttype( ).
  xmldoc   = ixmldocument.

  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  _objname = objname.

  getstructurefromattributes(
           EXPORTING
                node      = rootnode
           CHANGING
                structure = xtlibt ).

  functiongroupname = xtlibt-area.

* function groups in reserved namespace, not supported.
  IF functiongroupname(1) = &apos;/&apos;.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = &apos;Function Groups in / namespace are not supported&apos;.
  ENDIF.

  objname = functiongroupname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* Insert the function group
  xstext = xtlibt-areat.
  CALL FUNCTION &apos;RS_FUNCTION_POOL_INSERT&apos;
    EXPORTING
      function_pool           = xtlibt-area
      short_text              = xstext
      devclass                = devclass
    EXCEPTIONS
      name_already_exists     = 1
      name_not_correct        = 2
      function_already_exists = 3
      invalid_function_pool   = 4
      invalid_name            = 5
      too_many_functions      = 6
      no_modify_permission    = 7
      no_show_permission      = 8
      enqueue_system_failure  = 9
      canceled_in_corr        = 10
      undefined_error         = 11
      OTHERS                  = 12.

* Create the function modules
  functionmodules_node  = rootnode-&gt;find_from_name( &apos;functionmodules&apos; ).
  create_function_modules( fm_node = functionmodules_node
                           fct_group =  functiongroupname ).

* Create Includes
  includes_node  = rootnode-&gt;find_from_name( &apos;includeprograms&apos; ).
  create_includes( devclass = devclass
                   incl_node = includes_node ).

* Update main program..... with include statements, dynpros, gui status
  mainprog_node  = rootnode-&gt;find_from_name( &apos;mainprogram&apos; ).

  getstructurefromattributes(
         EXPORTING
            node      = mainprog_node
         CHANGING
            structure = progattribs ).

  objname = progattribs-name.     &quot; Main Program Name is now the object

* Update the main program
  enqueue_abap( ).
  transport_copy( author = progattribs-cnam
                  devclass = devclass ).

* Source
  sourcenode  = mainprog_node-&gt;find_from_name( &apos;source&apos; ).
  source      = sourcenode-&gt;get_value( ).
  sourcetable = buildtablefromstring( source ).
  create_source( source = sourcetable
                 attribs = progattribs ).

* Documentation
  docnode = rootnode-&gt;find_from_name( &apos;functionGroupDocumentation&apos; ).
  create_documentation( docnode ).

* text pool
  textnode = mainprog_node-&gt;find_from_name( &apos;textPool&apos; ).
  create_textpool( textnode ).

* Dynpros
  dynpnode = mainprog_node-&gt;find_from_name( &apos;dynpros&apos; ).
  create_dynpro( dynpnode ).

* Gui status, titles
  statnode = mainprog_node-&gt;find_from_name( &apos;pfstatus&apos; ).
  create_pfstatus( statnode ).

  dequeue_abap( ).

* Rebuild tree structure for SE80
  actualize_object_tree( ).

* successful install
  objname = functiongroupname.
  name = objname.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_DOCUMENTATION" VERSION="1" LANGU="D" DESCRIPT="Create Documentation" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_DOCUMENTATION" SCONAME="DOCNODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATE_DOCUMENTATION.

  DATA txtline_node     TYPE REF TO if_ixml_element.
  DATA txtline_filter   TYPE REF TO if_ixml_node_filter.
  DATA txtline_iterator TYPE REF TO if_ixml_node_iterator.

  DATA lang_node     TYPE REF TO if_ixml_element.
  DATA lang_filter   TYPE REF TO if_ixml_node_filter.
  DATA lang_iterator TYPE REF TO if_ixml_node_iterator.

  data obj_name type DOKHL-OBJECT.
  data prog_name type string.
  data language  type string.
  data obj_langu type DOKHL-LANGU.
  data lv_str type string.
  data rc type sy-subrc.

  DATA lt_lines  TYPE TABLE OF tline.
  FIELD-SYMBOLS: &lt;ls_lines&gt; LIKE LINE OF lt_lines.

  if docnode is not bound.
    return.
  endif.

  prog_name = docNode-&gt;get_attribute( name = &apos;OBJECT&apos; ).
  obj_name = prog_name.

* If no prog name, then there was no program documenation, just return.
  if prog_name is initial.
    return.
  endif.

* Get languages from XML
  FREE: lang_filter, lang_iterator, lang_node.
  lang_filter = docNode-&gt;create_filter_name( `language` ).
  lang_iterator = docNode-&gt;create_iterator_filtered( lang_filter ).
  lang_node ?= lang_iterator-&gt;get_next( ).
  WHILE lang_node IS NOT INITIAL.

    refresh lt_lines.
    language = lang_node-&gt;get_attribute( name = &apos;SPRAS&apos; ).
    obj_langu = language.

* Get TextLines from XML
    FREE: txtline_filter, txtline_iterator, txtline_node.
    txtline_filter = lang_node-&gt;create_filter_name( `textLine` ).
    txtline_iterator = lang_node-&gt;create_iterator_filtered( txtline_filter ).
    txtline_node ?= txtline_iterator-&gt;get_next( ).
    WHILE txtline_node IS NOT INITIAL.
      APPEND INITIAL LINE TO lt_lines ASSIGNING &lt;ls_lines&gt;.
      me-&gt;getstructurefromattributes(
              EXPORTING   node      = txtline_node
              CHANGING    structure = &lt;ls_lines&gt; ).
      txtline_node ?= txtline_iterator-&gt;get_next( ).
    ENDWHILE.

* Delete any documentation that may currently exist.
    CALL FUNCTION &apos;DOCU_DEL&apos;
      EXPORTING
        id       = &apos;RE&apos;   &quot;&lt;-- Report/program documentation
        langu    = obj_langu
        object   = obj_name
        typ      = &apos;E&apos;
      EXCEPTIONS
        ret_code = 1
        OTHERS   = 2.

* Now update with new documentation text
    CALL FUNCTION &apos;DOCU_UPD&apos;
      EXPORTING
        id       = &apos;RE&apos;
        langu    = obj_langu
        object   = obj_name
        typ      = &apos;E&apos;
      TABLES
        line     = lt_lines
      EXCEPTIONS
        ret_code = 1
        OTHERS   = 2.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = `Program Documentation object import failed`.
    ENDIF.

    lang_node ?= lang_iterator-&gt;get_next( ).
  ENDWHILE.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_DYNPRO" VERSION="1" LANGU="D" DESCRIPT="Create Dynpro" EXPOSURE="0" STATE="1" EDITORDER="17 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_DYNPRO" SCONAME="DYNP_NODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATE_DYNPRO.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  types: begin of tdyn_head_temp.
         include type d020s.
  types: dtext type d020t-dtxt.
  types: end of tdyn_head_temp.

  data: idyn_fldl type table of d021s,
        idyn_flow type table of d022s,
        idyn_mcod type table of d023s.

  data: xdyn_head type  d020s,
        xdyn_fldl type  d021s,
        xdyn_flow type  d022s,
        xdyn_mcod type  d023s.

  data: xdyn_text_string type string.
  data: xdyn_text        type d020t-dtxt .
  data: xdyn_head_temp   type tdyn_head_temp.

  data _objname type trobj_name.

  data dynpros_node       type ref to if_ixml_element.
  data dynpros_filter     type ref to if_ixml_node_filter.
  data dynpros_iterator   type ref to if_ixml_node_iterator.

  data dynpro_node        type ref to if_ixml_element.
  data dynpro_filter      type ref to if_ixml_node_filter.
  data dynpro_iterator    type ref to if_ixml_node_iterator.

  data dynfldl_node       type ref to if_ixml_element.
  data dynfldl_filter     type ref to if_ixml_node_filter.
  data dynfldl_iterator   type ref to if_ixml_node_iterator.

  data dynmcod_node       type ref to if_ixml_element.
  data dynmcod_filter     type ref to if_ixml_node_filter.
  data dynmcod_iterator   type ref to if_ixml_node_iterator.

  data dynflow_node       type ref to if_ixml_element.

  data xdynpro_flow_source type string.
  data idynpro_flow_source type table_of_strings.

  _objname = objname.

  dynpros_node =  dynp_node.
  check dynpros_node is not initial.

  free: dynpro_filter, dynpro_iterator, dynpro_node.
  dynpro_filter = dynpros_node-&gt;create_filter_name( &apos;dynpro&apos; ).
  dynpro_iterator =
        dynpros_node-&gt;create_iterator_filtered( dynpro_filter ).
  dynpro_node ?= dynpro_iterator-&gt;get_next( ).

  while dynpro_node is not initial.

    clear:    xdyn_head, xdyn_fldl, xdyn_flow, xdyn_mcod.
    refresh:  idyn_fldl, idyn_flow, idyn_mcod.

* Get the header data for the screen.
    call method getstructurefromattributes
      exporting
        node      = dynpro_node
      changing
        structure = xdyn_head_temp.

    xdyn_head    = xdyn_head_temp.
    xdyn_text    = xdyn_head_temp-dtext.

* Retrieve field list
    free: dynfldl_filter, dynfldl_iterator, dynfldl_node.
    dynfldl_filter = dynpro_node-&gt;create_filter_name( &apos;dynprofield&apos; ).
    dynfldl_iterator =
        dynpro_node-&gt;create_iterator_filtered( dynfldl_filter ).
    dynfldl_node ?= dynfldl_iterator-&gt;get_next( ).
    while dynfldl_node is not initial.
      call method getstructurefromattributes
        exporting
          node      = dynfldl_node
        changing
          structure = xdyn_fldl.
      append xdyn_fldl to idyn_fldl.
      dynfldl_node ?= dynfldl_iterator-&gt;get_next( ).
    endwhile.

* Retrieve matchcode data.
    free: dynmcod_filter, dynmcod_iterator, dynmcod_node.
    dynmcod_filter = dynpro_node-&gt;create_filter_name( &apos;dynprofield&apos; ).
    dynmcod_iterator =
         dynpro_node-&gt;create_iterator_filtered( dynmcod_filter ).
    dynmcod_node ?= dynmcod_iterator-&gt;get_next( ).
    while dynmcod_node is not initial.
      call method getstructurefromattributes
        exporting
          node      = dynmcod_node
        changing
          structure = xdyn_mcod.
      append xdyn_mcod to idyn_mcod.
      dynmcod_node ?= dynmcod_iterator-&gt;get_next( ).
    endwhile.

* retieve flow logic source.
    clear xdynpro_flow_source.  refresh idynpro_flow_source.
    clear xdyn_flow.            refresh idyn_flow.
    free dynflow_node.
    dynflow_node = dynpro_node-&gt;find_from_name( &apos;dynproflowsource&apos; ).
    xdynpro_flow_source  = dynflow_node-&gt;get_value( ).
    idynpro_flow_source = buildtablefromstring( xdynpro_flow_source ).
    loop at idynpro_flow_source into xdyn_flow.
      append xdyn_flow  to idyn_flow.
    endloop.

* Build dynpro from data
    call function &apos;RPY_DYNPRO_INSERT_NATIVE&apos;
      exporting
*       suppress_corr_checks           = &apos; &apos;
*       CORRNUM                        = &apos; &apos;
        header                         = xdyn_head
        dynprotext                     = xdyn_text
*       SUPPRESS_EXIST_CHECKS          = &apos; &apos;
*       USE_CORRNUM_IMMEDIATEDLY       = &apos; &apos;
*       SUPPRESS_COMMIT_WORK           = &apos; &apos;
      tables
        fieldlist                      = idyn_fldl
        flowlogic                      = idyn_flow
        params                         = idyn_mcod
     exceptions
        cancelled                      = 1
        already_exists                 = 2
        program_not_exists             = 3
        not_executed                   = 4
        others                         = 5.
    if sy-subrc &lt;&gt; 0.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;system_error.
    endif.

    dynpro_node ?= dynpro_iterator-&gt;get_next( ).

  endwhile.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_FM_DOCUMENTATION" VERSION="1" LANGU="D" DESCRIPT="Create FM Documentation" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_FM_DOCUMENTATION" SCONAME="DOCNODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATE_FM_DOCUMENTATION.

  DATA txtline_node     TYPE REF TO if_ixml_element.
  DATA txtline_filter   TYPE REF TO if_ixml_node_filter.
  DATA txtline_iterator TYPE REF TO if_ixml_node_iterator.

  DATA lang_node     TYPE REF TO if_ixml_element.
  DATA lang_filter   TYPE REF TO if_ixml_node_filter.
  DATA lang_iterator TYPE REF TO if_ixml_node_iterator.

  data obj_name type DOKHL-OBJECT.
  data fm_parm_name type string.
  data language  type string.
  data obj_langu type DOKHL-LANGU.
  data lv_str type string.
  data rc type sy-subrc.

  DATA lt_lines  TYPE TABLE OF tline.
  FIELD-SYMBOLS: &lt;ls_lines&gt; LIKE LINE OF lt_lines.

  if docnode is not bound.
    return.
  endif.

  fm_parm_name = docNode-&gt;get_attribute( name = &apos;OBJECT&apos; ).
  obj_name = fm_parm_name.

* If no fm_parm_name, then there was no documenation, just return.
  if fm_parm_name is initial.
    return.
  endif.

* Get languages from XML
  FREE: lang_filter, lang_iterator, lang_node.
  lang_filter = docNode-&gt;create_filter_name( `language` ).
  lang_iterator = docNode-&gt;create_iterator_filtered( lang_filter ).
  lang_node ?= lang_iterator-&gt;get_next( ).
  WHILE lang_node IS NOT INITIAL.

    refresh lt_lines.
    language = lang_node-&gt;get_attribute( name = &apos;SPRAS&apos; ).
    obj_langu = language.

* Get TextLines from XML
    FREE: txtline_filter, txtline_iterator, txtline_node.
    txtline_filter = lang_node-&gt;create_filter_name( `textLine` ).
    txtline_iterator = lang_node-&gt;create_iterator_filtered( txtline_filter ).
    txtline_node ?= txtline_iterator-&gt;get_next( ).
    WHILE txtline_node IS NOT INITIAL.
      APPEND INITIAL LINE TO lt_lines ASSIGNING &lt;ls_lines&gt;.
      me-&gt;getstructurefromattributes(
              EXPORTING   node      = txtline_node
              CHANGING    structure = &lt;ls_lines&gt; ).
      txtline_node ?= txtline_iterator-&gt;get_next( ).
    ENDWHILE.

* Delete any documentation that may currently exist.
    CALL FUNCTION &apos;DOCU_DEL&apos;
      EXPORTING
        id       = &apos;FU&apos;   &quot;&lt;-- function module documentation
        langu    = obj_langu
        object   = obj_name
        typ      = &apos;T&apos;
      EXCEPTIONS
        ret_code = 1
        OTHERS   = 2.

* Now update with new documentation text
    CALL FUNCTION &apos;DOCU_UPD&apos;
      EXPORTING
        id       = &apos;FU&apos;
        langu    = obj_langu
        object   = obj_name
        typ      = &apos;T&apos;
      TABLES
        line     = lt_lines
      EXCEPTIONS
        ret_code = 1
        OTHERS   = 2.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = `Program Documentation object import failed`.
    ENDIF.

    lang_node ?= lang_iterator-&gt;get_next( ).
  ENDWHILE.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_FUNCTION_MODULES" VERSION="1" LANGU="D" DESCRIPT="Create Function Modules" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_FUNCTION_MODULES" SCONAME="FM_NODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_FUNCTION_MODULES" SCONAME="FCT_GROUP" VERSION="1" LANGU="D" DESCRIPT="Function group, to which the function module belongs" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TLIBG-AREA"/>
   <source>method CREATE_FUNCTION_MODULES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  TYPES: BEGIN OF tfunct_head,
           name TYPE rs38l-name,
           global TYPE rs38l-global,
           remote TYPE rs38l-remote,
           utask  TYPE rs38l-utask,
           stext  TYPE tftit-stext,
           area   TYPE rs38l-area,
           END OF tfunct_head.

  DATA functionmodules_node TYPE REF TO if_ixml_element.

  DATA source      TYPE string.
  DATA sourcetable TYPE table_of_strings.

  DATA functiongroupname TYPE  tlibg-area.
  DATA mainfgprogname    TYPE trdir-name.

  DATA xfunct_head TYPE tfunct_head.
  DATA iimport     TYPE TABLE OF rsimp.
  DATA ichange     TYPE TABLE OF rscha.
  DATA iexport     TYPE TABLE OF rsexp.
  DATA itables     TYPE TABLE OF rstbl.
  DATA iexcepl     TYPE TABLE OF rsexc.
  DATA idocume     TYPE TABLE OF rsfdo.
  DATA isource     TYPE TABLE OF rssource.
  DATA isource_new TYPE  rsfb_source.

  DATA ximport     TYPE  rsimp.
  DATA xchange     TYPE  rscha.
  DATA xexport     TYPE  rsexp.
  DATA xtables     TYPE  rstbl.
  DATA xexcepl     TYPE  rsexc.
  DATA xdocume     TYPE  rsfdo.
  DATA xsource     TYPE  rssource.
  DATA xsource_new LIKE LINE OF isource_new.

  DATA node          TYPE REF TO if_ixml_element.
  DATA filter        TYPE REF TO if_ixml_node_filter.
  DATA iterator      TYPE REF TO if_ixml_node_iterator.

  DATA im_node       TYPE REF TO if_ixml_element.
  DATA im_filter     TYPE REF TO if_ixml_node_filter.
  DATA im_iterator   TYPE REF TO if_ixml_node_iterator.

  DATA ex_node       TYPE REF TO if_ixml_element.
  DATA ex_filter     TYPE REF TO if_ixml_node_filter.
  DATA ex_iterator   TYPE REF TO if_ixml_node_iterator.

  DATA ch_node       TYPE REF TO if_ixml_element.
  DATA ch_filter     TYPE REF TO if_ixml_node_filter.
  DATA ch_iterator   TYPE REF TO if_ixml_node_iterator.

  DATA ta_node       TYPE REF TO if_ixml_element.
  DATA ta_filter     TYPE REF TO if_ixml_node_filter.
  DATA ta_iterator   TYPE REF TO if_ixml_node_iterator.

  DATA el_node       TYPE REF TO if_ixml_element.
  DATA el_filter     TYPE REF TO if_ixml_node_filter.
  DATA el_iterator   TYPE REF TO if_ixml_node_iterator.

  DATA dm_node       TYPE REF TO if_ixml_element.
  DATA dm_filter     TYPE REF TO if_ixml_node_filter.
  DATA dm_iterator   TYPE REF TO if_ixml_node_iterator.

  DATA sc_node       TYPE REF TO if_ixml_element.
  DATA sc_filter     TYPE REF TO if_ixml_node_filter.
  DATA sc_iterator   TYPE REF TO if_ixml_node_iterator.

  DATA scn_node       TYPE REF TO if_ixml_element.
  DATA scn_filter     TYPE REF TO if_ixml_node_filter.
  DATA scn_iterator   TYPE REF TO if_ixml_node_iterator.

  DATA fmdoc_node     TYPE REF TO if_ixml_element.

  functionmodules_node = fm_node.
  functiongroupname    = fct_group.

  IF functionmodules_node  IS NOT INITIAL.

    FREE: filter, iterator, node.
    filter =
         functionmodules_node-&gt;create_filter_name( &apos;functionmodule&apos; ).
    iterator = functionmodules_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    WHILE node IS NOT INITIAL.

      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = node
        CHANGING
          structure = xfunct_head.

      REFRESH: iimport, ichange, iexport,
               itables, iexcepl, idocume, isource, isource_new.

* Get importing
      FREE: im_filter, im_iterator, im_node.
      im_filter = node-&gt;create_filter_name( &apos;importing&apos; ).
      im_iterator = node-&gt;create_iterator_filtered( im_filter ).
      im_node ?= im_iterator-&gt;get_next( ).
      WHILE im_node IS NOT INITIAL.
        CALL METHOD getstructurefromattributes
          EXPORTING
            node      = im_node
          CHANGING
            structure = ximport.
        APPEND ximport TO iimport.
        im_node ?= im_iterator-&gt;get_next( ).
      ENDWHILE.

* Get exporting
      FREE: ex_filter, ex_iterator, ex_node.
      ex_filter = node-&gt;create_filter_name( &apos;exporting&apos; ).
      ex_iterator = node-&gt;create_iterator_filtered( ex_filter ).
      ex_node ?= ex_iterator-&gt;get_next( ).
      WHILE ex_node IS NOT INITIAL.
        CALL METHOD getstructurefromattributes
          EXPORTING
            node      = ex_node
          CHANGING
            structure = xexport.
        APPEND xexport TO iexport.
        ex_node ?= ex_iterator-&gt;get_next( ).
      ENDWHILE.

* Get changing
      FREE: ch_filter, ch_iterator, ch_node.
      ch_filter = node-&gt;create_filter_name( &apos;changing&apos; ).
      ch_iterator = node-&gt;create_iterator_filtered( ch_filter ).
      ch_node ?= ch_iterator-&gt;get_next( ).
      WHILE ch_node IS NOT INITIAL.
        CALL METHOD getstructurefromattributes
          EXPORTING
            node      = ch_node
          CHANGING
            structure = xchange.
        APPEND xchange TO ichange.
        ch_node ?= ch_iterator-&gt;get_next( ).
      ENDWHILE.

* Get tables
      FREE: ta_filter, ta_iterator, ta_node.
      ta_filter = node-&gt;create_filter_name( &apos;tables&apos; ).
      ta_iterator = node-&gt;create_iterator_filtered( ta_filter ).
      ta_node ?= ta_iterator-&gt;get_next( ).
      WHILE ta_node IS NOT INITIAL.
        CALL METHOD getstructurefromattributes
          EXPORTING
            node      = ta_node
          CHANGING
            structure = xtables.
        APPEND xtables TO itables.
        ta_node ?= ta_iterator-&gt;get_next( ).
      ENDWHILE.

* Get exception list
      FREE: el_filter, el_iterator, el_node.
      el_filter = node-&gt;create_filter_name( &apos;exceptions&apos; ).
      el_iterator = node-&gt;create_iterator_filtered( el_filter ).
      el_node ?= el_iterator-&gt;get_next( ).
      WHILE el_node IS NOT INITIAL.
        CALL METHOD getstructurefromattributes
          EXPORTING
            node      = el_node
          CHANGING
            structure = xexcepl.
        APPEND xexcepl TO iexcepl.
        el_node ?= el_iterator-&gt;get_next( ).
      ENDWHILE.

* Get documentation
      FREE: dm_filter, dm_iterator, dm_node.
      dm_filter = node-&gt;create_filter_name( &apos;documentation&apos; ).
      dm_iterator = node-&gt;create_iterator_filtered( dm_filter ).
      dm_node ?= dm_iterator-&gt;get_next( ).
      WHILE dm_node IS NOT INITIAL.
        CALL METHOD getstructurefromattributes
          EXPORTING
            node      = dm_node
          CHANGING
            structure = xdocume.
        APPEND xdocume TO idocume.
        dm_node ?= dm_iterator-&gt;get_next( ).
      ENDWHILE.

* Get fm source

      FREE: sc_filter, sc_iterator, sc_node.
      sc_filter = node-&gt;create_filter_name( &apos;fm_source&apos; ).
      sc_iterator = node-&gt;create_iterator_filtered( sc_filter ).
      sc_node ?= sc_iterator-&gt;get_next( ).
      WHILE sc_node IS NOT INITIAL.
        source = sc_node-&gt;get_value( ).
        sourcetable = buildtablefromstring( source ).
        LOOP AT sourcetable INTO xsource.
          APPEND xsource TO isource.
        ENDLOOP.
        sc_node ?= sc_iterator-&gt;get_next( ).
      ENDWHILE.

* Get fm source new
      FREE: scn_filter, scn_iterator, scn_node.
      scn_filter = node-&gt;create_filter_name( &apos;fm_source_new&apos; ).
      scn_iterator = node-&gt;create_iterator_filtered( scn_filter ).
      scn_node ?= scn_iterator-&gt;get_next( ).
      WHILE scn_node IS NOT INITIAL.
        source = scn_node-&gt;get_value( ).
        sourcetable = buildtablefromstring( source ).
        LOOP AT sourcetable INTO xsource_new.
          APPEND xsource_new TO isource_new.
        ENDLOOP.
        scn_node ?= scn_iterator-&gt;get_next( ).
      ENDWHILE.

* INsert the function module
      CALL FUNCTION &apos;RS_FUNCTIONMODULE_INSERT&apos;
        EXPORTING
          funcname                = xfunct_head-name
          function_pool           = functiongroupname
          interface_global        = xfunct_head-global
          remote_call             = xfunct_head-remote
          update_task             = xfunct_head-utask
          short_text              = xfunct_head-stext
          save_active             = &apos; &apos; &quot;&lt;-- Need to set inactive
          new_source              = isource_new
        TABLES
          import_parameter        = iimport
          export_parameter        = iexport
          tables_parameter        = itables
          changing_parameter      = ichange
          exception_list          = iexcepl
          parameter_docu          = idocume
          source                  = isource
        EXCEPTIONS
          double_task             = 1
          error_message           = 2
          function_already_exists = 3
          invalid_function_pool   = 4
          invalid_name            = 5
          too_many_functions      = 6
          no_modify_permission    = 7
          no_show_permission      = 8
          enqueue_system_failure  = 9
          canceled_in_corr        = 10
          OTHERS                  = 11.

* Create function module documentation
      fmdoc_node = node-&gt;find_from_name( &apos;functionModuleDocumentation&apos; ).
      create_fm_documentation( fmdoc_node ).

      node ?= iterator-&gt;get_next( ).
    ENDWHILE.

  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_INCLUDES" VERSION="1" LANGU="D" DESCRIPT="Create Include Programs" EXPOSURE="0" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_INCLUDES" SCONAME="INCL_NODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_INCLUDES" SCONAME="DEVCLASS" VERSION="1" LANGU="D" DESCRIPT="Development class/package" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS" PARVALUE="&apos;$TMP&apos;"/>
   <source>method CREATE_INCLUDES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  types: begin of tinclude,
         name(40),
         end of tinclude.

  data iinclude type table of tinclude.
  data xinclude type tinclude.

  data inc_node       type ref to if_ixml_element.
  data inc_filter     type ref to if_ixml_node_filter.
  data inc_iterator   type ref to if_ixml_node_iterator.

  data progattribs type trdir.

  data includes_node     type ref to if_ixml_element.
  data includesourcenode type ref to if_ixml_element.

  data source      type string.
  data sourcetable type table_of_strings.

  includes_node = incl_node.

  check includes_node is not initial.

  free: inc_filter, inc_iterator, inc_node.
  inc_filter = includes_node-&gt;create_filter_name( &apos;include&apos; ).
  inc_iterator = includes_node-&gt;create_iterator_filtered( inc_filter ).
  inc_node ?= inc_iterator-&gt;get_next( ).

  while inc_node is not initial.

    getstructurefromattributes(
          exporting
             node      = inc_node
          changing
             structure = progattribs ).

    includesourcenode = inc_node-&gt;find_from_name( &apos;include_source&apos; ).
    source      = includesourcenode-&gt;get_value( ).
    sourcetable = buildtablefromstring( source ).

    objname = progattribs-name.   &quot; Include Program Name is the object

    enqueue_abap( ).
    transport_copy( author = progattribs-cnam
                                       devclass = devclass ).
    create_source( source = sourcetable
                                      attribs = progattribs ).
    dequeue_abap( ).

    inc_node  ?=  inc_iterator-&gt;get_next( ).

  endwhile.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_PFSTATUS" VERSION="1" LANGU="D" DESCRIPT="Create Gui Status" EXPOSURE="0" STATE="1" EDITORDER="19 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_PFSTATUS" SCONAME="PFSTAT_NODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATE_PFSTATUS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  data: ista type table of rsmpe_stat,
        ifun type table of rsmpe_funt,
        imen type table of rsmpe_men,
        imtx type table of rsmpe_mnlt,
        iact type table of rsmpe_act,
        ibut type table of rsmpe_but,
        ipfk type table of rsmpe_pfk,
        iset type table of rsmpe_staf,
        idoc type table of rsmpe_atrt,
        itit type table of rsmpe_titt,
        ibiv type table of rsmpe_buts.

  data: xsta type rsmpe_stat,
        xfun type rsmpe_funt,
        xmen type rsmpe_men,
        xmtx type rsmpe_mnlt,
        xact type rsmpe_act,
        xbut type rsmpe_but,
        xpfk type rsmpe_pfk,
        xset type rsmpe_staf,
        xdoc type rsmpe_atrt,
        xtit type rsmpe_titt,
        xbiv type rsmpe_buts.

  data xtrkey type trkey.
  data xadm   type rsmpe_adm.
  data _program type  trdir-name.
  data _objname type trobj_name.

  data stat_node  type ref to if_ixml_element.
  data node       type ref to if_ixml_element.
  data filter     type ref to if_ixml_node_filter.
  data iterator   type ref to if_ixml_node_iterator.

  _objname = objname.

  stat_node =  pfstat_node.
  check stat_node is not initial.

* read pfstatus_sta node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_sta&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xsta.
    append xsta to ista.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_fun node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_fun&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xfun.
    append xfun to ifun.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_men node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_men&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xmen.
    append xmen to imen.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_mtx node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_mtx&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xmtx.
    append xmtx to imtx.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_act node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_act&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xact.
    append xact to iact.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_but node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_but&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xbut.
    append xbut to ibut.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_pfk node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_pfk&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xpfk.
    append xpfk to ipfk.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_set node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_set&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xset.
    append xset to iset.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_doc node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_doc&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xdoc.
    append xdoc to idoc.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_tit node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_tit&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xtit.
    append xtit to itit.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_biv node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_biv&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xbiv.
    append xbiv to ibiv.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* Update the gui status
  _program = _objname.

  xtrkey-obj_type = &apos;PROG&apos;.
  xtrkey-obj_name = _program.
  xtrkey-sub_type = &apos;CUAD&apos;.
  xtrkey-sub_name = _program.

  call function &apos;RS_CUA_INTERNAL_WRITE&apos;
    exporting
      program   = _program
      language  = sy-langu
      tr_key    = xtrkey
      adm       = xadm
      state     = &apos;I&apos;
    tables
      sta       = ista
      fun       = ifun
      men       = imen
      mtx       = imtx
      act       = iact
      but       = ibut
      pfk       = ipfk
      set       = iset
      doc       = idoc
      tit       = itit
      biv       = ibiv
    exceptions
      not_found = 1
      others    = 2.

  if sy-subrc &lt;&gt; 0.
    raise exception type zcx_saplink
      exporting textid = zcx_saplink=&gt;system_error.
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_SOURCE" VERSION="1" LANGU="D" DESCRIPT="Create Source" EXPOSURE="0" STATE="1" EDITORDER="12 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_SOURCE" SCONAME="SOURCE" VERSION="1" LANGU="D" DESCRIPT="Table of Strings" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TABLE_OF_STRINGS"/>
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_SOURCE" SCONAME="ATTRIBS" VERSION="1" LANGU="D" DESCRIPT="Generated Table for View TRDIR" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TRDIR"/>
   <source>method CREATE_SOURCE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
data _objName type TROBJ_NAME.
data progLine type PROGDIR.
data titleInfo type trdirti.
data reportLine type string.
data miniReport type table_of_strings.

  _objName = objName.
  call function &apos;RS_INSERT_INTO_WORKING_AREA&apos;
        exporting
             OBJECT   = &apos;REPS&apos;
             OBJ_NAME = _objName
        exceptions
             WRONG_OBJECT_NAME = 1.
   INSERT REPORT _objName FROM source STATE &apos;I&apos;
     program type attribs-subc.  &quot;added to handle includes, etc.
   MOVE &apos;I&apos; TO progline-STATE.
   move-corresponding attribs to progline.
   modify progdir from progline.
*  Are you kidding me?!?  No idea why you need to do this!!
   CONCATENATE &apos;REPORT&apos; _objName &apos;.&apos; INTO reportLine SEPARATED BY SPACE.
   append reportline to miniReport.
   INSERT REPORT _objName FROM miniReport STATE &apos;A&apos;
     program type attribs-subc. &quot;added to handle includes, etc.
   MOVE &apos;A&apos; TO progline-STATE.
   modify progdir from progline.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_TEXTPOOL" VERSION="1" LANGU="D" DESCRIPT="Create Text Pool" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_TEXTPOOL" SCONAME="TEXTPOOLNODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATE_TEXTPOOL.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
data textPoolTable type standard table of textPool.
data textPoolRow type textPool.
data langIterator type ref to if_ixml_node_iterator.
data filter type ref to if_ixml_node_filter.
data textFilter type ref to if_ixml_node_filter.
data textIterator type ref to if_ixml_node_iterator.
data langNode type ref to if_ixml_element.
data aTextNode type ref to if_ixml_element.
data _objName type TROBJ_NAME.
data lang type spras.
data langNodeExists type flag.
data logonLanguageExists type flag.
data _state(1) type c.

  _objName = objName.

  filter = textPoolNode-&gt;create_filter_name( &apos;language&apos; ).
  langIterator = textPoolNode-&gt;create_iterator_filtered( filter ).
  langNode ?= langIterator-&gt;get_next( ).

  while langNode is not initial.
    langNodeExists = &apos;X&apos;.
    CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
         EXPORTING
              OBJECT   = &apos;REPT&apos;
              OBJ_NAME = _objName
         EXCEPTIONS
              OTHERS   = 0.

    refresh textPoolTable.
    textIterator = langNode-&gt;create_iterator( ).
    aTextNode ?= textIterator-&gt;get_next( ).
*For some reason the 1st one is blank... not sure why.
    aTextNode ?= textIterator-&gt;get_next( ).
    while aTextNode is not initial.
      call method GETSTRUCTUREFROMATTRIBUTES
            exporting
              node = aTextNode
            changing
              structure = textPoolRow.
      append textPoolRow to textPoolTable.
      aTextNode ?= textIterator-&gt;get_next( ).
    endwhile.
    if textPoolTable is not initial.
      lang = langNode-&gt;get_attribute( &apos;SPRAS&apos; ).
      if lang = sy-langu.
        logonLanguageExists = &apos;X&apos;.
        _state = &apos;I&apos;.
      else.
*       seems that if a textpool is inserted as inactive for language
*       other than the logon language, it is lost upon activation
*       not sure inserting as active is best solution,but seems to work
        _state = &apos;A&apos;.
      endif.
    endif.
    insert textpool _objName from textPooltable language lang
    state _state.
    langNode ?= langIterator-&gt;get_next( ).
  endwhile.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  data area type RS38L-AREA.

  area = objName.

  call function &apos;RS_FUNCTION_POOL_DELETE&apos;
   EXPORTING
      AREA                         = area
*   CORRNUM                      = &apos; &apos;
*   TEXT                         = &apos; &apos;
*   UNAME                        = &apos; &apos;
      WITH_KORR                    = &apos; &apos;
*   WB_FB_MANAGER                =
      SUPPRESS_POPUPS              = &apos;X&apos;
*   SKIP_PROGRESS_IND            = &apos; &apos;
* IMPORTING
*   E_CORRNUM                    =
 EXCEPTIONS
   CANCELED_IN_CORR             = 1
   ENQUEUE_SYSTEM_FAILURE       = 2
   FUNCTION_EXIST               = 3
   NOT_EXECUTED                 = 4
   NO_MODIFY_PERMISSION         = 5
   NO_SHOW_PERMISSION           = 6
   PERMISSION_FAILURE           = 7
   POOL_NOT_EXIST               = 8
   CANCELLED                    = 9
   OTHERS                       = 10.
  .
  if sy-subrc &lt;&gt; 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  endif.


endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="DEQUEUE_ABAP" VERSION="1" LANGU="D" DESCRIPT="Dequeue ABAP" EXPOSURE="0" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="DEQUEUE_ABAP" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method DEQUEUE_ABAP.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  call function &apos;RS_ACCESS_PERMISSION&apos;
       exporting
            global_lock              = &apos;X&apos;
            mode                     = &apos;FREE&apos;
            object                   = objName
            object_class             = &apos;ABAP&apos;
       exceptions
            canceled_in_corr         = 1
            enqueued_by_user         = 3
            enqueue_system_failure   = 4
            locked_by_author         = 5
            illegal_parameter_values = 6
            no_modify_permission     = 7
            no_show_permission       = 8
            permission_failure       = 9.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 7 or 8 or 9.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;not_authorized.
      when 5.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;error_message
            msg = &apos;object locked&apos;.
      when others.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="ENQUEUE_ABAP" VERSION="1" LANGU="D" DESCRIPT="Enqueue ABAP" EXPOSURE="0" STATE="1" EDITORDER="13 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="ENQUEUE_ABAP" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method ENQUEUE_ABAP.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


  call function &apos;RS_ACCESS_PERMISSION&apos;
       exporting
*            authority_check          = authority_check
            global_lock              = &apos;X&apos;
            mode                     = &apos;INSERT&apos;
*            master_language          = trdir-rload
            object                   = objName
            object_class             = &apos;ABAP&apos;
*       importing
*            transport_key            = trkey_global
*            new_master_language      = trdir-rload
*            devclass                 = devclass_local
       exceptions
            canceled_in_corr         = 1
            enqueued_by_user         = 3
            enqueue_system_failure   = 4
            locked_by_author         = 5
            illegal_parameter_values = 6
            no_modify_permission     = 7
            no_show_permission       = 8
            permission_failure       = 9.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 7 or 8 or 9.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;not_authorized.
      when 5.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;error_message
            msg = &apos;object locked&apos;.
      when others.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  objectType = &apos;FUGR&apos;. &quot; Function Group
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_DOCUMENTATION" VERSION="1" LANGU="D" DESCRIPT="Get Documentation" EXPOSURE="0" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_DOCUMENTATION" SCONAME="DOCNODE" VERSION="1" LANGU="D" DESCRIPT="Documentation Node" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_DOCUMENTATION.

  data languageNode   type ref to if_ixml_element.
  DATA txtlines_node TYPE REF TO if_ixml_element.
  DATA rc            TYPE sysubrc.
  DATA _objtype      TYPE string.

  Types: BEGIN OF t_dokhl,
          id          TYPE dokhl-id,
          object      TYPE dokhl-object,
          langu       type dokhl-langu,
          typ         TYPE dokhl-typ,
          dokversion  TYPE dokhl-dokversion,
         END OF t_dokhl.

  data lt_dokhl type table of t_dokhl.
  data ls_dokhl like line of lt_dokhl.

  DATA lt_lines TYPE TABLE OF tline.
  DATA ls_lines LIKE LINE OF lt_lines.

  data lv_str type string.
  DATA _objname TYPE e071-obj_name.

  _objname = objname.

* Check against database
  SELECT  id object langu typ dokversion
        INTO corresponding fields of table lt_dokhl
           FROM dokhl
             WHERE id = &apos;RE&apos;
                AND object = _objname.

* Use only most recent version.
  sort lt_dokhl by id object langu typ ascending dokversion descending.
  delete adjacent duplicates from lt_dokhl comparing id object typ langu.

  docNode = xmlDoc-&gt;create_element( &apos;functionGroupDocumentation&apos; ).

* Make sure there is at least one record here.
  clear ls_dokhl.
  read table lt_dokhl into ls_dokhl index 1.
  if sy-subrc &lt;&gt; 0.
    return.
  endif.

* Set docNode object attribute
  lv_str = ls_dokhl-object.
  rc = docNode-&gt;set_attribute( name = &apos;OBJECT&apos; value = lv_Str ).

  Loop at lt_dokhl into ls_dokhl.

* Create language node, and set attribute
    languageNode = xmlDoc-&gt;create_element( &apos;language&apos; ).
    lv_str = ls_dokhl-langu.
    rc = languageNode-&gt;set_attribute( name = &apos;SPRAS&apos; value = lv_Str ).

* Read the documentation text
    CALL FUNCTION &apos;DOCU_READ&apos;
      EXPORTING
        id      = ls_dokhl-id
        langu   = ls_dokhl-langu
        object  = ls_dokhl-object
        typ     = ls_dokhl-typ
        version = ls_dokhl-dokversion
      TABLES
        line    = lt_lines.

* Write records to XML node
    LOOP AT lt_lines INTO ls_lines.
      txtlines_node = xmlDoc-&gt;create_element( `textLine` ).
      me-&gt;setattributesfromstructure( node = txtlines_node structure = ls_lines ).
      rc = languageNode-&gt;append_child( txtlines_node ).
    ENDLOOP.
    rc = docNode-&gt;append_child( languageNode ) .
  Endloop.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_DYNPRO" VERSION="1" LANGU="D" DESCRIPT="Get Dynpro" EXPOSURE="0" STATE="1" EDITORDER="16 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_DYNPRO" SCONAME="DYNP_NODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_DYNPRO.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  types: begin of tdynp,
         prog type d020s-prog,
         dnum type d020s-dnum,
         end of tdynp.

  data: idyn_fldl type table of d021s,
        idyn_flow type table of d022s,
        idyn_mcod type table of d023s.

  data: xdyn_head type  d020s,
        xdyn_fldl type  d021s,
        xdyn_flow type  d022s,
        xdyn_mcod type  d023s.

  data idynp type table of tdynp.
  data xdynp type tdynp.

  data xdyn_text type d020t-dtxt.
  data xdyn_text_string type string.

  data _objname type trobj_name.
  data rc type sy-subrc .

  data iflowsource type rswsourcet.
  data xflowsource like line of iflowsource.
  data flowsourcestring type string.

  data dynnr_node type ref to if_ixml_element.
  data dynpromatchnode type ref to if_ixml_element.
  data dynprofieldsnode type ref to if_ixml_element.
  data dynproflownode type ref to if_ixml_element.

  _objname = objname.

* Get all dynpros for program object
  clear xdynp.  refresh idynp.
  select prog dnum into table idynp
                from d020s
                   where prog = _objname
                     and type &lt;&gt; &apos;S&apos;    &quot; No Selection Screens
                     and type &lt;&gt; &apos;J&apos;.   &quot; No selection subscreens
  check sy-subrc  = 0 .

  dynp_node = xmldoc-&gt;create_element( &apos;dynpros&apos; ).

  loop at idynp into xdynp.

* Retrieve dynpro imformation
    dynnr_node =  xmldoc-&gt;create_element( &apos;dynpro&apos; ).

    clear:    xdyn_head, xdyn_fldl, xdyn_flow, xdyn_mcod.
    refresh:  idyn_fldl, idyn_flow, idyn_mcod.

    call function &apos;RPY_DYNPRO_READ_NATIVE&apos;
      exporting
        progname                    = xdynp-prog
        dynnr                       = xdynp-dnum
*       SUPPRESS_EXIST_CHECKS       = &apos; &apos;
*       SUPPRESS_CORR_CHECKS        = &apos; &apos;
    importing
        HEADER                      = xdyn_head
        dynprotext                  = xdyn_text
     tables
        fieldlist                   = idyn_fldl
        flowlogic                   = idyn_flow
        params                      = idyn_mcod
*       FIELDTEXTS                  =
     exceptions
        cancelled                   = 1
        not_found                   = 2
        permission_error            = 3
        others                      = 4.

    check sy-subrc = 0.

* Add heading information for screen.
    setattributesfromstructure(
                     node = dynnr_node structure =  xdyn_head  ).
* Add the dynpro text also.
    xdyn_text_string =  xdyn_text.
    rc = dynnr_node-&gt;set_attribute(
               name = &apos;DTEXT&apos;  value = xdyn_text_string ).
    rc = dynp_node-&gt;append_child( dynnr_node ).

* Add fields information for screen.
    if not idyn_fldl[] is initial.
      loop at idyn_fldl into xdyn_fldl.
        dynprofieldsnode = xmldoc-&gt;create_element( &apos;dynprofield&apos; ).
        setattributesfromstructure(
                 node = dynprofieldsnode structure =  xdyn_fldl ).
        rc = dynnr_node-&gt;append_child( dynprofieldsnode ).
      endloop.
    endif.

* Add flow logic of screen
    if not idyn_flow[] is initial.
      clear xflowsource. refresh  iflowsource.
      loop at idyn_flow into xdyn_flow.
        xflowsource  = xdyn_flow.
        append xflowsource to iflowsource.
      endloop.

      dynproflownode = xmldoc-&gt;create_element( &apos;dynproflowsource&apos; ).
      flowsourcestring = buildsourcestring( sourcetable = iflowsource ).
      rc = dynproflownode-&gt;if_ixml_node~set_value( flowsourcestring ).
      rc = dynnr_node-&gt;append_child( dynproflownode  ).
    endif.

* Add matchcode information for screen.
    if not idyn_mcod[] is initial.
      loop at idyn_mcod into xdyn_mcod.
        check not xdyn_mcod-type is initial
          and not xdyn_mcod-content is initial.
        dynpromatchnode = xmldoc-&gt;create_element( &apos;dynpromatchcode&apos; ).
        setattributesfromstructure(
                 node = dynpromatchnode structure =  xdyn_mcod ).
        rc = dynnr_node-&gt;append_child( dynpromatchnode ).
      endloop.
    endif.

  endloop.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_FM_DOCUMENTATION" VERSION="1" LANGU="D" DESCRIPT="Get FM Documentation" EXPOSURE="0" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_FM_DOCUMENTATION" SCONAME="FM_NAME" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_FM_DOCUMENTATION" SCONAME="DOCNODE" VERSION="1" LANGU="D" DESCRIPT="Documentation Node" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_FM_DOCUMENTATION.

  DATA languagenode   TYPE REF TO if_ixml_element.
  DATA txtlines_node TYPE REF TO if_ixml_element.
  DATA rc            TYPE sysubrc.
  DATA _objtype      TYPE string.

  TYPES: BEGIN OF t_dokhl,
          id          TYPE dokhl-id,
          object      TYPE dokhl-object,
          langu       TYPE dokhl-langu,
          typ         TYPE dokhl-typ,
          dokversion  TYPE dokhl-dokversion,
         END OF t_dokhl.

  DATA lt_dokhl TYPE TABLE OF t_dokhl.
  DATA ls_dokhl LIKE LINE OF lt_dokhl.

  DATA lt_lines TYPE TABLE OF tline.
  DATA ls_lines LIKE LINE OF lt_lines.

  DATA lv_str TYPE string.
  DATA _objname TYPE e071-obj_name.

  _objname = fm_name.

* Check against database
  SELECT  id object langu typ dokversion
        INTO CORRESPONDING FIELDS OF TABLE lt_dokhl
           FROM dokhl
             WHERE id = &apos;FU&apos;
                AND object = _objname.

* Use only most recent version.
  SORT lt_dokhl BY id object langu typ ASCENDING dokversion DESCENDING.
  DELETE ADJACENT DUPLICATES FROM lt_dokhl COMPARING id object typ langu.

  docnode = xmldoc-&gt;create_element( &apos;functionModuleDocumentation&apos; ).

* Make sure there is at least one record here.
  CLEAR ls_dokhl.
  READ TABLE lt_dokhl INTO ls_dokhl INDEX 1.
  IF sy-subrc &lt;&gt; 0.
    RETURN.
  ENDIF.

* Set docNode object attribute
  lv_str = ls_dokhl-object.
  rc = docnode-&gt;set_attribute( name = &apos;OBJECT&apos; value = lv_str ).

  LOOP AT lt_dokhl INTO ls_dokhl.

* Create language node, and set attribute
    languagenode = xmldoc-&gt;create_element( &apos;language&apos; ).
    lv_str = ls_dokhl-langu.
    rc = languagenode-&gt;set_attribute( name = &apos;SPRAS&apos; value = lv_str ).

* Read the documentation text
    CALL FUNCTION &apos;DOCU_READ&apos;
      EXPORTING
        id      = ls_dokhl-id
        langu   = ls_dokhl-langu
        object  = ls_dokhl-object
        typ     = ls_dokhl-typ
        version = ls_dokhl-dokversion
      TABLES
        line    = lt_lines.

* Write records to XML node
    LOOP AT lt_lines INTO ls_lines.
      txtlines_node = xmldoc-&gt;create_element( `textLine` ).
      me-&gt;setattributesfromstructure( node = txtlines_node structure = ls_lines ).
      rc = languagenode-&gt;append_child( txtlines_node ).
    ENDLOOP.
    rc = docnode-&gt;append_child( languagenode ) .
  ENDLOOP.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_FUNCTION_MODULES" VERSION="1" LANGU="D" DESCRIPT="Get Function Modules" EXPOSURE="0" STATE="1" EDITORDER="14 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_FUNCTION_MODULES" SCONAME="FCT_GROUP" VERSION="1" LANGU="D" DESCRIPT="Function group, to which the function module belongs" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TLIBG-AREA"/>
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_FUNCTION_MODULES" SCONAME="FM_NODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_FUNCTION_MODULES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  TYPES: BEGIN OF tfunct_head,
         name   TYPE rs38l-name,
         global TYPE rs38l-global,
         remote TYPE rs38l-remote,
         utask  TYPE rs38l-utask,
         stext  TYPE tftit-stext,
         area   TYPE rs38l-area,
         END OF tfunct_head.

  DATA xfunct_head TYPE tfunct_head.
  DATA iimport     TYPE TABLE OF rsimp.
  DATA ichange     TYPE TABLE OF rscha.
  DATA iexport     TYPE TABLE OF rsexp.
  DATA itables     TYPE TABLE OF rstbl.
  DATA iexcepl     TYPE TABLE OF rsexc.
  DATA idocume     TYPE TABLE OF rsfdo.
  DATA isource     TYPE TABLE OF rssource.
  DATA isource_new TYPE rsfb_source .

  DATA ximport     TYPE  rsimp.
  DATA xchange     TYPE  rscha.
  DATA xexport     TYPE  rsexp.
  DATA xtables     TYPE  rstbl.
  DATA xexcepl     TYPE  rsexc.
  DATA xdocume     TYPE  rsfdo.
  DATA xsource     TYPE  rssource.
  DATA xsource_new LIKE LINE OF isource_new.

  DATA functionmodulesnode TYPE REF TO if_ixml_element.
  DATA functionmodulenode  TYPE REF TO if_ixml_element.
  DATA importsnode TYPE REF TO if_ixml_element.
  DATA changesnode TYPE REF TO if_ixml_element.
  DATA exportsnode TYPE REF TO if_ixml_element.
  DATA tablesnode  TYPE REF TO if_ixml_element.
  DATA exceplnode  TYPE REF TO if_ixml_element.
  DATA documsnode  TYPE REF TO if_ixml_element.
  DATA fmsrcenode  TYPE REF TO if_ixml_element.
  DATA fmsrcenewnode  TYPE REF TO if_ixml_element.
  DATA fmdocumenation TYPE REF TO if_ixml_element.
  DATA fmparmdocumenation TYPE REF TO if_ixml_element.

  DATA functiongroupname TYPE  tlibg-area.

  DATA ifunct TYPE TABLE OF  rs38l_incl.
  DATA xfunct TYPE  rs38l_incl.

  DATA rc           TYPE sysubrc.
  DATA progattribs  TYPE trdir.
  DATA progsource   TYPE rswsourcet.
  DATA _objname(30) TYPE c.
  DATA sourcestring TYPE string.
  DATA function_deleted    TYPE c.
  DATA endfunction_deleted TYPE c.
  DATA lv_len TYPE i.

  functiongroupname = fct_group.

* Now get the function pool contents
  CALL FUNCTION &apos;RS_FUNCTION_POOL_CONTENTS&apos;
    EXPORTING
      function_pool           = functiongroupname
    TABLES
      functab                 = ifunct
    EXCEPTIONS
      function_pool_not_found = 1
      OTHERS                  = 2.

* Now write out function modules data.
  functionmodulesnode = xmldoc-&gt;create_element( &apos;functionmodules&apos; ).

  LOOP AT ifunct INTO xfunct.

    functionmodulenode = xmldoc-&gt;create_element( &apos;functionmodule&apos; ).
    xfunct_head-name =  xfunct-funcname.

    REFRESH: iimport, ichange, iexport,
             itables, iexcepl, idocume, isource, isource_new.

* Read the function module data
    CALL FUNCTION &apos;RPY_FUNCTIONMODULE_READ_NEW&apos;
      EXPORTING
        functionname       = xfunct_head-name
      IMPORTING
        global_flag        = xfunct_head-global
        remote_call        = xfunct_head-remote
        update_task        = xfunct_head-utask
        short_text         = xfunct_head-stext
*       FUNCTION_POOL      =
      TABLES
        import_parameter   = iimport
        changing_parameter = ichange
        export_parameter   = iexport
        tables_parameter   = itables
        exception_list     = iexcepl
        documentation      = idocume
        source             = isource
      CHANGING
        new_source         = isource_new
      EXCEPTIONS
        error_message      = 1
        function_not_found = 2
        invalid_name       = 3
        OTHERS             = 4.

* Set the header attributes
    setattributesfromstructure(
               node = functionmodulenode
               structure =  xfunct_head  ).

* IMports
    IF NOT iimport[] IS INITIAL.
      LOOP AT iimport INTO ximport.
        importsnode = xmldoc-&gt;create_element( &apos;importing&apos; ).
        setattributesfromstructure(
                 node = importsnode structure =  ximport ).
        rc = functionmodulenode-&gt;append_child( importsnode ).
      ENDLOOP.
    ENDIF.

* Exports
    IF NOT iexport[] IS INITIAL.
      LOOP AT iexport INTO xexport.
        exportsnode = xmldoc-&gt;create_element( &apos;exporting&apos; ).
        setattributesfromstructure(
                 node = exportsnode structure =  xexport ).
        rc = functionmodulenode-&gt;append_child( exportsnode ).
      ENDLOOP.
    ENDIF.

* Changing
    IF NOT ichange[] IS INITIAL.
      LOOP AT ichange INTO xchange.
        changesnode = xmldoc-&gt;create_element( &apos;changing&apos; ).
        setattributesfromstructure(
                 node = changesnode structure =  xchange ).
        rc = functionmodulenode-&gt;append_child( changesnode ).
      ENDLOOP.
    ENDIF.

* Tables
    IF NOT itables[] IS INITIAL.
      LOOP AT itables INTO xtables.
        tablesnode = xmldoc-&gt;create_element( &apos;tables&apos; ).
        setattributesfromstructure(
                 node = tablesnode structure =  xtables ).
        rc = functionmodulenode-&gt;append_child( tablesnode ).
      ENDLOOP.
    ENDIF.

* Exception list
    IF NOT iexcepl[] IS INITIAL.
      LOOP AT iexcepl INTO xexcepl.
        exceplnode = xmldoc-&gt;create_element( &apos;exceptions&apos; ).
        setattributesfromstructure(
                 node = exceplnode structure =  xexcepl ).
        rc = functionmodulenode-&gt;append_child( exceplnode ).
      ENDLOOP.
    ENDIF.

* Documentation - this is short text
    IF NOT idocume[] IS INITIAL.
      LOOP AT idocume INTO xdocume .
        documsnode = xmldoc-&gt;create_element( &apos;documentation&apos; ).
        setattributesfromstructure(
                 node = documsnode structure =  xdocume  ).

        rc = functionmodulenode-&gt;append_child( documsnode ).
      ENDLOOP.
    ENDIF.

* Source code for function module
    IF NOT isource[] IS INITIAL.

* Get rid of the FUNCTION and ENDFUNCTION statements.
* And the signature comments
* All of this will be inserted automatically, when imported.
      CLEAR: function_deleted, endfunction_deleted.
      LOOP AT isource INTO xsource.
        IF xsource+0(2) = &apos;*&quot;&apos;.
          DELETE isource INDEX sy-tabix.
          CONTINUE.
        ENDIF.
        SEARCH xsource FOR &apos;FUNCTION&apos;.
        &quot;Got it and not a comment?
        IF sy-subrc  = 0 AND xsource+0(1) &lt;&gt; &apos;*&apos; AND
           function_deleted NE &apos;X&apos;.
          DELETE isource INDEX sy-tabix.
          function_deleted = &apos;X&apos;.
          CONTINUE.
        ENDIF.
        SEARCH xsource FOR &apos;ENDFUNCTION&apos;.
        IF sy-subrc  = 0.
          DELETE isource INDEX sy-tabix.
          endfunction_deleted = &apos;X&apos;.
          CONTINUE.
        ENDIF.
      ENDLOOP.

      fmsrcenode = xmldoc-&gt;create_element( &apos;fm_source&apos; ).
      REFRESH progsource.
      LOOP AT isource INTO xsource.
        APPEND xsource TO progsource.
      ENDLOOP.
      sourcestring = buildsourcestring( sourcetable = progsource ).
      rc = fmsrcenode-&gt;if_ixml_node~set_value( sourcestring ).
      rc = functionmodulenode-&gt;append_child( fmsrcenode ).

    ENDIF.

* Source code for function module
    IF NOT isource_new[] IS INITIAL.

* Get rid of the FUNCTION and ENDFUNCTION statements.
* And the signature comments
* All of this will be inserted automatically, when imported.
      CLEAR: function_deleted, endfunction_deleted.
      LOOP AT isource_new INTO xsource_new.
        CHECK xsource_new IS NOT INITIAL.
        CLEAR lv_len.
        lv_len = strlen( xsource_new ).
        IF lv_len GE 2.
          IF xsource_new+0(2) = &apos;*&quot;&apos;.
            DELETE isource_new INDEX sy-tabix.
            CONTINUE.
          ENDIF.
        ENDIF.
        SEARCH xsource_new FOR &apos;FUNCTION&apos;.
        &quot;Got it and not a comment?
        IF sy-subrc  = 0 AND xsource_new+0(1) &lt;&gt; &apos;*&apos; AND
           function_deleted NE &apos;X&apos;.
          DELETE isource_new INDEX sy-tabix.
          function_deleted = &apos;X&apos;.
          CONTINUE.
        ENDIF.
        SEARCH xsource_new FOR &apos;ENDFUNCTION&apos;.
        IF sy-subrc  = 0.
          DELETE isource_new INDEX sy-tabix.
          endfunction_deleted = &apos;X&apos;.
          CONTINUE.
        ENDIF.
      ENDLOOP.

      fmsrcenewnode = xmldoc-&gt;create_element( &apos;fm_source_new&apos; ).
      REFRESH progsource.
      LOOP AT isource_new INTO xsource_new.
        APPEND xsource_new TO progsource.
      ENDLOOP.
      sourcestring = buildsourcestring( sourcetable = progsource ).
      rc = fmsrcenewnode-&gt;if_ixml_node~set_value( sourcestring ).
      rc = functionmodulenode-&gt;append_child( fmsrcenewnode ).

    ENDIF.

* Get function module documentation
    fmdocumenation = get_fm_documentation( xfunct-funcname ).
    rc = functionmodulenode-&gt;append_child( fmdocumenation ).

* Add to functionmodules node
    rc = functionmodulesnode-&gt;append_child( functionmodulenode ).

  ENDLOOP.


  fm_node = functionmodulesnode.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_INCLUDES" VERSION="1" LANGU="D" DESCRIPT="Get Include Programs" EXPOSURE="0" STATE="1" EDITORDER="11 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_INCLUDES" SCONAME="MAIN_PROG" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SY-REPID"/>
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_INCLUDES" SCONAME="FCT_GROUP" VERSION="1" LANGU="D" DESCRIPT="Function group, to which the function module belongs" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TLIBT-AREA"/>
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_INCLUDES" SCONAME="INCL_NODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_INCLUDES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  types: begin of tinclude,
         name(40),
         end of tinclude.

  data iinclude type table of tinclude.
  data xinclude type tinclude.

  data ifunct type table of  rs38l_incl.
  data xfunct type  rs38l_incl.

  data functiongroupname type  tlibg-area.
  data mainfgprogname    type sy-repid.

  data includenode  type ref to if_ixml_element.
  data includesnode type ref to if_ixml_element.
  data includesourcenode type ref to if_ixml_element.

  data progattribs  type trdir.
  data rc           type sysubrc.
  data progsource   type rswsourcet.
  data _objname(30) type c.
  data sourcestring type string.

  functiongroupname = fct_group.
  mainfgprogname    = main_prog.

  CALL FUNCTION &apos;RS_FUNCTION_POOL_CONTENTS&apos;
    EXPORTING
      function_pool           = functiongroupname
    TABLES
      functab                 = ifunct
    EXCEPTIONS
      function_pool_not_found = 1
      others                  = 2.

* Get all includes
  CALL FUNCTION &apos;RS_GET_ALL_INCLUDES&apos;
    EXPORTING
      program      = mainfgprogname
    TABLES
      includetab   = iinclude
    EXCEPTIONS
      not_existent = 1
      no_program   = 2
      others       = 3.

* Get rid of any includes that are for the function modules
* and any includes that are in SAP namespace
  loop at iinclude into xinclude.
    read table ifunct
             into xfunct
                   with key include = xinclude-name.
    if sy-subrc  = 0.
      delete iinclude where name = xinclude-name.
      continue.
    endif.
    select single * from trdir
            into progattribs
                   where name = xinclude-name.
    if progattribs-cnam = &apos;SAP&apos;.
      delete iinclude where name = xinclude-name.
      continue.
    endif.
    if xinclude-name(2) &lt;&gt; &apos;LZ&apos;
       and xinclude-name(2) &lt;&gt; &apos;LY&apos;
       and xinclude-name(1) &lt;&gt; &apos;Z&apos;
       and xinclude-name(1) &lt;&gt; &apos;Y&apos;.
      delete iinclude where name = xinclude-name.
      continue.
    endif.
  endloop.

* Write out include programs.....
  includesnode = xmldoc-&gt;create_element( &apos;includeprograms&apos; ).

  loop at iinclude into xinclude.

    includenode = xmldoc-&gt;create_element( &apos;include&apos; ).
    select single * from trdir
            into progattribs
                   where name = xinclude-name.
    setattributesfromstructure(
               node = includenode
               structure =  progattribs  ).

    includesourcenode = xmldoc-&gt;create_element( &apos;include_source&apos; ).
    read report xinclude-name into progsource.
    sourcestring = buildsourcestring( sourcetable = progsource ).
    rc = includesourcenode-&gt;if_ixml_node~set_value( sourcestring ).
    rc = includenode-&gt;append_child( includesourcenode ).
    rc = includesnode-&gt;append_child( includenode ).

  endloop.

  incl_node = includesnode.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_PFSTATUS" VERSION="1" LANGU="D" DESCRIPT="Get Gui Status" EXPOSURE="0" STATE="1" EDITORDER="18 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_PFSTATUS" SCONAME="PFSTAT_NODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_PFSTATUS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  data: ista type table of rsmpe_stat,
        ifun type table of rsmpe_funt,
        imen type table of rsmpe_men,
        imtx type table of rsmpe_mnlt,
        iact type table of rsmpe_act,
        ibut type table of rsmpe_but,
        ipfk type table of rsmpe_pfk,
        iset type table of rsmpe_staf,
        idoc type table of rsmpe_atrt,
        itit type table of rsmpe_titt,
        ibiv type table of rsmpe_buts.

  data: xsta type rsmpe_stat,
        xfun type rsmpe_funt,
        xmen type rsmpe_men,
        xmtx type rsmpe_mnlt,
        xact type rsmpe_act,
        xbut type rsmpe_but,
        xpfk type rsmpe_pfk,
        xset type rsmpe_staf,
        xdoc type rsmpe_atrt,
        xtit type rsmpe_titt,
        xbiv type rsmpe_buts.

  data sta_node type ref to if_ixml_element.
  data fun_node type ref to if_ixml_element.
  data men_node type ref to if_ixml_element.
  data mtx_node type ref to if_ixml_element.
  data act_node type ref to if_ixml_element.
  data but_node type ref to if_ixml_element.
  data pfk_node type ref to if_ixml_element.
  data set_node type ref to if_ixml_element.
  data doc_node type ref to if_ixml_element.
  data tit_node type ref to if_ixml_element.
  data biv_node type ref to if_ixml_element.

  data _objname type trobj_name.
  data _program type  trdir-name.
  data rc type sy-subrc.

  _objname = objname.
  _program = objname.

  call function &apos;RS_CUA_INTERNAL_FETCH&apos;
    exporting
      program         = _program
      language        = sy-langu
    tables
      sta             = ista
      fun             = ifun
      men             = imen
      mtx             = imtx
      act             = iact
      but             = ibut
      pfk             = ipfk
      set             = iset
      doc             = idoc
      tit             = itit
      biv             = ibiv
    exceptions
      not_found       = 1
      unknown_version = 2
      others          = 3.

  check sy-subrc = 0.

* if there is a gui status or gui title present, then
* create pfstatus node.
  if ista[] is not initial
     or itit[] is not initial.
    pfstat_node = xmldoc-&gt;create_element( &apos;pfstatus&apos; ).
  endif.


* if ista is filled, assume there are one or more
* gui statuses
  if ista[] is not initial.

    loop at ista into xsta.
      sta_node = xmldoc-&gt;create_element( &apos;pfstatus_sta&apos; ).
      setattributesfromstructure(
               node = sta_node
               structure =  xsta ).
      rc = pfstat_node-&gt;append_child( sta_node ).
    endloop.

    loop at ifun into xfun.
      fun_node = xmldoc-&gt;create_element( &apos;pfstatus_fun&apos; ).
      setattributesfromstructure(
               node = fun_node
               structure =  xfun ).
      rc = pfstat_node-&gt;append_child( fun_node ).
    endloop.

    loop at imen into xmen.
      men_node = xmldoc-&gt;create_element( &apos;pfstatus_men&apos; ).
      setattributesfromstructure(
               node = men_node
               structure =  xmen ).
      rc = pfstat_node-&gt;append_child( men_node ).
    endloop.

    loop at imtx into xmtx.
      mtx_node = xmldoc-&gt;create_element( &apos;pfstatus_mtx&apos; ).
      setattributesfromstructure(
               node = mtx_node
               structure =  xmtx ).
      rc = pfstat_node-&gt;append_child( mtx_node ).
    endloop.

    loop at iact into xact.
      act_node = xmldoc-&gt;create_element( &apos;pfstatus_act&apos; ).
      setattributesfromstructure(
               node = act_node
               structure =  xact ).
      rc = pfstat_node-&gt;append_child( act_node ).
    endloop.

    loop at ibut into xbut.
      but_node = xmldoc-&gt;create_element( &apos;pfstatus_but&apos; ).
      setattributesfromstructure(
               node = but_node
               structure =  xbut ).
      rc = pfstat_node-&gt;append_child( but_node ).
    endloop.

    loop at ipfk into xpfk.
      pfk_node = xmldoc-&gt;create_element( &apos;pfstatus_pfk&apos; ).
      setattributesfromstructure(
               node = pfk_node
               structure =  xpfk ).
      rc = pfstat_node-&gt;append_child( pfk_node ).
    endloop.

    loop at iset into xset.
      set_node = xmldoc-&gt;create_element( &apos;pfstatus_set&apos; ).
      setattributesfromstructure(
               node = set_node
               structure =  xset ).
      rc = pfstat_node-&gt;append_child( set_node ).
    endloop.

    loop at idoc into xdoc.
      doc_node = xmldoc-&gt;create_element( &apos;pfstatus_doc&apos; ).
      setattributesfromstructure(
               node = doc_node
               structure =  xdoc ).
      rc = pfstat_node-&gt;append_child( doc_node ).
    endloop.


    loop at ibiv into xbiv.
      biv_node = xmldoc-&gt;create_element( &apos;pfstatus_biv&apos; ).
      setattributesfromstructure(
               node = biv_node
               structure =  xbiv ).
      rc = pfstat_node-&gt;append_child( biv_node ).
    endloop.

  endif.


* It itit is filled, assume one or more titles
  if itit[] is not initial.

    loop at itit into xtit.
      tit_node = xmldoc-&gt;create_element( &apos;pfstatus_tit&apos; ).
      setattributesfromstructure(
               node = tit_node
               structure =  xtit ).
      rc = pfstat_node-&gt;append_child( tit_node ).
    endloop.

  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_TEXTPOOL" VERSION="1" LANGU="D" DESCRIPT="Get Text Pool" EXPOSURE="0" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_TEXTPOOL" SCONAME="TEXTNODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_TEXTPOOL.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

data aText type ref to if_ixml_element.
data textPoolTable type standard table of TEXTPOOL.
data textPoolRow type textPool.
data languageList type instLang.
data aLanguage type SPRAS.
data _objName(30) type c.
data rc type i.
data sTemp type string.
data languageNode type ref to if_ixml_element.

  _objName = objName.


  textNode = xmlDoc-&gt;create_element( &apos;textPool&apos; ).

  CALL FUNCTION &apos;RS_TEXTLOG_GET_PARAMETERS&apos;
        changing
          INSTALLED_LANGUAGES = languageList.

  loop at languageList into aLanguage.
    read textpool _objName into textPoolTable language aLanguage.
    if sy-subrc = 0.
      languageNode = xmlDoc-&gt;create_Element( &apos;language&apos; ).
      sTemp = aLanguage.
      rc = languageNode-&gt;set_attribute( name = &apos;SPRAS&apos; value = sTemp ).
      loop at textPoolTable into textPoolRow.
        aText = xmlDoc-&gt;create_element( &apos;textElement&apos; ).
        setAttributesFromStructure( node = aText structure =
        textPoolRow ).
        rc = languageNode-&gt;append_child( aText ).
      endloop.
      rc = textNode-&gt;append_child( languageNode ).
    endif.
  endloop.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="TRANSPORT_COPY" VERSION="1" LANGU="D" DESCRIPT="Transport Copy" EXPOSURE="0" STATE="1" EDITORDER="15 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="TRANSPORT_COPY" SCONAME="AUTHOR" VERSION="1" LANGU="D" DESCRIPT="SAP System, User Logon Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYUNAME"/>
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="TRANSPORT_COPY" SCONAME="DEVCLASS" VERSION="1" LANGU="D" DESCRIPT="Package" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS"/>
   <exception CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="TRANSPORT_COPY" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method TRANSPORT_COPY.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


  CALL FUNCTION &apos;RS_CORR_INSERT&apos;
       EXPORTING
            AUTHOR              = author
            GLOBAL_LOCK         = &apos;X&apos;
            OBJECT              = objName
            OBJECT_CLASS        = &apos;ABAP&apos;
            DEVCLASS            = devClass
*            KORRNUM             = CORRNUMBER_LOCAL
            MASTER_LANGUAGE     = sy-langu
*            PROGRAM             = PROGRAM_LOCAL
            MODE                = &apos;INSERT&apos;
*       IMPORTING
*            AUTHOR              = UNAME
*            KORRNUM             = CORRNUMBER_LOCAL
*            DEVCLASS            = DEVCLASS_LOCAL
       EXCEPTIONS
            CANCELLED           = 1
            PERMISSION_FAILURE  = 2
            UNKNOWN_OBJECTCLASS = 3.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 2.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;not_authorized.
      when others.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_MESSAGE_CLASS" VERSION="1" LANGU="D" DESCRIPT="SAPLink - Message Class plugin" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_MESSAGE_CLASS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_MESSAGE_CLASS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_MESSAGE_CLASS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_MESSAGE_CLASS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_MESSAGE_CLASS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_MESSAGE_CLASS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD checkexists .

*      Plugin created by:
*      John Patterson
*      patterjo@gmail.com

  DATA: ls_t100a TYPE t100a,
        lv_msgid TYPE msgid.

  lv_msgid =  objname.

  SELECT SINGLE *
    INTO ls_t100a
    FROM t100a
    WHERE arbgb = lv_msgid.

  IF sy-subrc = 0.
    exists = &apos;X&apos;.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createixmldocfromobject .

*      Plugin created by:
*      John Patterson
*      patterjo@gmail.com

  DATA: lt_t100  TYPE STANDARD TABLE OF t100,
        lt_t100t TYPE STANDARD TABLE OF t100t,
        ls_t100  LIKE LINE OF lt_t100,
        ls_t100t LIKE LINE OF lt_t100t,
        ls_t100a TYPE t100a.

  DATA: lv_msgid TYPE msgid,
        lv_rc    TYPE sysubrc,
        lv_objtype TYPE string.

*xml nodes
  DATA: lr_rootnode   TYPE REF TO if_ixml_element,
        lr_t100_node  TYPE REF TO if_ixml_element,
        lr_t100t_node TYPE REF TO if_ixml_element.

  lv_msgid = objname.

  SELECT SINGLE *
   INTO ls_t100a
   FROM t100a WHERE arbgb = lv_msgid.

  IF sy-subrc NE 0.
    RAISE EXCEPTION TYPE zcx_saplink
    EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.
  CALL FUNCTION &apos;RS_ACCESS_PERMISSION&apos;
    EXPORTING
      authority_check          = &apos;X&apos;
      global_lock              = space
      mode                     = &apos;SHOW&apos;
      object                   = lv_msgid
      object_class             = &apos;T100&apos;
    EXCEPTIONS
      canceled_in_corr         = 01
      enqueued_by_user         = 02
      enqueue_system_failure   = 03
      illegal_parameter_values = 04
      locked_by_author         = 05
      no_modify_permission     = 06
      no_show_permission       = 07
      permission_failure       = 08.
  CASE sy-subrc.
    WHEN 0.
    WHEN 2 OR 5.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;locked.
    WHEN 6 OR 7 OR 8 OR 9.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_authorized.
    WHEN OTHERS.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDCASE.

*--- get messages for all maintained languages
  SELECT *
   INTO TABLE lt_t100
   FROM t100
   WHERE arbgb = lv_msgid.

*--- get text for t100a
  SELECT  *
   INTO TABLE lt_t100t
   FROM t100t
   WHERE arbgb = lv_msgid.

*-- Create parent node
  lv_objtype = getobjecttype( ).
  lr_rootnode = xmldoc-&gt;create_element( lv_objtype ).
  setattributesfromstructure( node = lr_rootnode
                              structure = ls_t100a ).

*--- Create Elements for Messages
  LOOP AT lt_t100 INTO ls_t100.
    lr_t100_node = xmldoc-&gt;create_element( &apos;t100&apos; ).
    setattributesfromstructure( node = lr_t100_node
                                structure = ls_t100 ).
    lv_rc = lr_rootnode-&gt;append_child( lr_t100_node ).
  ENDLOOP.

*--- Create Elements for Texts
  LOOP AT lt_t100t INTO ls_t100t.
    lr_t100t_node = xmldoc-&gt;create_element( &apos;t100t&apos; ).
    setattributesfromstructure( node = lr_t100t_node
                                structure = ls_t100t ).
    lv_rc = lr_rootnode-&gt;append_child( lr_t100t_node ).
  ENDLOOP.

  lv_rc = xmldoc-&gt;append_child( lr_rootnode ).
  ixmldocument = xmldoc.



ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createobjectfromixmldoc .

*      Plugin created by:
*      John Patterson
*      patterjo@gmail.com

  DATA: lt_t100  TYPE STANDARD TABLE OF t100,
        lt_t100t TYPE STANDARD TABLE OF t100t,
        ls_t100  LIKE LINE OF lt_t100,
        ls_t100t LIKE LINE OF lt_t100t,
        ls_t100a TYPE t100a.

  DATA: lv_msgid TYPE msgid,
        lv_rc    TYPE sysubrc,
        lv_objtype TYPE string,
        lv_checkexists TYPE char1,
        lv_len TYPE i.

*--- xml data objects
  DATA: lr_rootnode   TYPE REF TO if_ixml_element,
        lr_t100_node  TYPE REF TO if_ixml_element,
        lr_t100t_node TYPE REF TO if_ixml_element,
        lr_filter     TYPE REF TO if_ixml_node_filter,
        lr_iterator   TYPE REF TO if_ixml_node_iterator.

  lv_msgid = objname.
  lv_objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  lr_rootnode = xmldoc-&gt;find_from_name( lv_objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = lr_rootnode
    CHANGING
      structure = ls_t100a.

  objname = ls_t100a-arbgb.

  lv_checkexists = checkexists( ).
  IF lv_checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
      deleteobject( ).
    ENDIF.
  ENDIF.

*--- Read Elements for Messages
  FREE: lr_filter, lr_iterator, lr_t100_node, lr_t100t_node.
  lr_filter = xmldoc-&gt;create_filter_name( &apos;t100&apos; ).
  lr_iterator = xmldoc-&gt;create_iterator_filtered( lr_filter ).
  lr_t100_node ?= lr_iterator-&gt;get_next( ).

  WHILE lr_t100_node IS NOT INITIAL.
    CLEAR ls_t100.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = lr_t100_node
      CHANGING
        structure = ls_t100.
    APPEND ls_t100 TO lt_t100.
    lr_t100_node ?= lr_iterator-&gt;get_next( ).
  ENDWHILE.

*--- Create Elements for Texts
  FREE: lr_filter, lr_iterator, lr_t100_node, lr_t100t_node.
  lr_filter = xmldoc-&gt;create_filter_name( &apos;t100t&apos; ).
  lr_iterator = xmldoc-&gt;create_iterator_filtered( lr_filter ).
  lr_t100t_node ?= lr_iterator-&gt;get_next( ).

  WHILE lr_t100t_node IS NOT INITIAL.
    CLEAR ls_t100t.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = lr_t100t_node
      CHANGING
        structure = ls_t100t.
    APPEND ls_t100t TO lt_t100t.
    lr_t100t_node ?= lr_iterator-&gt;get_next( ).
  ENDWHILE.

  CALL FUNCTION &apos;RS_ACCESS_PERMISSION&apos;
    EXPORTING
      mode         = &apos;FREE&apos;
      object       = lv_msgid
      object_class = &apos;T100&apos;.

*--- Check permission
  CALL FUNCTION &apos;RS_ACCESS_PERMISSION&apos;
    EXPORTING
      authority_check          = &apos;X&apos;
      global_lock              = &apos;X&apos;
      mode                     = &apos;INSERT&apos;
      language_upd_exit        = &apos;UPDATE_MASTER&apos;
      master_language          = ls_t100a-masterlang
      object                   = lv_msgid
      object_class             = &apos;T100&apos;
      suppress_language_check  = &apos; &apos;
    EXCEPTIONS
      canceled_in_corr         = 01
      enqueued_by_user         = 02
      enqueue_system_failure   = 03
      illegal_parameter_values = 04
      locked_by_author         = 05
      no_modify_permission     = 06
      no_show_permission       = 07
      permission_failure       = 08.
  CASE sy-subrc.
    WHEN 0.
    WHEN 2 OR 5.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;locked.
    WHEN 6 OR 7 OR 8 OR 9.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_authorized.
    WHEN OTHERS.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDCASE.

  CALL FUNCTION &apos;RS_CORR_INSERT&apos;
       EXPORTING
            author              = sy-uname
            global_lock         = &apos;X&apos;
            object              = objname
            object_class        = &apos;T100&apos;
            devclass            = devclass
            master_language     = sy-langu
            mode                = &apos;INSERT&apos;
*       IMPORTING
*            AUTHOR              = UNAME
*            KORRNUM             = CORRNUMBER_LOCAL
*            DEVCLASS            = DEVCLASS_LOCAL
       EXCEPTIONS
            cancelled           = 1
            permission_failure  = 2
            unknown_objectclass = 3.

  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 2.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;not_authorized.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

*--- update message tables
  CLEAR: ls_t100a-applclass.

  ls_t100a-lastuser = sy-uname.
  ls_t100a-ldate = sy-datum.
  ls_t100a-ltime = sy-uzeit.

  MODIFY t100a FROM ls_t100a.
  MODIFY t100 FROM TABLE lt_t100.
  MODIFY t100t FROM TABLE lt_t100t.

  CALL FUNCTION &apos;RS_TREE_OBJECT_PLACEMENT&apos;
    EXPORTING
      object    = lv_msgid
      operation = &apos;INSERT&apos;
      type      = &apos;CN&apos;.

  CALL FUNCTION &apos;RS_ACCESS_PERMISSION&apos;
    EXPORTING
      mode         = &apos;FREE&apos;
      object       = lv_msgid
      object_class = &apos;T100&apos;.

  name = objname.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method DELETEOBJECT .
*      Plugin created by:
*      John Patterson
*      patterjo@gmail.com
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD getobjecttype .

*      Plugin created by:
*      John Patterson
*      patterjo@gmail.com

  objecttype = &apos;MSAG&apos;. &quot;Message Class
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_PDF_FORMS" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Programs" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_PDF_FORMS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_PDF_FORMS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_PDF_FORMS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_PDF_FORMS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_PDF_FORMS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_PDF_FORMS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD checkexists .

  SELECT SINGLE name FROM fplayout INTO objname WHERE name = objname.
  IF sy-subrc = 0.
    exists = &apos;X&apos;.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createixmldocfromobject .
  DATA rootnode     TYPE REF TO if_ixml_element.
  DATA sourcenode   TYPE REF TO if_ixml_element.
  DATA rc           TYPE sysubrc.
  DATA sourcestring TYPE string.
  DATA _objtype     TYPE string.

  TYPES: t_raw(1024) TYPE x.

  DATA: l_wb_form        TYPE REF TO   if_fp_wb_form,
        l_form           TYPE REF TO   if_fp_form,
        l_formname       TYPE          fpname,
        l_name           TYPE          string,
        l_file_table     TYPE          filetable,
        l_filename       TYPE          string,
        l_pathname       TYPE          string,
        l_fullpath       TYPE          string,
        l_rc             TYPE          i,
        l_user_action    TYPE          i,
        l_xstring        TYPE          xstring,
        l_string        TYPE          string,
        l_binary_table   TYPE TABLE OF t_raw,
        l_binary_length  TYPE          i,
        l_node           TYPE REF TO   if_fp_node,
        l_form_wb        TYPE REF TO   cl_fp_wb_form,
        l_form_wb_if     TYPE REF TO   if_fp_wb_form.

  l_formname = objname.

  TRY.
      CALL METHOD cl_fp_wb_form=&gt;load
        EXPORTING
          i_name    = l_formname
        RECEIVING
          r_wb_form = l_form_wb_if.
    CATCH cx_fp_api_usage .
      CLEAR ixmldocument.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_found.
    CATCH cx_fp_api_repository .
      CLEAR ixmldocument.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_found.
    CATCH cx_fp_api_internal .
      CLEAR ixmldocument.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDTRY.

  l_wb_form ?= l_form_wb_if.

  l_form ?= l_wb_form-&gt;get_object( ).

  l_name = l_wb_form-&gt;get_name( ).

  TRY.
      l_xstring = cl_fp_helper=&gt;convert_form_to_xstring( l_form ).
    CATCH cx_fp_api_internal.
      CLEAR ixmldocument.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDTRY.

  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).

  DATA: wa_fplayout TYPE fplayout.

  SELECT SINGLE * FROM fplayout INTO wa_fplayout WHERE name = objname.

  setattributesfromstructure( node = rootnode structure =  wa_fplayout
  ).
  sourcenode = xmldoc-&gt;create_element( &apos;PDFform&apos; ).

  l_string = l_xstring.

  rc = sourcenode-&gt;if_ixml_node~set_value( l_string ).
  rc = rootnode-&gt;append_child( sourcenode ).
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

METHOD createobjectfromixmldoc .

  DATA rootnode         TYPE REF TO if_ixml_element.
  DATA progattribs      TYPE trdir.
  DATA sourcenode       TYPE REF TO if_ixml_element.
  DATA l_xml_node       TYPE REF TO if_ixml_element.
  DATA source           TYPE string.
  DATA sourcetable      TYPE table_of_strings.
  DATA _objtype         TYPE string.
  DATA checkexists      TYPE flag.

  DATA: wa_fplayout     TYPE fplayout,
        formname        TYPE tdsfname,
        modif_language  TYPE sylangu.

  TYPES: t_raw(1024) TYPE x.

  DATA: l_exception_workbench  TYPE REF TO   cx_fp_ui_workbench,
        l_exception_usage      TYPE REF TO   cx_fp_api_usage,
        l_exception_repository TYPE REF TO   cx_fp_api_repository,
        l_exception_internal   TYPE REF TO   cx_fp_api_internal,
        l_message_text         TYPE          string,
        l_form                 TYPE REF TO   if_fp_form,
        l_file_table           TYPE          filetable,
        l_filename             TYPE          string,
        l_rc                   TYPE          i,
        l_user_action          TYPE          i,
        l_xstring              TYPE          xstring,
        l_binary_table         TYPE TABLE OF t_raw,
        l_binary_length        TYPE          i,
        l_node                 TYPE REF TO   if_fp_node,
        m_wb_object            TYPE REF TO   if_fp_wb_form.

  _objtype = getobjecttype( ).
  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = wa_fplayout.
  objname = wa_fplayout-name.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  sourcenode = rootnode-&gt;find_from_name( &apos;PDFform&apos; ).
  source = sourcenode-&gt;get_value( ).
  l_xstring = source.

  formname = objname.

  TRY.
      TRY.
          cl_fp_wb_helper=&gt;form_exists( wa_fplayout-name ).
        CATCH cx_fp_api_usage INTO l_exception_usage.
          RAISE EXCEPTION TYPE zcx_saplink
               EXPORTING msg = &apos;Error creating PDF form&apos;.
        CATCH cx_fp_api_repository INTO l_exception_repository.

          CASE l_exception_repository-&gt;textid.

            WHEN cx_fp_api_repository=&gt;object_already_exists.

              l_message_text = l_exception_repository-&gt;get_text( ).

              RAISE EXCEPTION TYPE zcx_saplink
               EXPORTING msg = &apos;Object already exists&apos;.

          ENDCASE.

      ENDTRY.

      TRY.
          l_form = cl_fp_helper=&gt;convert_xstring_to_form( i_xstring = l_xstring i_language = sy-langu ).

          CALL METHOD cl_fp_helper=&gt;set_new_layout_id
            CHANGING
              c_form = l_form.
        CATCH cx_fp_api_internal.
          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Convert XML error&apos;.
          EXIT.
      ENDTRY.

      TRY.
          m_wb_object = cl_fp_wb_form=&gt;create( i_name = wa_fplayout-name i_form = l_form ).
        CATCH cx_fp_api_usage INTO l_exception_usage.

          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Error creating PDF form&apos;.

        CATCH cx_fp_api_repository INTO l_exception_repository.

          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Error creating PDF form&apos;.

      ENDTRY.

      TRY.
          m_wb_object-&gt;save( ).
        CATCH cx_fp_api_usage INTO l_exception_usage.

          TRY.
              m_wb_object-&gt;free( ).
            CATCH cx_fp_api.
          ENDTRY.

          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Error saving PDF form&apos;.

        CATCH cx_fp_api_repository INTO l_exception_repository.

          TRY.
              m_wb_object-&gt;free( ).
            CATCH cx_fp_api.
          ENDTRY.

          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Error saving PDF form&apos;.

        CATCH cx_fp_api_internal INTO l_exception_internal.

          TRY.
              m_wb_object-&gt;free( ).
            CATCH cx_fp_api.
          ENDTRY.

          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Error saving PDF form&apos;.

      ENDTRY.

      TRY.
          m_wb_object-&gt;free( ).
        CATCH cx_fp_api.
      ENDTRY.


    CATCH cx_fp_ui_workbench INTO l_exception_workbench.

      IF l_exception_workbench-&gt;textid &lt;&gt; cx_fp_ui_workbench=&gt;error_occured.

        l_message_text = l_exception_workbench-&gt;get_text( ).
        RAISE EXCEPTION TYPE zcx_saplink
         EXPORTING msg = l_message_text.

      ENDIF.

  ENDTRY.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD deleteobject .
  DATA: l_wb_form   TYPE REF TO cl_fp_wb_form,
        l_formname  TYPE fpname.

  l_formname = objname.

  TRY.
      CALL METHOD cl_fp_wb_form=&gt;delete
        EXPORTING
          i_name = l_formname.
    CATCH cx_fp_api_usage .
    CATCH cx_fp_api_repository .
  ENDTRY.



ENDMETHOD.                    &quot;createobjectfromixmldoc</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD getobjecttype .
  objecttype = &apos;SFPF&apos;. &quot;Form Object: Form
ENDMETHOD.</source>
  </method>
 </CLAS>
</nugget>
